// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/cppbattle/cpp_battle_new.proto

package cppbattle

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClickTyp int32

const (
	ClickTyp_ClickTypPerfect ClickTyp = 0
	ClickTyp_ClickTypGood    ClickTyp = 1
	ClickTyp_ClickTypBad     ClickTyp = 2
	ClickTyp_ClickTypMiss    ClickTyp = 3
)

var ClickTyp_name = map[int32]string{
	0: "ClickTypPerfect",
	1: "ClickTypGood",
	2: "ClickTypBad",
	3: "ClickTypMiss",
}

var ClickTyp_value = map[string]int32{
	"ClickTypPerfect": 0,
	"ClickTypGood":    1,
	"ClickTypBad":     2,
	"ClickTypMiss":    3,
}

func (ClickTyp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0}
}

type NSNB struct {
}

func (m *NSNB) Reset()      { *m = NSNB{} }
func (*NSNB) ProtoMessage() {}
func (*NSNB) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0}
}
func (m *NSNB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB.Merge(m, src)
}
func (m *NSNB) XXX_Size() int {
	return m.Size()
}
func (m *NSNB) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB proto.InternalMessageInfo

func (*NSNB) XXX_MessageName() string {
	return "cppbattle.NSNB"
}

type NSNB_Vec2 struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *NSNB_Vec2) Reset()      { *m = NSNB_Vec2{} }
func (*NSNB_Vec2) ProtoMessage() {}
func (*NSNB_Vec2) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 0}
}
func (m *NSNB_Vec2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_Vec2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_Vec2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_Vec2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_Vec2.Merge(m, src)
}
func (m *NSNB_Vec2) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_Vec2) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_Vec2.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_Vec2 proto.InternalMessageInfo

func (m *NSNB_Vec2) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *NSNB_Vec2) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (*NSNB_Vec2) XXX_MessageName() string {
	return "cppbattle.NSNB.Vec2"
}

type NSNB_Ping struct {
	ClientTime int64 `protobuf:"varint,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (m *NSNB_Ping) Reset()      { *m = NSNB_Ping{} }
func (*NSNB_Ping) ProtoMessage() {}
func (*NSNB_Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 1}
}
func (m *NSNB_Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_Ping.Merge(m, src)
}
func (m *NSNB_Ping) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_Ping proto.InternalMessageInfo

func (m *NSNB_Ping) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (*NSNB_Ping) XXX_MessageName() string {
	return "cppbattle.NSNB.Ping"
}

type NSNB_Pong struct {
	ClientTime  int64 `protobuf:"varint,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	ServerTime  int64 `protobuf:"varint,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_Pong) Reset()      { *m = NSNB_Pong{} }
func (*NSNB_Pong) ProtoMessage() {}
func (*NSNB_Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 2}
}
func (m *NSNB_Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_Pong.Merge(m, src)
}
func (m *NSNB_Pong) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_Pong proto.InternalMessageInfo

func (m *NSNB_Pong) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *NSNB_Pong) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NSNB_Pong) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_Pong) XXX_MessageName() string {
	return "cppbattle.NSNB.Pong"
}

type NSNB_EdgeAuth struct {
}

func (m *NSNB_EdgeAuth) Reset()      { *m = NSNB_EdgeAuth{} }
func (*NSNB_EdgeAuth) ProtoMessage() {}
func (*NSNB_EdgeAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 3}
}
func (m *NSNB_EdgeAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_EdgeAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_EdgeAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_EdgeAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_EdgeAuth.Merge(m, src)
}
func (m *NSNB_EdgeAuth) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_EdgeAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_EdgeAuth.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_EdgeAuth proto.InternalMessageInfo

func (*NSNB_EdgeAuth) XXX_MessageName() string {
	return "cppbattle.NSNB.EdgeAuth"
}

type NSNB_ManyPushMsg struct {
	Messages    []*types.Any `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	ServerFrame int64        `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_ManyPushMsg) Reset()      { *m = NSNB_ManyPushMsg{} }
func (*NSNB_ManyPushMsg) ProtoMessage() {}
func (*NSNB_ManyPushMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 4}
}
func (m *NSNB_ManyPushMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ManyPushMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ManyPushMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ManyPushMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ManyPushMsg.Merge(m, src)
}
func (m *NSNB_ManyPushMsg) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ManyPushMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ManyPushMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ManyPushMsg proto.InternalMessageInfo

func (m *NSNB_ManyPushMsg) GetMessages() []*types.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *NSNB_ManyPushMsg) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_ManyPushMsg) XXX_MessageName() string {
	return "cppbattle.NSNB.ManyPushMsg"
}

type NSNB_AuthTCPPushToServer struct {
	RoleId         string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Token          string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ConfigId       int64  `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ClientTime     int64  `protobuf:"varint,4,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	BinDataVersion int64  `protobuf:"varint,5,opt,name=bin_data_version,json=binDataVersion,proto3" json:"bin_data_version,omitempty"`
}

func (m *NSNB_AuthTCPPushToServer) Reset()      { *m = NSNB_AuthTCPPushToServer{} }
func (*NSNB_AuthTCPPushToServer) ProtoMessage() {}
func (*NSNB_AuthTCPPushToServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 5}
}
func (m *NSNB_AuthTCPPushToServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_AuthTCPPushToServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_AuthTCPPushToServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_AuthTCPPushToServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_AuthTCPPushToServer.Merge(m, src)
}
func (m *NSNB_AuthTCPPushToServer) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_AuthTCPPushToServer) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_AuthTCPPushToServer.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_AuthTCPPushToServer proto.InternalMessageInfo

func (m *NSNB_AuthTCPPushToServer) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_AuthTCPPushToServer) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NSNB_AuthTCPPushToServer) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_AuthTCPPushToServer) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *NSNB_AuthTCPPushToServer) GetBinDataVersion() int64 {
	if m != nil {
		return m.BinDataVersion
	}
	return 0
}

func (*NSNB_AuthTCPPushToServer) XXX_MessageName() string {
	return "cppbattle.NSNB.AuthTCPPushToServer"
}

type NSNB_BinDataVersionPush struct {
	BinDataVersion int64  `protobuf:"varint,1,opt,name=bin_data_version,json=binDataVersion,proto3" json:"bin_data_version,omitempty"`
	ServerIp       string `protobuf:"bytes,2,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`
	ServerFrame    int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BinDataVersionPush) Reset()      { *m = NSNB_BinDataVersionPush{} }
func (*NSNB_BinDataVersionPush) ProtoMessage() {}
func (*NSNB_BinDataVersionPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 6}
}
func (m *NSNB_BinDataVersionPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BinDataVersionPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BinDataVersionPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BinDataVersionPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BinDataVersionPush.Merge(m, src)
}
func (m *NSNB_BinDataVersionPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BinDataVersionPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BinDataVersionPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BinDataVersionPush proto.InternalMessageInfo

func (m *NSNB_BinDataVersionPush) GetBinDataVersion() int64 {
	if m != nil {
		return m.BinDataVersion
	}
	return 0
}

func (m *NSNB_BinDataVersionPush) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *NSNB_BinDataVersionPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BinDataVersionPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BinDataVersionPush"
}

type NSNB_PlayerPush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 公会名字
	SectName string `protobuf:"bytes,3,opt,name=sect_name,json=sectName,proto3" json:"sect_name,omitempty"`
	// 等级
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// 英雄信息
	Heroes []*models.HeroForBattle `protobuf:"bytes,5,rep,name=heroes,proto3" json:"heroes,omitempty"`
	// 当前正在使用哪个英雄
	HeroIndex int64 `protobuf:"varint,6,opt,name=hero_index,json=heroIndex,proto3" json:"hero_index,omitempty"`
	// 当前位置
	Pos *NSNB_Vec2 `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	// 当前朝向
	Towards       *NSNB_Vec2 `protobuf:"bytes,8,opt,name=towards,proto3" json:"towards,omitempty"`
	Speed         float32    `protobuf:"fixed32,9,opt,name=speed,proto3" json:"speed,omitempty"`
	CampId        int64      `protobuf:"varint,10,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	FriendCampIds []int64    `protobuf:"varint,11,rep,packed,name=friend_camp_ids,json=friendCampIds,proto3" json:"friend_camp_ids,omitempty"`
	Title         int64      `protobuf:"varint,12,opt,name=title,proto3" json:"title,omitempty"`
	AutoSoulSkill int64      `protobuf:"varint,13,opt,name=auto_soul_skill,json=autoSoulSkill,proto3" json:"auto_soul_skill,omitempty"`
	ServerFrame   int64      `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_PlayerPush) Reset()      { *m = NSNB_PlayerPush{} }
func (*NSNB_PlayerPush) ProtoMessage() {}
func (*NSNB_PlayerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 7}
}
func (m *NSNB_PlayerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_PlayerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_PlayerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_PlayerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_PlayerPush.Merge(m, src)
}
func (m *NSNB_PlayerPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_PlayerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_PlayerPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_PlayerPush proto.InternalMessageInfo

func (m *NSNB_PlayerPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_PlayerPush) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NSNB_PlayerPush) GetSectName() string {
	if m != nil {
		return m.SectName
	}
	return ""
}

func (m *NSNB_PlayerPush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NSNB_PlayerPush) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *NSNB_PlayerPush) GetHeroIndex() int64 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *NSNB_PlayerPush) GetPos() *NSNB_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NSNB_PlayerPush) GetTowards() *NSNB_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *NSNB_PlayerPush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *NSNB_PlayerPush) GetCampId() int64 {
	if m != nil {
		return m.CampId
	}
	return 0
}

func (m *NSNB_PlayerPush) GetFriendCampIds() []int64 {
	if m != nil {
		return m.FriendCampIds
	}
	return nil
}

func (m *NSNB_PlayerPush) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *NSNB_PlayerPush) GetAutoSoulSkill() int64 {
	if m != nil {
		return m.AutoSoulSkill
	}
	return 0
}

func (m *NSNB_PlayerPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_PlayerPush) XXX_MessageName() string {
	return "cppbattle.NSNB.PlayerPush"
}

type NSNB_MonsterPush struct {
	// 实例id
	ObjId     string                  `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Heroes    []*models.HeroForBattle `protobuf:"bytes,2,rep,name=heroes,proto3" json:"heroes,omitempty"`
	HeroIndex int64                   `protobuf:"varint,3,opt,name=hero_index,json=heroIndex,proto3" json:"hero_index,omitempty"`
	// 当前位置
	Pos *NSNB_Vec2 `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	// 当前朝向
	Towards       *NSNB_Vec2     `protobuf:"bytes,5,opt,name=towards,proto3" json:"towards,omitempty"`
	Speed         float32        `protobuf:"fixed32,6,opt,name=speed,proto3" json:"speed,omitempty"`
	ConfigId      int64          `protobuf:"varint,7,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	CampId        int64          `protobuf:"varint,8,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	FriendCampIds []int64        `protobuf:"varint,9,rep,packed,name=friend_camp_ids,json=friendCampIds,proto3" json:"friend_camp_ids,omitempty"`
	SummonedId    string         `protobuf:"bytes,10,opt,name=summoned_id,json=summonedId,proto3" json:"summoned_id,omitempty"`
	SummonedName  string         `protobuf:"bytes,11,opt,name=summoned_name,json=summonedName,proto3" json:"summoned_name,omitempty"`
	SummonedType  int64          `protobuf:"varint,12,opt,name=summoned_type,json=summonedType,proto3" json:"summoned_type,omitempty"`
	Level         int64          `protobuf:"varint,13,opt,name=level,proto3" json:"level,omitempty"`
	Buffs         *NSNB_BuffPush `protobuf:"bytes,14,opt,name=buffs,proto3" json:"buffs,omitempty"`
	ServerFrame   int64          `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_MonsterPush) Reset()      { *m = NSNB_MonsterPush{} }
func (*NSNB_MonsterPush) ProtoMessage() {}
func (*NSNB_MonsterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 8}
}
func (m *NSNB_MonsterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_MonsterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_MonsterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_MonsterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_MonsterPush.Merge(m, src)
}
func (m *NSNB_MonsterPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_MonsterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_MonsterPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_MonsterPush proto.InternalMessageInfo

func (m *NSNB_MonsterPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_MonsterPush) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *NSNB_MonsterPush) GetHeroIndex() int64 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *NSNB_MonsterPush) GetPos() *NSNB_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NSNB_MonsterPush) GetTowards() *NSNB_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *NSNB_MonsterPush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *NSNB_MonsterPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_MonsterPush) GetCampId() int64 {
	if m != nil {
		return m.CampId
	}
	return 0
}

func (m *NSNB_MonsterPush) GetFriendCampIds() []int64 {
	if m != nil {
		return m.FriendCampIds
	}
	return nil
}

func (m *NSNB_MonsterPush) GetSummonedId() string {
	if m != nil {
		return m.SummonedId
	}
	return ""
}

func (m *NSNB_MonsterPush) GetSummonedName() string {
	if m != nil {
		return m.SummonedName
	}
	return ""
}

func (m *NSNB_MonsterPush) GetSummonedType() int64 {
	if m != nil {
		return m.SummonedType
	}
	return 0
}

func (m *NSNB_MonsterPush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NSNB_MonsterPush) GetBuffs() *NSNB_BuffPush {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *NSNB_MonsterPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_MonsterPush) XXX_MessageName() string {
	return "cppbattle.NSNB.MonsterPush"
}

type NSNB_MoveOutPush struct {
	ObjId       []string `protobuf:"bytes,1,rep,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ServerFrame int64    `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_MoveOutPush) Reset()      { *m = NSNB_MoveOutPush{} }
func (*NSNB_MoveOutPush) ProtoMessage() {}
func (*NSNB_MoveOutPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 9}
}
func (m *NSNB_MoveOutPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_MoveOutPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_MoveOutPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_MoveOutPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_MoveOutPush.Merge(m, src)
}
func (m *NSNB_MoveOutPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_MoveOutPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_MoveOutPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_MoveOutPush proto.InternalMessageInfo

func (m *NSNB_MoveOutPush) GetObjId() []string {
	if m != nil {
		return m.ObjId
	}
	return nil
}

func (m *NSNB_MoveOutPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_MoveOutPush) XXX_MessageName() string {
	return "cppbattle.NSNB.MoveOutPush"
}

type NSNB_MoveSyncPush struct {
	ObjId       string     `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Speed       float32    `protobuf:"fixed32,2,opt,name=speed,proto3" json:"speed,omitempty"`
	MoveDir     *NSNB_Vec2 `protobuf:"bytes,3,opt,name=move_dir,json=moveDir,proto3" json:"move_dir,omitempty"`
	Towards     *NSNB_Vec2 `protobuf:"bytes,4,opt,name=towards,proto3" json:"towards,omitempty"`
	CurrPos     *NSNB_Vec2 `protobuf:"bytes,5,opt,name=curr_pos,json=currPos,proto3" json:"curr_pos,omitempty"`
	IsStop      bool       `protobuf:"varint,6,opt,name=is_stop,json=isStop,proto3" json:"is_stop,omitempty"`
	CustomSpeed float32    `protobuf:"fixed32,7,opt,name=custom_speed,json=customSpeed,proto3" json:"custom_speed,omitempty"`
	SpeedRate   float32    `protobuf:"fixed32,8,opt,name=speed_rate,json=speedRate,proto3" json:"speed_rate,omitempty"`
	MoveStatus  int64      `protobuf:"varint,9,opt,name=move_status,json=moveStatus,proto3" json:"move_status,omitempty"`
	ServerFrame int64      `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_MoveSyncPush) Reset()      { *m = NSNB_MoveSyncPush{} }
func (*NSNB_MoveSyncPush) ProtoMessage() {}
func (*NSNB_MoveSyncPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 10}
}
func (m *NSNB_MoveSyncPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_MoveSyncPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_MoveSyncPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_MoveSyncPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_MoveSyncPush.Merge(m, src)
}
func (m *NSNB_MoveSyncPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_MoveSyncPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_MoveSyncPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_MoveSyncPush proto.InternalMessageInfo

func (m *NSNB_MoveSyncPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_MoveSyncPush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *NSNB_MoveSyncPush) GetMoveDir() *NSNB_Vec2 {
	if m != nil {
		return m.MoveDir
	}
	return nil
}

func (m *NSNB_MoveSyncPush) GetTowards() *NSNB_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *NSNB_MoveSyncPush) GetCurrPos() *NSNB_Vec2 {
	if m != nil {
		return m.CurrPos
	}
	return nil
}

func (m *NSNB_MoveSyncPush) GetIsStop() bool {
	if m != nil {
		return m.IsStop
	}
	return false
}

func (m *NSNB_MoveSyncPush) GetCustomSpeed() float32 {
	if m != nil {
		return m.CustomSpeed
	}
	return 0
}

func (m *NSNB_MoveSyncPush) GetSpeedRate() float32 {
	if m != nil {
		return m.SpeedRate
	}
	return 0
}

func (m *NSNB_MoveSyncPush) GetMoveStatus() int64 {
	if m != nil {
		return m.MoveStatus
	}
	return 0
}

func (m *NSNB_MoveSyncPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_MoveSyncPush) XXX_MessageName() string {
	return "cppbattle.NSNB.MoveSyncPush"
}

type NSNB_ClientMoveRequest struct {
	Typ       int64      `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	DestOrDir *NSNB_Vec2 `protobuf:"bytes,2,opt,name=dest_or_dir,json=destOrDir,proto3" json:"dest_or_dir,omitempty"`
	IsManual  int64      `protobuf:"varint,3,opt,name=is_manual,json=isManual,proto3" json:"is_manual,omitempty"`
}

func (m *NSNB_ClientMoveRequest) Reset()      { *m = NSNB_ClientMoveRequest{} }
func (*NSNB_ClientMoveRequest) ProtoMessage() {}
func (*NSNB_ClientMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 11}
}
func (m *NSNB_ClientMoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ClientMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ClientMoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ClientMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ClientMoveRequest.Merge(m, src)
}
func (m *NSNB_ClientMoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ClientMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ClientMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ClientMoveRequest proto.InternalMessageInfo

func (m *NSNB_ClientMoveRequest) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *NSNB_ClientMoveRequest) GetDestOrDir() *NSNB_Vec2 {
	if m != nil {
		return m.DestOrDir
	}
	return nil
}

func (m *NSNB_ClientMoveRequest) GetIsManual() int64 {
	if m != nil {
		return m.IsManual
	}
	return 0
}

func (*NSNB_ClientMoveRequest) XXX_MessageName() string {
	return "cppbattle.NSNB.ClientMoveRequest"
}

type NSNB_BuffInfo struct {
	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ConfigId     int64  `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	RemainTime   int64  `protobuf:"varint,3,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	OverlayCount int64  `protobuf:"varint,4,opt,name=overlay_count,json=overlayCount,proto3" json:"overlay_count,omitempty"`
	CasterId     string `protobuf:"bytes,5,opt,name=caster_id,json=casterId,proto3" json:"caster_id,omitempty"`
}

func (m *NSNB_BuffInfo) Reset()      { *m = NSNB_BuffInfo{} }
func (*NSNB_BuffInfo) ProtoMessage() {}
func (*NSNB_BuffInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 12}
}
func (m *NSNB_BuffInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BuffInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BuffInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BuffInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BuffInfo.Merge(m, src)
}
func (m *NSNB_BuffInfo) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BuffInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BuffInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BuffInfo proto.InternalMessageInfo

func (m *NSNB_BuffInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NSNB_BuffInfo) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_BuffInfo) GetRemainTime() int64 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *NSNB_BuffInfo) GetOverlayCount() int64 {
	if m != nil {
		return m.OverlayCount
	}
	return 0
}

func (m *NSNB_BuffInfo) GetCasterId() string {
	if m != nil {
		return m.CasterId
	}
	return ""
}

func (*NSNB_BuffInfo) XXX_MessageName() string {
	return "cppbattle.NSNB.BuffInfo"
}

type NSNB_AttrValues struct {
	FixValue     int64 `protobuf:"varint,1,opt,name=fix_value,json=fixValue,proto3" json:"fix_value,omitempty"`
	PercentValue int64 `protobuf:"varint,2,opt,name=percent_value,json=percentValue,proto3" json:"percent_value,omitempty"`
}

func (m *NSNB_AttrValues) Reset()      { *m = NSNB_AttrValues{} }
func (*NSNB_AttrValues) ProtoMessage() {}
func (*NSNB_AttrValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 13}
}
func (m *NSNB_AttrValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_AttrValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_AttrValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_AttrValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_AttrValues.Merge(m, src)
}
func (m *NSNB_AttrValues) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_AttrValues) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_AttrValues.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_AttrValues proto.InternalMessageInfo

func (m *NSNB_AttrValues) GetFixValue() int64 {
	if m != nil {
		return m.FixValue
	}
	return 0
}

func (m *NSNB_AttrValues) GetPercentValue() int64 {
	if m != nil {
		return m.PercentValue
	}
	return 0
}

func (*NSNB_AttrValues) XXX_MessageName() string {
	return "cppbattle.NSNB.AttrValues"
}

type NSNB_BuffPush struct {
	// buff拥有者
	ObjectId     string                     `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Buffs        map[int64]*NSNB_BuffInfo   `protobuf:"bytes,2,rep,name=buffs,proto3" json:"buffs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HeroConfigId int64                      `protobuf:"varint,3,opt,name=hero_config_id,json=heroConfigId,proto3" json:"hero_config_id,omitempty"`
	BuffAttrs    map[int64]*NSNB_AttrValues `protobuf:"bytes,4,rep,name=buff_attrs,json=buffAttrs,proto3" json:"buff_attrs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServerFrame  int64                      `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BuffPush) Reset()      { *m = NSNB_BuffPush{} }
func (*NSNB_BuffPush) ProtoMessage() {}
func (*NSNB_BuffPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 14}
}
func (m *NSNB_BuffPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BuffPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BuffPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BuffPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BuffPush.Merge(m, src)
}
func (m *NSNB_BuffPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BuffPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BuffPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BuffPush proto.InternalMessageInfo

func (m *NSNB_BuffPush) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *NSNB_BuffPush) GetBuffs() map[int64]*NSNB_BuffInfo {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *NSNB_BuffPush) GetHeroConfigId() int64 {
	if m != nil {
		return m.HeroConfigId
	}
	return 0
}

func (m *NSNB_BuffPush) GetBuffAttrs() map[int64]*NSNB_AttrValues {
	if m != nil {
		return m.BuffAttrs
	}
	return nil
}

func (m *NSNB_BuffPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BuffPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BuffPush"
}

type NSNB_BuffFlyDescPush struct {
	ObjId       string  `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Buffs       []int64 `protobuf:"varint,2,rep,packed,name=buffs,proto3" json:"buffs,omitempty"`
	ServerFrame int64   `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BuffFlyDescPush) Reset()      { *m = NSNB_BuffFlyDescPush{} }
func (*NSNB_BuffFlyDescPush) ProtoMessage() {}
func (*NSNB_BuffFlyDescPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 15}
}
func (m *NSNB_BuffFlyDescPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BuffFlyDescPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BuffFlyDescPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BuffFlyDescPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BuffFlyDescPush.Merge(m, src)
}
func (m *NSNB_BuffFlyDescPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BuffFlyDescPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BuffFlyDescPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BuffFlyDescPush proto.InternalMessageInfo

func (m *NSNB_BuffFlyDescPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_BuffFlyDescPush) GetBuffs() []int64 {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *NSNB_BuffFlyDescPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BuffFlyDescPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BuffFlyDescPush"
}

type NSNB_BuffTracingBulletPush struct {
	ConfigId    int64  `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	CasterId    string `protobuf:"bytes,2,opt,name=caster_id,json=casterId,proto3" json:"caster_id,omitempty"`
	OwnerId     string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	BulletId    string `protobuf:"bytes,4,opt,name=bullet_id,json=bulletId,proto3" json:"bullet_id,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BuffTracingBulletPush) Reset()      { *m = NSNB_BuffTracingBulletPush{} }
func (*NSNB_BuffTracingBulletPush) ProtoMessage() {}
func (*NSNB_BuffTracingBulletPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 16}
}
func (m *NSNB_BuffTracingBulletPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BuffTracingBulletPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BuffTracingBulletPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BuffTracingBulletPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BuffTracingBulletPush.Merge(m, src)
}
func (m *NSNB_BuffTracingBulletPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BuffTracingBulletPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BuffTracingBulletPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BuffTracingBulletPush proto.InternalMessageInfo

func (m *NSNB_BuffTracingBulletPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_BuffTracingBulletPush) GetCasterId() string {
	if m != nil {
		return m.CasterId
	}
	return ""
}

func (m *NSNB_BuffTracingBulletPush) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *NSNB_BuffTracingBulletPush) GetBulletId() string {
	if m != nil {
		return m.BulletId
	}
	return ""
}

func (m *NSNB_BuffTracingBulletPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BuffTracingBulletPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BuffTracingBulletPush"
}

type NSNB_ClientAttack struct {
	// 攻击方Id
	AttackerId string `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 防御方Id
	DefenderId     string `protobuf:"bytes,2,opt,name=defender_id,json=defenderId,proto3" json:"defender_id,omitempty"`
	AttackerHeroId int64  `protobuf:"varint,3,opt,name=attacker_hero_id,json=attackerHeroId,proto3" json:"attacker_hero_id,omitempty"`
	SkillId        int64  `protobuf:"varint,4,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	ServerFrame    int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_ClientAttack) Reset()      { *m = NSNB_ClientAttack{} }
func (*NSNB_ClientAttack) ProtoMessage() {}
func (*NSNB_ClientAttack) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 17}
}
func (m *NSNB_ClientAttack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ClientAttack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ClientAttack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ClientAttack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ClientAttack.Merge(m, src)
}
func (m *NSNB_ClientAttack) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ClientAttack) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ClientAttack.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ClientAttack proto.InternalMessageInfo

func (m *NSNB_ClientAttack) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *NSNB_ClientAttack) GetDefenderId() string {
	if m != nil {
		return m.DefenderId
	}
	return ""
}

func (m *NSNB_ClientAttack) GetAttackerHeroId() int64 {
	if m != nil {
		return m.AttackerHeroId
	}
	return 0
}

func (m *NSNB_ClientAttack) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NSNB_ClientAttack) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_ClientAttack) XXX_MessageName() string {
	return "cppbattle.NSNB.ClientAttack"
}

type NSNB_SkillPush struct {
	// 攻击方Id
	AttackerId string `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 防御方Id
	DefenderId string `protobuf:"bytes,2,opt,name=defender_id,json=defenderId,proto3" json:"defender_id,omitempty"`
	// 技能id
	SkillId        int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillViewIndex int64 `protobuf:"varint,4,opt,name=skill_view_index,json=skillViewIndex,proto3" json:"skill_view_index,omitempty"`
	AttackerHeroId int64 `protobuf:"varint,5,opt,name=attacker_hero_id,json=attackerHeroId,proto3" json:"attacker_hero_id,omitempty"`
	SkillSeq       int64 `protobuf:"varint,6,opt,name=skill_seq,json=skillSeq,proto3" json:"skill_seq,omitempty"`
	SkillSpeed     int64 `protobuf:"varint,7,opt,name=skill_speed,json=skillSpeed,proto3" json:"skill_speed,omitempty"`
	SkillCd        int64 `protobuf:"varint,8,opt,name=skill_cd,json=skillCd,proto3" json:"skill_cd,omitempty"`
	ServerFrame    int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_SkillPush) Reset()      { *m = NSNB_SkillPush{} }
func (*NSNB_SkillPush) ProtoMessage() {}
func (*NSNB_SkillPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 18}
}
func (m *NSNB_SkillPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SkillPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SkillPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SkillPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SkillPush.Merge(m, src)
}
func (m *NSNB_SkillPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SkillPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SkillPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SkillPush proto.InternalMessageInfo

func (m *NSNB_SkillPush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *NSNB_SkillPush) GetDefenderId() string {
	if m != nil {
		return m.DefenderId
	}
	return ""
}

func (m *NSNB_SkillPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NSNB_SkillPush) GetSkillViewIndex() int64 {
	if m != nil {
		return m.SkillViewIndex
	}
	return 0
}

func (m *NSNB_SkillPush) GetAttackerHeroId() int64 {
	if m != nil {
		return m.AttackerHeroId
	}
	return 0
}

func (m *NSNB_SkillPush) GetSkillSeq() int64 {
	if m != nil {
		return m.SkillSeq
	}
	return 0
}

func (m *NSNB_SkillPush) GetSkillSpeed() int64 {
	if m != nil {
		return m.SkillSpeed
	}
	return 0
}

func (m *NSNB_SkillPush) GetSkillCd() int64 {
	if m != nil {
		return m.SkillCd
	}
	return 0
}

func (m *NSNB_SkillPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_SkillPush) XXX_MessageName() string {
	return "cppbattle.NSNB.SkillPush"
}

type NSNB_DamagePush struct {
	// 攻击方Id
	AttackerId string `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 防御方Id
	DefenderId string `protobuf:"bytes,2,opt,name=defender_id,json=defenderId,proto3" json:"defender_id,omitempty"`
	// 技能id
	SkillId int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	// 技能view索引
	SkillViewIndex int64 `protobuf:"varint,4,opt,name=skill_view_index,json=skillViewIndex,proto3" json:"skill_view_index,omitempty"`
	// 技能索引
	SkillIndex int64 `protobuf:"varint,5,opt,name=skill_index,json=skillIndex,proto3" json:"skill_index,omitempty"`
	// 伤害
	Damage int64 `protobuf:"varint,6,opt,name=damage,proto3" json:"damage,omitempty"`
	// 只带需要用到的属性(当前血量、魔量)
	Attr        map[int64]int64 `protobuf:"bytes,7,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DamageColor int64           `protobuf:"varint,8,opt,name=damage_color,json=damageColor,proto3" json:"damage_color,omitempty"`
	IsDodge     bool            `protobuf:"varint,9,opt,name=is_dodge,json=isDodge,proto3" json:"is_dodge,omitempty"`
	IsParry     bool            `protobuf:"varint,10,opt,name=is_parry,json=isParry,proto3" json:"is_parry,omitempty"`
	// 攻击方configId
	AttackerConfigId int64 `protobuf:"varint,11,opt,name=attacker_config_id,json=attackerConfigId,proto3" json:"attacker_config_id,omitempty"`
	// 防御方configId
	DefenderConfigId int64 `protobuf:"varint,12,opt,name=defender_config_id,json=defenderConfigId,proto3" json:"defender_config_id,omitempty"`
	//是否反弹
	IsReflect   bool  `protobuf:"varint,13,opt,name=is_reflect,json=isReflect,proto3" json:"is_reflect,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_DamagePush) Reset()      { *m = NSNB_DamagePush{} }
func (*NSNB_DamagePush) ProtoMessage() {}
func (*NSNB_DamagePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 19}
}
func (m *NSNB_DamagePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_DamagePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_DamagePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_DamagePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_DamagePush.Merge(m, src)
}
func (m *NSNB_DamagePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_DamagePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_DamagePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_DamagePush proto.InternalMessageInfo

func (m *NSNB_DamagePush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *NSNB_DamagePush) GetDefenderId() string {
	if m != nil {
		return m.DefenderId
	}
	return ""
}

func (m *NSNB_DamagePush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NSNB_DamagePush) GetSkillViewIndex() int64 {
	if m != nil {
		return m.SkillViewIndex
	}
	return 0
}

func (m *NSNB_DamagePush) GetSkillIndex() int64 {
	if m != nil {
		return m.SkillIndex
	}
	return 0
}

func (m *NSNB_DamagePush) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *NSNB_DamagePush) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *NSNB_DamagePush) GetDamageColor() int64 {
	if m != nil {
		return m.DamageColor
	}
	return 0
}

func (m *NSNB_DamagePush) GetIsDodge() bool {
	if m != nil {
		return m.IsDodge
	}
	return false
}

func (m *NSNB_DamagePush) GetIsParry() bool {
	if m != nil {
		return m.IsParry
	}
	return false
}

func (m *NSNB_DamagePush) GetAttackerConfigId() int64 {
	if m != nil {
		return m.AttackerConfigId
	}
	return 0
}

func (m *NSNB_DamagePush) GetDefenderConfigId() int64 {
	if m != nil {
		return m.DefenderConfigId
	}
	return 0
}

func (m *NSNB_DamagePush) GetIsReflect() bool {
	if m != nil {
		return m.IsReflect
	}
	return false
}

func (m *NSNB_DamagePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_DamagePush) XXX_MessageName() string {
	return "cppbattle.NSNB.DamagePush"
}

type NSNB_BuffValuePush struct {
	OwnerId        string          `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CasterId       string          `protobuf:"bytes,2,opt,name=caster_id,json=casterId,proto3" json:"caster_id,omitempty"`
	Value          int64           `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	ValueType      int64           `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	Attr           map[int64]int64 `protobuf:"bytes,5,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DamageColor    int64           `protobuf:"varint,6,opt,name=damage_color,json=damageColor,proto3" json:"damage_color,omitempty"`
	IsDodge        bool            `protobuf:"varint,7,opt,name=is_dodge,json=isDodge,proto3" json:"is_dodge,omitempty"`
	IsParry        bool            `protobuf:"varint,8,opt,name=is_parry,json=isParry,proto3" json:"is_parry,omitempty"`
	CasterConfigId int64           `protobuf:"varint,9,opt,name=caster_config_id,json=casterConfigId,proto3" json:"caster_config_id,omitempty"`
	OwnerConfigId  int64           `protobuf:"varint,10,opt,name=owner_config_id,json=ownerConfigId,proto3" json:"owner_config_id,omitempty"`
	AddType        bool            `protobuf:"varint,11,opt,name=add_type,json=addType,proto3" json:"add_type,omitempty"`
	ServerFrame    int64           `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BuffValuePush) Reset()      { *m = NSNB_BuffValuePush{} }
func (*NSNB_BuffValuePush) ProtoMessage() {}
func (*NSNB_BuffValuePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 20}
}
func (m *NSNB_BuffValuePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BuffValuePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BuffValuePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BuffValuePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BuffValuePush.Merge(m, src)
}
func (m *NSNB_BuffValuePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BuffValuePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BuffValuePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BuffValuePush proto.InternalMessageInfo

func (m *NSNB_BuffValuePush) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *NSNB_BuffValuePush) GetCasterId() string {
	if m != nil {
		return m.CasterId
	}
	return ""
}

func (m *NSNB_BuffValuePush) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NSNB_BuffValuePush) GetValueType() int64 {
	if m != nil {
		return m.ValueType
	}
	return 0
}

func (m *NSNB_BuffValuePush) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *NSNB_BuffValuePush) GetDamageColor() int64 {
	if m != nil {
		return m.DamageColor
	}
	return 0
}

func (m *NSNB_BuffValuePush) GetIsDodge() bool {
	if m != nil {
		return m.IsDodge
	}
	return false
}

func (m *NSNB_BuffValuePush) GetIsParry() bool {
	if m != nil {
		return m.IsParry
	}
	return false
}

func (m *NSNB_BuffValuePush) GetCasterConfigId() int64 {
	if m != nil {
		return m.CasterConfigId
	}
	return 0
}

func (m *NSNB_BuffValuePush) GetOwnerConfigId() int64 {
	if m != nil {
		return m.OwnerConfigId
	}
	return 0
}

func (m *NSNB_BuffValuePush) GetAddType() bool {
	if m != nil {
		return m.AddType
	}
	return false
}

func (m *NSNB_BuffValuePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BuffValuePush) XXX_MessageName() string {
	return "cppbattle.NSNB.BuffValuePush"
}

type NSNB_DeadPush struct {
	// 攻击方Id
	AttackerId string `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 死亡方Id
	DeadId string `protobuf:"bytes,2,opt,name=dead_id,json=deadId,proto3" json:"dead_id,omitempty"`
	// 技能id
	SkillId int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	// 技能view索引
	SkillViewIndex int64 `protobuf:"varint,4,opt,name=skill_view_index,json=skillViewIndex,proto3" json:"skill_view_index,omitempty"`
	// 技能索引
	SkillIndex int64 `protobuf:"varint,5,opt,name=skill_index,json=skillIndex,proto3" json:"skill_index,omitempty"`
	// 伤害
	Damage int64 `protobuf:"varint,6,opt,name=damage,proto3" json:"damage,omitempty"`
	// 掉落
	Drop []*models.Item `protobuf:"bytes,7,rep,name=drop,proto3" json:"drop,omitempty"`
	// 攻击方configId
	AttackerConfigId int64 `protobuf:"varint,8,opt,name=attacker_config_id,json=attackerConfigId,proto3" json:"attacker_config_id,omitempty"`
	// 死亡方configId
	DefenderConfigId int64 `protobuf:"varint,9,opt,name=defender_config_id,json=defenderConfigId,proto3" json:"defender_config_id,omitempty"`
	// 原地复活花费
	ReviveCost int64 `protobuf:"varint,10,opt,name=revive_cost,json=reviveCost,proto3" json:"revive_cost,omitempty"`
	// 就近复活等待时间
	ReviveTime  int64 `protobuf:"varint,11,opt,name=revive_time,json=reviveTime,proto3" json:"revive_time,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_DeadPush) Reset()      { *m = NSNB_DeadPush{} }
func (*NSNB_DeadPush) ProtoMessage() {}
func (*NSNB_DeadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 21}
}
func (m *NSNB_DeadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_DeadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_DeadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_DeadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_DeadPush.Merge(m, src)
}
func (m *NSNB_DeadPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_DeadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_DeadPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_DeadPush proto.InternalMessageInfo

func (m *NSNB_DeadPush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *NSNB_DeadPush) GetDeadId() string {
	if m != nil {
		return m.DeadId
	}
	return ""
}

func (m *NSNB_DeadPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NSNB_DeadPush) GetSkillViewIndex() int64 {
	if m != nil {
		return m.SkillViewIndex
	}
	return 0
}

func (m *NSNB_DeadPush) GetSkillIndex() int64 {
	if m != nil {
		return m.SkillIndex
	}
	return 0
}

func (m *NSNB_DeadPush) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *NSNB_DeadPush) GetDrop() []*models.Item {
	if m != nil {
		return m.Drop
	}
	return nil
}

func (m *NSNB_DeadPush) GetAttackerConfigId() int64 {
	if m != nil {
		return m.AttackerConfigId
	}
	return 0
}

func (m *NSNB_DeadPush) GetDefenderConfigId() int64 {
	if m != nil {
		return m.DefenderConfigId
	}
	return 0
}

func (m *NSNB_DeadPush) GetReviveCost() int64 {
	if m != nil {
		return m.ReviveCost
	}
	return 0
}

func (m *NSNB_DeadPush) GetReviveTime() int64 {
	if m != nil {
		return m.ReviveTime
	}
	return 0
}

func (m *NSNB_DeadPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_DeadPush) XXX_MessageName() string {
	return "cppbattle.NSNB.DeadPush"
}

// 用于重新上线时玩家时死亡状态，服务器对客户端的通知
type NSNB_DeadNotifyPush struct {
	// 死亡方Id
	DeadId string `protobuf:"bytes,1,opt,name=dead_id,json=deadId,proto3" json:"dead_id,omitempty"`
	// 死亡方configId
	DefenderConfigId int64 `protobuf:"varint,2,opt,name=defender_config_id,json=defenderConfigId,proto3" json:"defender_config_id,omitempty"`
	// 原地复活花费
	ReviveCost int64 `protobuf:"varint,3,opt,name=revive_cost,json=reviveCost,proto3" json:"revive_cost,omitempty"`
	// 就近复活等待时间
	ReviveTime  int64 `protobuf:"varint,4,opt,name=revive_time,json=reviveTime,proto3" json:"revive_time,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_DeadNotifyPush) Reset()      { *m = NSNB_DeadNotifyPush{} }
func (*NSNB_DeadNotifyPush) ProtoMessage() {}
func (*NSNB_DeadNotifyPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 22}
}
func (m *NSNB_DeadNotifyPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_DeadNotifyPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_DeadNotifyPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_DeadNotifyPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_DeadNotifyPush.Merge(m, src)
}
func (m *NSNB_DeadNotifyPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_DeadNotifyPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_DeadNotifyPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_DeadNotifyPush proto.InternalMessageInfo

func (m *NSNB_DeadNotifyPush) GetDeadId() string {
	if m != nil {
		return m.DeadId
	}
	return ""
}

func (m *NSNB_DeadNotifyPush) GetDefenderConfigId() int64 {
	if m != nil {
		return m.DefenderConfigId
	}
	return 0
}

func (m *NSNB_DeadNotifyPush) GetReviveCost() int64 {
	if m != nil {
		return m.ReviveCost
	}
	return 0
}

func (m *NSNB_DeadNotifyPush) GetReviveTime() int64 {
	if m != nil {
		return m.ReviveTime
	}
	return 0
}

func (m *NSNB_DeadNotifyPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_DeadNotifyPush) XXX_MessageName() string {
	return "cppbattle.NSNB.DeadNotifyPush"
}

type NSNB_PosChange struct {
	ObjId   string     `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Pos     *NSNB_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards *NSNB_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
}

func (m *NSNB_PosChange) Reset()      { *m = NSNB_PosChange{} }
func (*NSNB_PosChange) ProtoMessage() {}
func (*NSNB_PosChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 23}
}
func (m *NSNB_PosChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_PosChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_PosChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_PosChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_PosChange.Merge(m, src)
}
func (m *NSNB_PosChange) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_PosChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_PosChange.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_PosChange proto.InternalMessageInfo

func (m *NSNB_PosChange) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_PosChange) GetPos() *NSNB_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NSNB_PosChange) GetTowards() *NSNB_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (*NSNB_PosChange) XXX_MessageName() string {
	return "cppbattle.NSNB.PosChange"
}

type NSNB_TransFormNotice struct {
	ObjId       string     `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Pos         *NSNB_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards     *NSNB_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
	ServerFrame int64      `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_TransFormNotice) Reset()      { *m = NSNB_TransFormNotice{} }
func (*NSNB_TransFormNotice) ProtoMessage() {}
func (*NSNB_TransFormNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 24}
}
func (m *NSNB_TransFormNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_TransFormNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_TransFormNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_TransFormNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_TransFormNotice.Merge(m, src)
}
func (m *NSNB_TransFormNotice) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_TransFormNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_TransFormNotice.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_TransFormNotice proto.InternalMessageInfo

func (m *NSNB_TransFormNotice) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_TransFormNotice) GetPos() *NSNB_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NSNB_TransFormNotice) GetTowards() *NSNB_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *NSNB_TransFormNotice) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_TransFormNotice) XXX_MessageName() string {
	return "cppbattle.NSNB.TransFormNotice"
}

// 创建空气墙推送
type NSNB_CreateAirWallPush struct {
	AirWallId   int64 `protobuf:"varint,1,opt,name=air_wall_id,json=airWallId,proto3" json:"air_wall_id,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_CreateAirWallPush) Reset()      { *m = NSNB_CreateAirWallPush{} }
func (*NSNB_CreateAirWallPush) ProtoMessage() {}
func (*NSNB_CreateAirWallPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 25}
}
func (m *NSNB_CreateAirWallPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_CreateAirWallPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_CreateAirWallPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_CreateAirWallPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_CreateAirWallPush.Merge(m, src)
}
func (m *NSNB_CreateAirWallPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_CreateAirWallPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_CreateAirWallPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_CreateAirWallPush proto.InternalMessageInfo

func (m *NSNB_CreateAirWallPush) GetAirWallId() int64 {
	if m != nil {
		return m.AirWallId
	}
	return 0
}

func (m *NSNB_CreateAirWallPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_CreateAirWallPush) XXX_MessageName() string {
	return "cppbattle.NSNB.CreateAirWallPush"
}

// 销毁空气墙推送
type NSNB_DestroyAirWallPush struct {
	AirWallId   int64 `protobuf:"varint,1,opt,name=air_wall_id,json=airWallId,proto3" json:"air_wall_id,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_DestroyAirWallPush) Reset()      { *m = NSNB_DestroyAirWallPush{} }
func (*NSNB_DestroyAirWallPush) ProtoMessage() {}
func (*NSNB_DestroyAirWallPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 26}
}
func (m *NSNB_DestroyAirWallPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_DestroyAirWallPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_DestroyAirWallPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_DestroyAirWallPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_DestroyAirWallPush.Merge(m, src)
}
func (m *NSNB_DestroyAirWallPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_DestroyAirWallPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_DestroyAirWallPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_DestroyAirWallPush proto.InternalMessageInfo

func (m *NSNB_DestroyAirWallPush) GetAirWallId() int64 {
	if m != nil {
		return m.AirWallId
	}
	return 0
}

func (m *NSNB_DestroyAirWallPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_DestroyAirWallPush) XXX_MessageName() string {
	return "cppbattle.NSNB.DestroyAirWallPush"
}

// 当前空气墙推送
type NSNB_CurAirWallPush struct {
	AirWalls    map[int64]int64 `protobuf:"bytes,1,rep,name=air_walls,json=airWalls,proto3" json:"air_walls,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ServerFrame int64           `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_CurAirWallPush) Reset()      { *m = NSNB_CurAirWallPush{} }
func (*NSNB_CurAirWallPush) ProtoMessage() {}
func (*NSNB_CurAirWallPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 27}
}
func (m *NSNB_CurAirWallPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_CurAirWallPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_CurAirWallPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_CurAirWallPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_CurAirWallPush.Merge(m, src)
}
func (m *NSNB_CurAirWallPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_CurAirWallPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_CurAirWallPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_CurAirWallPush proto.InternalMessageInfo

func (m *NSNB_CurAirWallPush) GetAirWalls() map[int64]int64 {
	if m != nil {
		return m.AirWalls
	}
	return nil
}

func (m *NSNB_CurAirWallPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_CurAirWallPush) XXX_MessageName() string {
	return "cppbattle.NSNB.CurAirWallPush"
}

type NSNB_RevivePush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 复活类型
	ReviveTyp ReviveTyp `protobuf:"varint,2,opt,name=revive_typ,json=reviveTyp,proto3,enum=cppbattle.ReviveTyp" json:"revive_typ,omitempty"`
	// 如果不是复活到原地，则有目标复活点坐标
	Pos         *NSNB_Vec2 `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	ServerFrame int64      `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_RevivePush) Reset()      { *m = NSNB_RevivePush{} }
func (*NSNB_RevivePush) ProtoMessage() {}
func (*NSNB_RevivePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 28}
}
func (m *NSNB_RevivePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_RevivePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_RevivePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_RevivePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_RevivePush.Merge(m, src)
}
func (m *NSNB_RevivePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_RevivePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_RevivePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_RevivePush proto.InternalMessageInfo

func (m *NSNB_RevivePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_RevivePush) GetReviveTyp() ReviveTyp {
	if m != nil {
		return m.ReviveTyp
	}
	return ReviveTyp_ReviveTypStay
}

func (m *NSNB_RevivePush) GetPos() *NSNB_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NSNB_RevivePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_RevivePush) XXX_MessageName() string {
	return "cppbattle.NSNB.RevivePush"
}

type NSNB_QueryDeadPush struct {
	DeadId string `protobuf:"bytes,1,opt,name=dead_id,json=deadId,proto3" json:"dead_id,omitempty"`
	// 原地复活花费
	ReviveCost int64 `protobuf:"varint,2,opt,name=revive_cost,json=reviveCost,proto3" json:"revive_cost,omitempty"`
	// 就近复活等待时间
	ReviveTime  int64 `protobuf:"varint,3,opt,name=revive_time,json=reviveTime,proto3" json:"revive_time,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_QueryDeadPush) Reset()      { *m = NSNB_QueryDeadPush{} }
func (*NSNB_QueryDeadPush) ProtoMessage() {}
func (*NSNB_QueryDeadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 29}
}
func (m *NSNB_QueryDeadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_QueryDeadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_QueryDeadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_QueryDeadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_QueryDeadPush.Merge(m, src)
}
func (m *NSNB_QueryDeadPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_QueryDeadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_QueryDeadPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_QueryDeadPush proto.InternalMessageInfo

func (m *NSNB_QueryDeadPush) GetDeadId() string {
	if m != nil {
		return m.DeadId
	}
	return ""
}

func (m *NSNB_QueryDeadPush) GetReviveCost() int64 {
	if m != nil {
		return m.ReviveCost
	}
	return 0
}

func (m *NSNB_QueryDeadPush) GetReviveTime() int64 {
	if m != nil {
		return m.ReviveTime
	}
	return 0
}

func (m *NSNB_QueryDeadPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_QueryDeadPush) XXX_MessageName() string {
	return "cppbattle.NSNB.QueryDeadPush"
}

type NSNB_TransFormRequest struct {
	ObjId   string     `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Pos     *NSNB_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards *NSNB_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
}

func (m *NSNB_TransFormRequest) Reset()      { *m = NSNB_TransFormRequest{} }
func (*NSNB_TransFormRequest) ProtoMessage() {}
func (*NSNB_TransFormRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 30}
}
func (m *NSNB_TransFormRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_TransFormRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_TransFormRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_TransFormRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_TransFormRequest.Merge(m, src)
}
func (m *NSNB_TransFormRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_TransFormRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_TransFormRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_TransFormRequest proto.InternalMessageInfo

func (m *NSNB_TransFormRequest) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_TransFormRequest) GetPos() *NSNB_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NSNB_TransFormRequest) GetTowards() *NSNB_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (*NSNB_TransFormRequest) XXX_MessageName() string {
	return "cppbattle.NSNB.TransFormRequest"
}

type NSNB_ChangeHero struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	// hero表配置id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (m *NSNB_ChangeHero) Reset()      { *m = NSNB_ChangeHero{} }
func (*NSNB_ChangeHero) ProtoMessage() {}
func (*NSNB_ChangeHero) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 31}
}
func (m *NSNB_ChangeHero) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ChangeHero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ChangeHero.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ChangeHero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ChangeHero.Merge(m, src)
}
func (m *NSNB_ChangeHero) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ChangeHero) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ChangeHero.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ChangeHero proto.InternalMessageInfo

func (m *NSNB_ChangeHero) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NSNB_ChangeHero) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (*NSNB_ChangeHero) XXX_MessageName() string {
	return "cppbattle.NSNB.ChangeHero"
}

type NSNB_ChangeHeroPush struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	// hero表配置id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// hero属性(hp mp 等)
	Attr        map[int64]int64 `protobuf:"bytes,3,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Equip       map[int64]int64 `protobuf:"bytes,4,rep,name=equip,proto3" json:"equip,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RoleId      string          `protobuf:"bytes,5,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ServerFrame int64           `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_ChangeHeroPush) Reset()      { *m = NSNB_ChangeHeroPush{} }
func (*NSNB_ChangeHeroPush) ProtoMessage() {}
func (*NSNB_ChangeHeroPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 32}
}
func (m *NSNB_ChangeHeroPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ChangeHeroPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ChangeHeroPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ChangeHeroPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ChangeHeroPush.Merge(m, src)
}
func (m *NSNB_ChangeHeroPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ChangeHeroPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ChangeHeroPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ChangeHeroPush proto.InternalMessageInfo

func (m *NSNB_ChangeHeroPush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NSNB_ChangeHeroPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_ChangeHeroPush) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *NSNB_ChangeHeroPush) GetEquip() map[int64]int64 {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (m *NSNB_ChangeHeroPush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_ChangeHeroPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_ChangeHeroPush) XXX_MessageName() string {
	return "cppbattle.NSNB.ChangeHeroPush"
}

type NSNB_ChangeHeroSelfPush struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	RemainCd       int64 `protobuf:"varint,2,opt,name=remain_cd,json=remainCd,proto3" json:"remain_cd,omitempty"`
	// hero表配置id
	ConfigId    int64 `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Directly    int64 `protobuf:"varint,4,opt,name=directly,proto3" json:"directly,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_ChangeHeroSelfPush) Reset()      { *m = NSNB_ChangeHeroSelfPush{} }
func (*NSNB_ChangeHeroSelfPush) ProtoMessage() {}
func (*NSNB_ChangeHeroSelfPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 33}
}
func (m *NSNB_ChangeHeroSelfPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ChangeHeroSelfPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ChangeHeroSelfPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ChangeHeroSelfPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ChangeHeroSelfPush.Merge(m, src)
}
func (m *NSNB_ChangeHeroSelfPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ChangeHeroSelfPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ChangeHeroSelfPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ChangeHeroSelfPush proto.InternalMessageInfo

func (m *NSNB_ChangeHeroSelfPush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NSNB_ChangeHeroSelfPush) GetRemainCd() int64 {
	if m != nil {
		return m.RemainCd
	}
	return 0
}

func (m *NSNB_ChangeHeroSelfPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_ChangeHeroSelfPush) GetDirectly() int64 {
	if m != nil {
		return m.Directly
	}
	return 0
}

func (m *NSNB_ChangeHeroSelfPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_ChangeHeroSelfPush) XXX_MessageName() string {
	return "cppbattle.NSNB.ChangeHeroSelfPush"
}

type NSNB_ReviveHeroPush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// config_id
	ConfigId    int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_ReviveHeroPush) Reset()      { *m = NSNB_ReviveHeroPush{} }
func (*NSNB_ReviveHeroPush) ProtoMessage() {}
func (*NSNB_ReviveHeroPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 34}
}
func (m *NSNB_ReviveHeroPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ReviveHeroPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ReviveHeroPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ReviveHeroPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ReviveHeroPush.Merge(m, src)
}
func (m *NSNB_ReviveHeroPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ReviveHeroPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ReviveHeroPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ReviveHeroPush proto.InternalMessageInfo

func (m *NSNB_ReviveHeroPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_ReviveHeroPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_ReviveHeroPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_ReviveHeroPush) XXX_MessageName() string {
	return "cppbattle.NSNB.ReviveHeroPush"
}

type NSNB_ExitBattle struct {
}

func (m *NSNB_ExitBattle) Reset()      { *m = NSNB_ExitBattle{} }
func (*NSNB_ExitBattle) ProtoMessage() {}
func (*NSNB_ExitBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 35}
}
func (m *NSNB_ExitBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ExitBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ExitBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ExitBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ExitBattle.Merge(m, src)
}
func (m *NSNB_ExitBattle) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ExitBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ExitBattle.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ExitBattle proto.InternalMessageInfo

func (*NSNB_ExitBattle) XXX_MessageName() string {
	return "cppbattle.NSNB.ExitBattle"
}

type NSNB_ExitBattlePush struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_ExitBattlePush) Reset()      { *m = NSNB_ExitBattlePush{} }
func (*NSNB_ExitBattlePush) ProtoMessage() {}
func (*NSNB_ExitBattlePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 36}
}
func (m *NSNB_ExitBattlePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ExitBattlePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ExitBattlePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ExitBattlePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ExitBattlePush.Merge(m, src)
}
func (m *NSNB_ExitBattlePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ExitBattlePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ExitBattlePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ExitBattlePush proto.InternalMessageInfo

func (m *NSNB_ExitBattlePush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_ExitBattlePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_ExitBattlePush) XXX_MessageName() string {
	return "cppbattle.NSNB.ExitBattlePush"
}

type NSNB_AIStatus struct {
	IsAi        bool  `protobuf:"varint,1,opt,name=is_ai,json=isAi,proto3" json:"is_ai,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_AIStatus) Reset()      { *m = NSNB_AIStatus{} }
func (*NSNB_AIStatus) ProtoMessage() {}
func (*NSNB_AIStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 37}
}
func (m *NSNB_AIStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_AIStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_AIStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_AIStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_AIStatus.Merge(m, src)
}
func (m *NSNB_AIStatus) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_AIStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_AIStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_AIStatus proto.InternalMessageInfo

func (m *NSNB_AIStatus) GetIsAi() bool {
	if m != nil {
		return m.IsAi
	}
	return false
}

func (m *NSNB_AIStatus) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_AIStatus) XXX_MessageName() string {
	return "cppbattle.NSNB.AIStatus"
}

type NSNB_SyncNicknameChangePush struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	NickName    string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	ServerFrame int64  `protobuf:"varint,3,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_SyncNicknameChangePush) Reset()      { *m = NSNB_SyncNicknameChangePush{} }
func (*NSNB_SyncNicknameChangePush) ProtoMessage() {}
func (*NSNB_SyncNicknameChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 38}
}
func (m *NSNB_SyncNicknameChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SyncNicknameChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SyncNicknameChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SyncNicknameChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SyncNicknameChangePush.Merge(m, src)
}
func (m *NSNB_SyncNicknameChangePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SyncNicknameChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SyncNicknameChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SyncNicknameChangePush proto.InternalMessageInfo

func (m *NSNB_SyncNicknameChangePush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_SyncNicknameChangePush) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *NSNB_SyncNicknameChangePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_SyncNicknameChangePush) XXX_MessageName() string {
	return "cppbattle.NSNB.SyncNicknameChangePush"
}

type NSNB_HeroesChangePush struct {
	Heroes []*models.HeroForBattle `protobuf:"bytes,1,rep,name=heroes,proto3" json:"heroes,omitempty"`
	// 当前正在使用哪个英雄
	HeroIndex     int64   `protobuf:"varint,2,opt,name=hero_index,json=heroIndex,proto3" json:"hero_index,omitempty"`
	Speed         float32 `protobuf:"fixed32,3,opt,name=speed,proto3" json:"speed,omitempty"`
	RoleId        string  `protobuf:"bytes,4,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ChangeType    int64   `protobuf:"varint,5,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	Title         int64   `protobuf:"varint,6,opt,name=title,proto3" json:"title,omitempty"`
	Level         int64   `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	AutoSoulSkill int64   `protobuf:"varint,8,opt,name=auto_soul_skill,json=autoSoulSkill,proto3" json:"auto_soul_skill,omitempty"`
	ServerFrame   int64   `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_HeroesChangePush) Reset()      { *m = NSNB_HeroesChangePush{} }
func (*NSNB_HeroesChangePush) ProtoMessage() {}
func (*NSNB_HeroesChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 39}
}
func (m *NSNB_HeroesChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_HeroesChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_HeroesChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_HeroesChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_HeroesChangePush.Merge(m, src)
}
func (m *NSNB_HeroesChangePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_HeroesChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_HeroesChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_HeroesChangePush proto.InternalMessageInfo

func (m *NSNB_HeroesChangePush) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *NSNB_HeroesChangePush) GetHeroIndex() int64 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *NSNB_HeroesChangePush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *NSNB_HeroesChangePush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_HeroesChangePush) GetChangeType() int64 {
	if m != nil {
		return m.ChangeType
	}
	return 0
}

func (m *NSNB_HeroesChangePush) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *NSNB_HeroesChangePush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NSNB_HeroesChangePush) GetAutoSoulSkill() int64 {
	if m != nil {
		return m.AutoSoulSkill
	}
	return 0
}

func (m *NSNB_HeroesChangePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_HeroesChangePush) XXX_MessageName() string {
	return "cppbattle.NSNB.HeroesChangePush"
}

type NSNB_UserTitleChangePush struct {
	ObjId       string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Title       int64  `protobuf:"varint,2,opt,name=title,proto3" json:"title,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_UserTitleChangePush) Reset()      { *m = NSNB_UserTitleChangePush{} }
func (*NSNB_UserTitleChangePush) ProtoMessage() {}
func (*NSNB_UserTitleChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 40}
}
func (m *NSNB_UserTitleChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_UserTitleChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_UserTitleChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_UserTitleChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_UserTitleChangePush.Merge(m, src)
}
func (m *NSNB_UserTitleChangePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_UserTitleChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_UserTitleChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_UserTitleChangePush proto.InternalMessageInfo

func (m *NSNB_UserTitleChangePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_UserTitleChangePush) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *NSNB_UserTitleChangePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_UserTitleChangePush) XXX_MessageName() string {
	return "cppbattle.NSNB.UserTitleChangePush"
}

type NSNB_UserLevelChangePush struct {
	ObjId       string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Level       int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_UserLevelChangePush) Reset()      { *m = NSNB_UserLevelChangePush{} }
func (*NSNB_UserLevelChangePush) ProtoMessage() {}
func (*NSNB_UserLevelChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 41}
}
func (m *NSNB_UserLevelChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_UserLevelChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_UserLevelChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_UserLevelChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_UserLevelChangePush.Merge(m, src)
}
func (m *NSNB_UserLevelChangePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_UserLevelChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_UserLevelChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_UserLevelChangePush proto.InternalMessageInfo

func (m *NSNB_UserLevelChangePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_UserLevelChangePush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NSNB_UserLevelChangePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_UserLevelChangePush) XXX_MessageName() string {
	return "cppbattle.NSNB.UserLevelChangePush"
}

//获取Roguelike副本 战斗房间路径
type NSNB_GetRlBattleRoomsRequest struct {
}

func (m *NSNB_GetRlBattleRoomsRequest) Reset()      { *m = NSNB_GetRlBattleRoomsRequest{} }
func (*NSNB_GetRlBattleRoomsRequest) ProtoMessage() {}
func (*NSNB_GetRlBattleRoomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 42}
}
func (m *NSNB_GetRlBattleRoomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_GetRlBattleRoomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_GetRlBattleRoomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_GetRlBattleRoomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_GetRlBattleRoomsRequest.Merge(m, src)
}
func (m *NSNB_GetRlBattleRoomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_GetRlBattleRoomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_GetRlBattleRoomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_GetRlBattleRoomsRequest proto.InternalMessageInfo

func (*NSNB_GetRlBattleRoomsRequest) XXX_MessageName() string {
	return "cppbattle.NSNB.GetRlBattleRoomsRequest"
}

type NSNB_GetRlBattleRoomsResponse struct {
	RlRooms []*models.RlBattleRoom `protobuf:"bytes,1,rep,name=rl_rooms,json=rlRooms,proto3" json:"rl_rooms,omitempty"`
	CurIdx  int64                  `protobuf:"varint,2,opt,name=cur_idx,json=curIdx,proto3" json:"cur_idx,omitempty"`
}

func (m *NSNB_GetRlBattleRoomsResponse) Reset()      { *m = NSNB_GetRlBattleRoomsResponse{} }
func (*NSNB_GetRlBattleRoomsResponse) ProtoMessage() {}
func (*NSNB_GetRlBattleRoomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 43}
}
func (m *NSNB_GetRlBattleRoomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_GetRlBattleRoomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_GetRlBattleRoomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_GetRlBattleRoomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_GetRlBattleRoomsResponse.Merge(m, src)
}
func (m *NSNB_GetRlBattleRoomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_GetRlBattleRoomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_GetRlBattleRoomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_GetRlBattleRoomsResponse proto.InternalMessageInfo

func (m *NSNB_GetRlBattleRoomsResponse) GetRlRooms() []*models.RlBattleRoom {
	if m != nil {
		return m.RlRooms
	}
	return nil
}

func (m *NSNB_GetRlBattleRoomsResponse) GetCurIdx() int64 {
	if m != nil {
		return m.CurIdx
	}
	return 0
}

func (*NSNB_GetRlBattleRoomsResponse) XXX_MessageName() string {
	return "cppbattle.NSNB.GetRlBattleRoomsResponse"
}

// Roguelike所需数据推送
type NSNB_RlDataPush struct {
	DungeonId     int64                  `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	RlRooms       []*models.RlBattleRoom `protobuf:"bytes,2,rep,name=rl_rooms,json=rlRooms,proto3" json:"rl_rooms,omitempty"`
	CurRoomIdx    int64                  `protobuf:"varint,3,opt,name=cur_room_idx,json=curRoomIdx,proto3" json:"cur_room_idx,omitempty"`
	StartTime     int64                  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OuterReward   []*models.Item         `protobuf:"bytes,6,rep,name=outer_reward,json=outerReward,proto3" json:"outer_reward,omitempty"`
	InnerArtifact []int64                `protobuf:"varint,7,rep,packed,name=inner_artifact,json=innerArtifact,proto3" json:"inner_artifact,omitempty"`
	IsBlockAction bool                   `protobuf:"varint,8,opt,name=is_block_action,json=isBlockAction,proto3" json:"is_block_action,omitempty"`
	OnBridge      bool                   `protobuf:"varint,9,opt,name=on_bridge,json=onBridge,proto3" json:"on_bridge,omitempty"`
	AirWalls      map[int64]int64        `protobuf:"bytes,10,rep,name=air_walls,json=airWalls,proto3" json:"air_walls,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UseTime       int64                  `protobuf:"varint,11,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
	ServerFrame   int64                  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_RlDataPush) Reset()      { *m = NSNB_RlDataPush{} }
func (*NSNB_RlDataPush) ProtoMessage() {}
func (*NSNB_RlDataPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 44}
}
func (m *NSNB_RlDataPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_RlDataPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_RlDataPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_RlDataPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_RlDataPush.Merge(m, src)
}
func (m *NSNB_RlDataPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_RlDataPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_RlDataPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_RlDataPush proto.InternalMessageInfo

func (m *NSNB_RlDataPush) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *NSNB_RlDataPush) GetRlRooms() []*models.RlBattleRoom {
	if m != nil {
		return m.RlRooms
	}
	return nil
}

func (m *NSNB_RlDataPush) GetCurRoomIdx() int64 {
	if m != nil {
		return m.CurRoomIdx
	}
	return 0
}

func (m *NSNB_RlDataPush) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *NSNB_RlDataPush) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *NSNB_RlDataPush) GetOuterReward() []*models.Item {
	if m != nil {
		return m.OuterReward
	}
	return nil
}

func (m *NSNB_RlDataPush) GetInnerArtifact() []int64 {
	if m != nil {
		return m.InnerArtifact
	}
	return nil
}

func (m *NSNB_RlDataPush) GetIsBlockAction() bool {
	if m != nil {
		return m.IsBlockAction
	}
	return false
}

func (m *NSNB_RlDataPush) GetOnBridge() bool {
	if m != nil {
		return m.OnBridge
	}
	return false
}

func (m *NSNB_RlDataPush) GetAirWalls() map[int64]int64 {
	if m != nil {
		return m.AirWalls
	}
	return nil
}

func (m *NSNB_RlDataPush) GetUseTime() int64 {
	if m != nil {
		return m.UseTime
	}
	return 0
}

func (m *NSNB_RlDataPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_RlDataPush) XXX_MessageName() string {
	return "cppbattle.NSNB.RlDataPush"
}

// 屏蔽玩家操作
type NSNB_BlockPlayerActionPush struct {
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BlockPlayerActionPush) Reset()      { *m = NSNB_BlockPlayerActionPush{} }
func (*NSNB_BlockPlayerActionPush) ProtoMessage() {}
func (*NSNB_BlockPlayerActionPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 45}
}
func (m *NSNB_BlockPlayerActionPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BlockPlayerActionPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BlockPlayerActionPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BlockPlayerActionPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BlockPlayerActionPush.Merge(m, src)
}
func (m *NSNB_BlockPlayerActionPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BlockPlayerActionPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BlockPlayerActionPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BlockPlayerActionPush proto.InternalMessageInfo

func (m *NSNB_BlockPlayerActionPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BlockPlayerActionPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BlockPlayerActionPush"
}

// 取消屏蔽玩家操作
type NSNB_UnblockPlayerActionPush struct {
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_UnblockPlayerActionPush) Reset()      { *m = NSNB_UnblockPlayerActionPush{} }
func (*NSNB_UnblockPlayerActionPush) ProtoMessage() {}
func (*NSNB_UnblockPlayerActionPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 46}
}
func (m *NSNB_UnblockPlayerActionPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_UnblockPlayerActionPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_UnblockPlayerActionPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_UnblockPlayerActionPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_UnblockPlayerActionPush.Merge(m, src)
}
func (m *NSNB_UnblockPlayerActionPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_UnblockPlayerActionPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_UnblockPlayerActionPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_UnblockPlayerActionPush proto.InternalMessageInfo

func (m *NSNB_UnblockPlayerActionPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_UnblockPlayerActionPush) XXX_MessageName() string {
	return "cppbattle.NSNB.UnblockPlayerActionPush"
}

// 房间结算
type NSNB_RlRoomSettlePush struct {
	OuterReward      []*models.Item `protobuf:"bytes,1,rep,name=outer_reward,json=outerReward,proto3" json:"outer_reward,omitempty"`
	OptionalArtifact []int64        `protobuf:"varint,2,rep,packed,name=optional_artifact,json=optionalArtifact,proto3" json:"optional_artifact,omitempty"`
	RoomIdx          int64          `protobuf:"varint,3,opt,name=room_idx,json=roomIdx,proto3" json:"room_idx,omitempty"`
	ServerFrame      int64          `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_RlRoomSettlePush) Reset()      { *m = NSNB_RlRoomSettlePush{} }
func (*NSNB_RlRoomSettlePush) ProtoMessage() {}
func (*NSNB_RlRoomSettlePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 47}
}
func (m *NSNB_RlRoomSettlePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_RlRoomSettlePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_RlRoomSettlePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_RlRoomSettlePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_RlRoomSettlePush.Merge(m, src)
}
func (m *NSNB_RlRoomSettlePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_RlRoomSettlePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_RlRoomSettlePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_RlRoomSettlePush proto.InternalMessageInfo

func (m *NSNB_RlRoomSettlePush) GetOuterReward() []*models.Item {
	if m != nil {
		return m.OuterReward
	}
	return nil
}

func (m *NSNB_RlRoomSettlePush) GetOptionalArtifact() []int64 {
	if m != nil {
		return m.OptionalArtifact
	}
	return nil
}

func (m *NSNB_RlRoomSettlePush) GetRoomIdx() int64 {
	if m != nil {
		return m.RoomIdx
	}
	return 0
}

func (m *NSNB_RlRoomSettlePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_RlRoomSettlePush) XXX_MessageName() string {
	return "cppbattle.NSNB.RlRoomSettlePush"
}

// 选择局内道具
type NSNB_RlSelectArtifactRequest struct {
	Idx int64 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (m *NSNB_RlSelectArtifactRequest) Reset()      { *m = NSNB_RlSelectArtifactRequest{} }
func (*NSNB_RlSelectArtifactRequest) ProtoMessage() {}
func (*NSNB_RlSelectArtifactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 48}
}
func (m *NSNB_RlSelectArtifactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_RlSelectArtifactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_RlSelectArtifactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_RlSelectArtifactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_RlSelectArtifactRequest.Merge(m, src)
}
func (m *NSNB_RlSelectArtifactRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_RlSelectArtifactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_RlSelectArtifactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_RlSelectArtifactRequest proto.InternalMessageInfo

func (m *NSNB_RlSelectArtifactRequest) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (*NSNB_RlSelectArtifactRequest) XXX_MessageName() string {
	return "cppbattle.NSNB.RlSelectArtifactRequest"
}

type NSNB_RlSelectArtifactResponse struct {
	Idx         int64 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	ArtifactId  int64 `protobuf:"varint,2,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_RlSelectArtifactResponse) Reset()      { *m = NSNB_RlSelectArtifactResponse{} }
func (*NSNB_RlSelectArtifactResponse) ProtoMessage() {}
func (*NSNB_RlSelectArtifactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 49}
}
func (m *NSNB_RlSelectArtifactResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_RlSelectArtifactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_RlSelectArtifactResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_RlSelectArtifactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_RlSelectArtifactResponse.Merge(m, src)
}
func (m *NSNB_RlSelectArtifactResponse) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_RlSelectArtifactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_RlSelectArtifactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_RlSelectArtifactResponse proto.InternalMessageInfo

func (m *NSNB_RlSelectArtifactResponse) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *NSNB_RlSelectArtifactResponse) GetArtifactId() int64 {
	if m != nil {
		return m.ArtifactId
	}
	return 0
}

func (m *NSNB_RlSelectArtifactResponse) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_RlSelectArtifactResponse) XXX_MessageName() string {
	return "cppbattle.NSNB.RlSelectArtifactResponse"
}

// Boss机制 初始化
type NSNB_BossSchemeInitPush struct {
	Typ         int64  `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	BossId      string `protobuf:"bytes,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BossSchemeInitPush) Reset()      { *m = NSNB_BossSchemeInitPush{} }
func (*NSNB_BossSchemeInitPush) ProtoMessage() {}
func (*NSNB_BossSchemeInitPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 50}
}
func (m *NSNB_BossSchemeInitPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BossSchemeInitPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BossSchemeInitPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BossSchemeInitPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BossSchemeInitPush.Merge(m, src)
}
func (m *NSNB_BossSchemeInitPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BossSchemeInitPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BossSchemeInitPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BossSchemeInitPush proto.InternalMessageInfo

func (m *NSNB_BossSchemeInitPush) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *NSNB_BossSchemeInitPush) GetBossId() string {
	if m != nil {
		return m.BossId
	}
	return ""
}

func (m *NSNB_BossSchemeInitPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BossSchemeInitPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BossSchemeInitPush"
}

// Boss机制
type NSNB_BossSchemePush struct {
	RoleIds     []string     `protobuf:"bytes,1,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	PassTime    float32      `protobuf:"fixed32,2,opt,name=pass_time,json=passTime,proto3" json:"pass_time,omitempty"`
	Typ         int64        `protobuf:"varint,3,opt,name=typ,proto3" json:"typ,omitempty"`
	Points      []*NSNB_Vec2 `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`
	Idx         int64        `protobuf:"varint,5,opt,name=idx,proto3" json:"idx,omitempty"`
	ServerFrame int64        `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BossSchemePush) Reset()      { *m = NSNB_BossSchemePush{} }
func (*NSNB_BossSchemePush) ProtoMessage() {}
func (*NSNB_BossSchemePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 51}
}
func (m *NSNB_BossSchemePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BossSchemePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BossSchemePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BossSchemePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BossSchemePush.Merge(m, src)
}
func (m *NSNB_BossSchemePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BossSchemePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BossSchemePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BossSchemePush proto.InternalMessageInfo

func (m *NSNB_BossSchemePush) GetRoleIds() []string {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

func (m *NSNB_BossSchemePush) GetPassTime() float32 {
	if m != nil {
		return m.PassTime
	}
	return 0
}

func (m *NSNB_BossSchemePush) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *NSNB_BossSchemePush) GetPoints() []*NSNB_Vec2 {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *NSNB_BossSchemePush) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *NSNB_BossSchemePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BossSchemePush) XXX_MessageName() string {
	return "cppbattle.NSNB.BossSchemePush"
}

// Boss机制点击
type NSNB_BossSchemeClickPush struct {
	RoleId      string   `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Typ         ClickTyp `protobuf:"varint,2,opt,name=typ,proto3,enum=cppbattle.ClickTyp" json:"typ,omitempty"`
	ServerFrame int64    `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BossSchemeClickPush) Reset()      { *m = NSNB_BossSchemeClickPush{} }
func (*NSNB_BossSchemeClickPush) ProtoMessage() {}
func (*NSNB_BossSchemeClickPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 52}
}
func (m *NSNB_BossSchemeClickPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BossSchemeClickPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BossSchemeClickPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BossSchemeClickPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BossSchemeClickPush.Merge(m, src)
}
func (m *NSNB_BossSchemeClickPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BossSchemeClickPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BossSchemeClickPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BossSchemeClickPush proto.InternalMessageInfo

func (m *NSNB_BossSchemeClickPush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_BossSchemeClickPush) GetTyp() ClickTyp {
	if m != nil {
		return m.Typ
	}
	return ClickTyp_ClickTypPerfect
}

func (m *NSNB_BossSchemeClickPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BossSchemeClickPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BossSchemeClickPush"
}

type NSNB_HeroUpdate struct {
	// hero表配置id
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// hero属性(hp mp 等)
	Attr             map[int64]int64             `protobuf:"bytes,2,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Equip            map[int64]int64             `protobuf:"bytes,3,rep,name=equip,proto3" json:"equip,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SkillIds         []*models.HeroSkillAndStone `protobuf:"bytes,4,rep,name=skill_ids,json=skillIds,proto3" json:"skill_ids,omitempty"`
	IsSkillChange    bool                        `protobuf:"varint,5,opt,name=is_skill_change,json=isSkillChange,proto3" json:"is_skill_change,omitempty"`
	Buff             []int64                     `protobuf:"varint,6,rep,packed,name=buff,proto3" json:"buff,omitempty"`
	EquipLightEffect map[int64]int64             `protobuf:"bytes,7,rep,name=equip_light_effect,json=equipLightEffect,proto3" json:"equip_light_effect,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Fashion          int64                       `protobuf:"varint,8,opt,name=fashion,proto3" json:"fashion,omitempty"`
}

func (m *NSNB_HeroUpdate) Reset()      { *m = NSNB_HeroUpdate{} }
func (*NSNB_HeroUpdate) ProtoMessage() {}
func (*NSNB_HeroUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 53}
}
func (m *NSNB_HeroUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_HeroUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_HeroUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_HeroUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_HeroUpdate.Merge(m, src)
}
func (m *NSNB_HeroUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_HeroUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_HeroUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_HeroUpdate proto.InternalMessageInfo

func (m *NSNB_HeroUpdate) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_HeroUpdate) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *NSNB_HeroUpdate) GetEquip() map[int64]int64 {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (m *NSNB_HeroUpdate) GetSkillIds() []*models.HeroSkillAndStone {
	if m != nil {
		return m.SkillIds
	}
	return nil
}

func (m *NSNB_HeroUpdate) GetIsSkillChange() bool {
	if m != nil {
		return m.IsSkillChange
	}
	return false
}

func (m *NSNB_HeroUpdate) GetBuff() []int64 {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *NSNB_HeroUpdate) GetEquipLightEffect() map[int64]int64 {
	if m != nil {
		return m.EquipLightEffect
	}
	return nil
}

func (m *NSNB_HeroUpdate) GetFashion() int64 {
	if m != nil {
		return m.Fashion
	}
	return 0
}

func (*NSNB_HeroUpdate) XXX_MessageName() string {
	return "cppbattle.NSNB.HeroUpdate"
}

type NSNB_HeroAttrUpdatePush struct {
	BattleServerId int64              `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	ObjId          string             `protobuf:"bytes,2,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Heroes         []*NSNB_HeroUpdate `protobuf:"bytes,3,rep,name=heroes,proto3" json:"heroes,omitempty"`
	Title          int64              `protobuf:"varint,4,opt,name=title,proto3" json:"title,omitempty"`
	Level          int64              `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	AutoSoulSkill  int64              `protobuf:"varint,6,opt,name=auto_soul_skill,json=autoSoulSkill,proto3" json:"auto_soul_skill,omitempty"`
	ServerFrame    int64              `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_HeroAttrUpdatePush) Reset()      { *m = NSNB_HeroAttrUpdatePush{} }
func (*NSNB_HeroAttrUpdatePush) ProtoMessage() {}
func (*NSNB_HeroAttrUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 54}
}
func (m *NSNB_HeroAttrUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_HeroAttrUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_HeroAttrUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_HeroAttrUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_HeroAttrUpdatePush.Merge(m, src)
}
func (m *NSNB_HeroAttrUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_HeroAttrUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_HeroAttrUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_HeroAttrUpdatePush proto.InternalMessageInfo

func (m *NSNB_HeroAttrUpdatePush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NSNB_HeroAttrUpdatePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_HeroAttrUpdatePush) GetHeroes() []*NSNB_HeroUpdate {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *NSNB_HeroAttrUpdatePush) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *NSNB_HeroAttrUpdatePush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NSNB_HeroAttrUpdatePush) GetAutoSoulSkill() int64 {
	if m != nil {
		return m.AutoSoulSkill
	}
	return 0
}

func (m *NSNB_HeroAttrUpdatePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_HeroAttrUpdatePush) XXX_MessageName() string {
	return "cppbattle.NSNB.HeroAttrUpdatePush"
}

type NSNB_HeroFashionPush struct {
	BattleServerId int64  `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	RoleId         string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	HeroConfigId   int64  `protobuf:"varint,3,opt,name=hero_config_id,json=heroConfigId,proto3" json:"hero_config_id,omitempty"`
	Fashion        int64  `protobuf:"varint,4,opt,name=fashion,proto3" json:"fashion,omitempty"`
	ServerFrame    int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_HeroFashionPush) Reset()      { *m = NSNB_HeroFashionPush{} }
func (*NSNB_HeroFashionPush) ProtoMessage() {}
func (*NSNB_HeroFashionPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 55}
}
func (m *NSNB_HeroFashionPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_HeroFashionPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_HeroFashionPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_HeroFashionPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_HeroFashionPush.Merge(m, src)
}
func (m *NSNB_HeroFashionPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_HeroFashionPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_HeroFashionPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_HeroFashionPush proto.InternalMessageInfo

func (m *NSNB_HeroFashionPush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NSNB_HeroFashionPush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_HeroFashionPush) GetHeroConfigId() int64 {
	if m != nil {
		return m.HeroConfigId
	}
	return 0
}

func (m *NSNB_HeroFashionPush) GetFashion() int64 {
	if m != nil {
		return m.Fashion
	}
	return 0
}

func (m *NSNB_HeroFashionPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_HeroFashionPush) XXX_MessageName() string {
	return "cppbattle.NSNB.HeroFashionPush"
}

type NSNB_TaskMoveStart struct {
	Dest      *NSNB_Vec2 `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	MaxRadius float32    `protobuf:"fixed32,2,opt,name=maxRadius,proto3" json:"maxRadius,omitempty"`
}

func (m *NSNB_TaskMoveStart) Reset()      { *m = NSNB_TaskMoveStart{} }
func (*NSNB_TaskMoveStart) ProtoMessage() {}
func (*NSNB_TaskMoveStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 56}
}
func (m *NSNB_TaskMoveStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_TaskMoveStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_TaskMoveStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_TaskMoveStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_TaskMoveStart.Merge(m, src)
}
func (m *NSNB_TaskMoveStart) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_TaskMoveStart) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_TaskMoveStart.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_TaskMoveStart proto.InternalMessageInfo

func (m *NSNB_TaskMoveStart) GetDest() *NSNB_Vec2 {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *NSNB_TaskMoveStart) GetMaxRadius() float32 {
	if m != nil {
		return m.MaxRadius
	}
	return 0
}

func (*NSNB_TaskMoveStart) XXX_MessageName() string {
	return "cppbattle.NSNB.TaskMoveStart"
}

type NSNB_TaskMoveFinish struct {
	Dest        *NSNB_Vec2 `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	ServerFrame int64      `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_TaskMoveFinish) Reset()      { *m = NSNB_TaskMoveFinish{} }
func (*NSNB_TaskMoveFinish) ProtoMessage() {}
func (*NSNB_TaskMoveFinish) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 57}
}
func (m *NSNB_TaskMoveFinish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_TaskMoveFinish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_TaskMoveFinish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_TaskMoveFinish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_TaskMoveFinish.Merge(m, src)
}
func (m *NSNB_TaskMoveFinish) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_TaskMoveFinish) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_TaskMoveFinish.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_TaskMoveFinish proto.InternalMessageInfo

func (m *NSNB_TaskMoveFinish) GetDest() *NSNB_Vec2 {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *NSNB_TaskMoveFinish) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_TaskMoveFinish) XXX_MessageName() string {
	return "cppbattle.NSNB.TaskMoveFinish"
}

type NSNB_TaskMoveEnd struct {
}

func (m *NSNB_TaskMoveEnd) Reset()      { *m = NSNB_TaskMoveEnd{} }
func (*NSNB_TaskMoveEnd) ProtoMessage() {}
func (*NSNB_TaskMoveEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 58}
}
func (m *NSNB_TaskMoveEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_TaskMoveEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_TaskMoveEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_TaskMoveEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_TaskMoveEnd.Merge(m, src)
}
func (m *NSNB_TaskMoveEnd) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_TaskMoveEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_TaskMoveEnd.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_TaskMoveEnd proto.InternalMessageInfo

func (*NSNB_TaskMoveEnd) XXX_MessageName() string {
	return "cppbattle.NSNB.TaskMoveEnd"
}

// 设置选中对象
type NSNB_SetSelect struct {
	ObjId       string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	SelectId    string `protobuf:"bytes,2,opt,name=select_id,json=selectId,proto3" json:"select_id,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_SetSelect) Reset()      { *m = NSNB_SetSelect{} }
func (*NSNB_SetSelect) ProtoMessage() {}
func (*NSNB_SetSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 59}
}
func (m *NSNB_SetSelect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SetSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SetSelect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SetSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SetSelect.Merge(m, src)
}
func (m *NSNB_SetSelect) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SetSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SetSelect.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SetSelect proto.InternalMessageInfo

func (m *NSNB_SetSelect) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_SetSelect) GetSelectId() string {
	if m != nil {
		return m.SelectId
	}
	return ""
}

func (m *NSNB_SetSelect) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_SetSelect) XXX_MessageName() string {
	return "cppbattle.NSNB.SetSelect"
}

// 设置攻击对象
type NSNB_SetTarget struct {
	ObjId       string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	TargetId    string `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_SetTarget) Reset()      { *m = NSNB_SetTarget{} }
func (*NSNB_SetTarget) ProtoMessage() {}
func (*NSNB_SetTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 60}
}
func (m *NSNB_SetTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SetTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SetTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SetTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SetTarget.Merge(m, src)
}
func (m *NSNB_SetTarget) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SetTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SetTarget.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SetTarget proto.InternalMessageInfo

func (m *NSNB_SetTarget) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_SetTarget) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *NSNB_SetTarget) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_SetTarget) XXX_MessageName() string {
	return "cppbattle.NSNB.SetTarget"
}

type NSNB_GuildBossDamageSync struct {
	SelfDamage  int64   `protobuf:"varint,1,opt,name=self_damage,json=selfDamage,proto3" json:"self_damage,omitempty"`
	TotalDamage int64   `protobuf:"varint,2,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	RemainTime  float32 `protobuf:"fixed32,3,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	ServerFrame int64   `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_GuildBossDamageSync) Reset()      { *m = NSNB_GuildBossDamageSync{} }
func (*NSNB_GuildBossDamageSync) ProtoMessage() {}
func (*NSNB_GuildBossDamageSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 61}
}
func (m *NSNB_GuildBossDamageSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_GuildBossDamageSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_GuildBossDamageSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_GuildBossDamageSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_GuildBossDamageSync.Merge(m, src)
}
func (m *NSNB_GuildBossDamageSync) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_GuildBossDamageSync) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_GuildBossDamageSync.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_GuildBossDamageSync proto.InternalMessageInfo

func (m *NSNB_GuildBossDamageSync) GetSelfDamage() int64 {
	if m != nil {
		return m.SelfDamage
	}
	return 0
}

func (m *NSNB_GuildBossDamageSync) GetTotalDamage() int64 {
	if m != nil {
		return m.TotalDamage
	}
	return 0
}

func (m *NSNB_GuildBossDamageSync) GetRemainTime() float32 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *NSNB_GuildBossDamageSync) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_GuildBossDamageSync) XXX_MessageName() string {
	return "cppbattle.NSNB.GuildBossDamageSync"
}

type NSNB_MonsterFullHPPush struct {
	ObjId       string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ServerFrame int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_MonsterFullHPPush) Reset()      { *m = NSNB_MonsterFullHPPush{} }
func (*NSNB_MonsterFullHPPush) ProtoMessage() {}
func (*NSNB_MonsterFullHPPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 62}
}
func (m *NSNB_MonsterFullHPPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_MonsterFullHPPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_MonsterFullHPPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_MonsterFullHPPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_MonsterFullHPPush.Merge(m, src)
}
func (m *NSNB_MonsterFullHPPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_MonsterFullHPPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_MonsterFullHPPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_MonsterFullHPPush proto.InternalMessageInfo

func (m *NSNB_MonsterFullHPPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_MonsterFullHPPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_MonsterFullHPPush) XXX_MessageName() string {
	return "cppbattle.NSNB.MonsterFullHPPush"
}

type NSNB_SetShowLog struct {
	ObjId     string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	IsShowLog bool   `protobuf:"varint,2,opt,name=is_show_log,json=isShowLog,proto3" json:"is_show_log,omitempty"`
}

func (m *NSNB_SetShowLog) Reset()      { *m = NSNB_SetShowLog{} }
func (*NSNB_SetShowLog) ProtoMessage() {}
func (*NSNB_SetShowLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 63}
}
func (m *NSNB_SetShowLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SetShowLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SetShowLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SetShowLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SetShowLog.Merge(m, src)
}
func (m *NSNB_SetShowLog) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SetShowLog) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SetShowLog.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SetShowLog proto.InternalMessageInfo

func (m *NSNB_SetShowLog) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_SetShowLog) GetIsShowLog() bool {
	if m != nil {
		return m.IsShowLog
	}
	return false
}

func (*NSNB_SetShowLog) XXX_MessageName() string {
	return "cppbattle.NSNB.SetShowLog"
}

type NSNB_BuffAttr struct {
	FixValue     float32 `protobuf:"fixed32,1,opt,name=fix_value,json=fixValue,proto3" json:"fix_value,omitempty"`
	PercentValue float32 `protobuf:"fixed32,2,opt,name=percent_value,json=percentValue,proto3" json:"percent_value,omitempty"`
}

func (m *NSNB_BuffAttr) Reset()      { *m = NSNB_BuffAttr{} }
func (*NSNB_BuffAttr) ProtoMessage() {}
func (*NSNB_BuffAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 64}
}
func (m *NSNB_BuffAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BuffAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BuffAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BuffAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BuffAttr.Merge(m, src)
}
func (m *NSNB_BuffAttr) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BuffAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BuffAttr.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BuffAttr proto.InternalMessageInfo

func (m *NSNB_BuffAttr) GetFixValue() float32 {
	if m != nil {
		return m.FixValue
	}
	return 0
}

func (m *NSNB_BuffAttr) GetPercentValue() float32 {
	if m != nil {
		return m.PercentValue
	}
	return 0
}

func (*NSNB_BuffAttr) XXX_MessageName() string {
	return "cppbattle.NSNB.BuffAttr"
}

type NSNB_ObjectInfo struct {
	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 攻击方英雄id
	HeroId int64 `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	// 属性
	Attr map[string]int64 `protobuf:"bytes,3,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// buff
	BuffAttr map[string]*NSNB_BuffAttr `protobuf:"bytes,4,rep,name=buff_attr,json=buffAttr,proto3" json:"buff_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NSNB_ObjectInfo) Reset()      { *m = NSNB_ObjectInfo{} }
func (*NSNB_ObjectInfo) ProtoMessage() {}
func (*NSNB_ObjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 65}
}
func (m *NSNB_ObjectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ObjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ObjectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ObjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ObjectInfo.Merge(m, src)
}
func (m *NSNB_ObjectInfo) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ObjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ObjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ObjectInfo proto.InternalMessageInfo

func (m *NSNB_ObjectInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NSNB_ObjectInfo) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *NSNB_ObjectInfo) GetAttr() map[string]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *NSNB_ObjectInfo) GetBuffAttr() map[string]*NSNB_BuffAttr {
	if m != nil {
		return m.BuffAttr
	}
	return nil
}

func (*NSNB_ObjectInfo) XXX_MessageName() string {
	return "cppbattle.NSNB.ObjectInfo"
}

type NSNB_ShowSkillsLogs struct {
	// 攻击方
	Attacker *NSNB_ObjectInfo `protobuf:"bytes,1,opt,name=attacker,proto3" json:"attacker,omitempty"`
	// 防御方
	Defender *NSNB_ObjectInfo `protobuf:"bytes,2,opt,name=defender,proto3" json:"defender,omitempty"`
	// 技能名
	SkillId int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	// buff名
	BuffId  int64 `protobuf:"varint,4,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	IsCri   bool  `protobuf:"varint,5,opt,name=is_cri,json=isCri,proto3" json:"is_cri,omitempty"`
	IsDodge bool  `protobuf:"varint,6,opt,name=is_dodge,json=isDodge,proto3" json:"is_dodge,omitempty"`
	IsParry bool  `protobuf:"varint,7,opt,name=is_parry,json=isParry,proto3" json:"is_parry,omitempty"`
	LogType int64 `protobuf:"varint,8,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	// 变化
	ChangeValue []int64 `protobuf:"varint,20,rep,packed,name=change_value,json=changeValue,proto3" json:"change_value,omitempty"`
	// buff
	BuffAttr    map[string]*NSNB_BuffAttr `protobuf:"bytes,21,rep,name=buff_attr,json=buffAttr,proto3" json:"buff_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CalBuffAttr map[string]float32        `protobuf:"bytes,22,rep,name=cal_buff_attr,json=calBuffAttr,proto3" json:"cal_buff_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (m *NSNB_ShowSkillsLogs) Reset()      { *m = NSNB_ShowSkillsLogs{} }
func (*NSNB_ShowSkillsLogs) ProtoMessage() {}
func (*NSNB_ShowSkillsLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 66}
}
func (m *NSNB_ShowSkillsLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ShowSkillsLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ShowSkillsLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ShowSkillsLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ShowSkillsLogs.Merge(m, src)
}
func (m *NSNB_ShowSkillsLogs) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ShowSkillsLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ShowSkillsLogs.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ShowSkillsLogs proto.InternalMessageInfo

func (m *NSNB_ShowSkillsLogs) GetAttacker() *NSNB_ObjectInfo {
	if m != nil {
		return m.Attacker
	}
	return nil
}

func (m *NSNB_ShowSkillsLogs) GetDefender() *NSNB_ObjectInfo {
	if m != nil {
		return m.Defender
	}
	return nil
}

func (m *NSNB_ShowSkillsLogs) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NSNB_ShowSkillsLogs) GetBuffId() int64 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *NSNB_ShowSkillsLogs) GetIsCri() bool {
	if m != nil {
		return m.IsCri
	}
	return false
}

func (m *NSNB_ShowSkillsLogs) GetIsDodge() bool {
	if m != nil {
		return m.IsDodge
	}
	return false
}

func (m *NSNB_ShowSkillsLogs) GetIsParry() bool {
	if m != nil {
		return m.IsParry
	}
	return false
}

func (m *NSNB_ShowSkillsLogs) GetLogType() int64 {
	if m != nil {
		return m.LogType
	}
	return 0
}

func (m *NSNB_ShowSkillsLogs) GetChangeValue() []int64 {
	if m != nil {
		return m.ChangeValue
	}
	return nil
}

func (m *NSNB_ShowSkillsLogs) GetBuffAttr() map[string]*NSNB_BuffAttr {
	if m != nil {
		return m.BuffAttr
	}
	return nil
}

func (m *NSNB_ShowSkillsLogs) GetCalBuffAttr() map[string]float32 {
	if m != nil {
		return m.CalBuffAttr
	}
	return nil
}

func (*NSNB_ShowSkillsLogs) XXX_MessageName() string {
	return "cppbattle.NSNB.ShowSkillsLogs"
}

type NSNB_EdgeKillPlayer struct {
	RoleId []string `protobuf:"bytes,1,rep,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *NSNB_EdgeKillPlayer) Reset()      { *m = NSNB_EdgeKillPlayer{} }
func (*NSNB_EdgeKillPlayer) ProtoMessage() {}
func (*NSNB_EdgeKillPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 67}
}
func (m *NSNB_EdgeKillPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_EdgeKillPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_EdgeKillPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_EdgeKillPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_EdgeKillPlayer.Merge(m, src)
}
func (m *NSNB_EdgeKillPlayer) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_EdgeKillPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_EdgeKillPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_EdgeKillPlayer proto.InternalMessageInfo

func (m *NSNB_EdgeKillPlayer) GetRoleId() []string {
	if m != nil {
		return m.RoleId
	}
	return nil
}

func (*NSNB_EdgeKillPlayer) XXX_MessageName() string {
	return "cppbattle.NSNB.EdgeKillPlayer"
}

type NSNB_KeepAliveRequest struct {
}

func (m *NSNB_KeepAliveRequest) Reset()      { *m = NSNB_KeepAliveRequest{} }
func (*NSNB_KeepAliveRequest) ProtoMessage() {}
func (*NSNB_KeepAliveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 68}
}
func (m *NSNB_KeepAliveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_KeepAliveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_KeepAliveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_KeepAliveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_KeepAliveRequest.Merge(m, src)
}
func (m *NSNB_KeepAliveRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_KeepAliveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_KeepAliveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_KeepAliveRequest proto.InternalMessageInfo

func (*NSNB_KeepAliveRequest) XXX_MessageName() string {
	return "cppbattle.NSNB.KeepAliveRequest"
}

type NSNB_KeepAliveResponse struct {
}

func (m *NSNB_KeepAliveResponse) Reset()      { *m = NSNB_KeepAliveResponse{} }
func (*NSNB_KeepAliveResponse) ProtoMessage() {}
func (*NSNB_KeepAliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 69}
}
func (m *NSNB_KeepAliveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_KeepAliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_KeepAliveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_KeepAliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_KeepAliveResponse.Merge(m, src)
}
func (m *NSNB_KeepAliveResponse) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_KeepAliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_KeepAliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_KeepAliveResponse proto.InternalMessageInfo

func (*NSNB_KeepAliveResponse) XXX_MessageName() string {
	return "cppbattle.NSNB.KeepAliveResponse"
}

type NSNB_DrawSkillOpenPush struct {
	ObjId  string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	IsOpen bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (m *NSNB_DrawSkillOpenPush) Reset()      { *m = NSNB_DrawSkillOpenPush{} }
func (*NSNB_DrawSkillOpenPush) ProtoMessage() {}
func (*NSNB_DrawSkillOpenPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 70}
}
func (m *NSNB_DrawSkillOpenPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_DrawSkillOpenPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_DrawSkillOpenPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_DrawSkillOpenPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_DrawSkillOpenPush.Merge(m, src)
}
func (m *NSNB_DrawSkillOpenPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_DrawSkillOpenPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_DrawSkillOpenPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_DrawSkillOpenPush proto.InternalMessageInfo

func (m *NSNB_DrawSkillOpenPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_DrawSkillOpenPush) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (*NSNB_DrawSkillOpenPush) XXX_MessageName() string {
	return "cppbattle.NSNB.DrawSkillOpenPush"
}

type NSNB_DrawSKillRangePush struct {
	Pos         []*NSNB_Vec2 `protobuf:"bytes,1,rep,name=pos,proto3" json:"pos,omitempty"`
	Length      float32      `protobuf:"fixed32,2,opt,name=length,proto3" json:"length,omitempty"`
	Width       float32      `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	Typ         int32        `protobuf:"varint,4,opt,name=typ,proto3" json:"typ,omitempty"`
	ServerFrame int64        `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_DrawSKillRangePush) Reset()      { *m = NSNB_DrawSKillRangePush{} }
func (*NSNB_DrawSKillRangePush) ProtoMessage() {}
func (*NSNB_DrawSKillRangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 71}
}
func (m *NSNB_DrawSKillRangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_DrawSKillRangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_DrawSKillRangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_DrawSKillRangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_DrawSKillRangePush.Merge(m, src)
}
func (m *NSNB_DrawSKillRangePush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_DrawSKillRangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_DrawSKillRangePush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_DrawSKillRangePush proto.InternalMessageInfo

func (m *NSNB_DrawSKillRangePush) GetPos() []*NSNB_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NSNB_DrawSKillRangePush) GetLength() float32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *NSNB_DrawSKillRangePush) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *NSNB_DrawSKillRangePush) GetTyp() int32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *NSNB_DrawSKillRangePush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_DrawSKillRangePush) XXX_MessageName() string {
	return "cppbattle.NSNB.DrawSKillRangePush"
}

type NSNB_ShowFightLog struct {
	ObjId  string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	IsOpen bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (m *NSNB_ShowFightLog) Reset()      { *m = NSNB_ShowFightLog{} }
func (*NSNB_ShowFightLog) ProtoMessage() {}
func (*NSNB_ShowFightLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 72}
}
func (m *NSNB_ShowFightLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ShowFightLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ShowFightLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ShowFightLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ShowFightLog.Merge(m, src)
}
func (m *NSNB_ShowFightLog) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ShowFightLog) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ShowFightLog.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ShowFightLog proto.InternalMessageInfo

func (m *NSNB_ShowFightLog) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_ShowFightLog) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (*NSNB_ShowFightLog) XXX_MessageName() string {
	return "cppbattle.NSNB.ShowFightLog"
}

type NSNB_SoulPwerPush struct {
	ObjId  string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	HeroId int64  `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	//属性
	Attr        map[int64]int64 `protobuf:"bytes,3,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ServerFrame int64           `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_SoulPwerPush) Reset()      { *m = NSNB_SoulPwerPush{} }
func (*NSNB_SoulPwerPush) ProtoMessage() {}
func (*NSNB_SoulPwerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 73}
}
func (m *NSNB_SoulPwerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SoulPwerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SoulPwerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SoulPwerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SoulPwerPush.Merge(m, src)
}
func (m *NSNB_SoulPwerPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SoulPwerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SoulPwerPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SoulPwerPush proto.InternalMessageInfo

func (m *NSNB_SoulPwerPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_SoulPwerPush) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *NSNB_SoulPwerPush) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *NSNB_SoulPwerPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_SoulPwerPush) XXX_MessageName() string {
	return "cppbattle.NSNB.SoulPwerPush"
}

type NSNB_SyncSkillInfo struct {
	SkillId      int64 `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Status       int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	SkillCd      int64 `protobuf:"varint,3,opt,name=skill_cd,json=skillCd,proto3" json:"skill_cd,omitempty"`
	SkillCdDelta int64 `protobuf:"varint,4,opt,name=skill_cd_delta,json=skillCdDelta,proto3" json:"skill_cd_delta,omitempty"`
}

func (m *NSNB_SyncSkillInfo) Reset()      { *m = NSNB_SyncSkillInfo{} }
func (*NSNB_SyncSkillInfo) ProtoMessage() {}
func (*NSNB_SyncSkillInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 74}
}
func (m *NSNB_SyncSkillInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SyncSkillInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SyncSkillInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SyncSkillInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SyncSkillInfo.Merge(m, src)
}
func (m *NSNB_SyncSkillInfo) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SyncSkillInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SyncSkillInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SyncSkillInfo proto.InternalMessageInfo

func (m *NSNB_SyncSkillInfo) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NSNB_SyncSkillInfo) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *NSNB_SyncSkillInfo) GetSkillCd() int64 {
	if m != nil {
		return m.SkillCd
	}
	return 0
}

func (m *NSNB_SyncSkillInfo) GetSkillCdDelta() int64 {
	if m != nil {
		return m.SkillCdDelta
	}
	return 0
}

func (*NSNB_SyncSkillInfo) XXX_MessageName() string {
	return "cppbattle.NSNB.SyncSkillInfo"
}

type NSNB_SyncSkillPush struct {
	ObjId       string                        `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	HeroId      int64                         `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Skills      map[int64]*NSNB_SyncSkillInfo `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServerFrame int64                         `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_SyncSkillPush) Reset()      { *m = NSNB_SyncSkillPush{} }
func (*NSNB_SyncSkillPush) ProtoMessage() {}
func (*NSNB_SyncSkillPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 75}
}
func (m *NSNB_SyncSkillPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_SyncSkillPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_SyncSkillPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_SyncSkillPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_SyncSkillPush.Merge(m, src)
}
func (m *NSNB_SyncSkillPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_SyncSkillPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_SyncSkillPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_SyncSkillPush proto.InternalMessageInfo

func (m *NSNB_SyncSkillPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_SyncSkillPush) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *NSNB_SyncSkillPush) GetSkills() map[int64]*NSNB_SyncSkillInfo {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *NSNB_SyncSkillPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_SyncSkillPush) XXX_MessageName() string {
	return "cppbattle.NSNB.SyncSkillPush"
}

type NSNB_BossDeadPush struct {
	BossId      string         `protobuf:"bytes,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	ConfigId    int64          `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Items       []*models.Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	BossPos     *models.Vec2   `protobuf:"bytes,4,opt,name=boss_pos,json=bossPos,proto3" json:"boss_pos,omitempty"`
	KillerId    string         `protobuf:"bytes,5,opt,name=killer_id,json=killerId,proto3" json:"killer_id,omitempty"`
	ServerFrame int64          `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BossDeadPush) Reset()      { *m = NSNB_BossDeadPush{} }
func (*NSNB_BossDeadPush) ProtoMessage() {}
func (*NSNB_BossDeadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 76}
}
func (m *NSNB_BossDeadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BossDeadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BossDeadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BossDeadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BossDeadPush.Merge(m, src)
}
func (m *NSNB_BossDeadPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BossDeadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BossDeadPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BossDeadPush proto.InternalMessageInfo

func (m *NSNB_BossDeadPush) GetBossId() string {
	if m != nil {
		return m.BossId
	}
	return ""
}

func (m *NSNB_BossDeadPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NSNB_BossDeadPush) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *NSNB_BossDeadPush) GetBossPos() *models.Vec2 {
	if m != nil {
		return m.BossPos
	}
	return nil
}

func (m *NSNB_BossDeadPush) GetKillerId() string {
	if m != nil {
		return m.KillerId
	}
	return ""
}

func (m *NSNB_BossDeadPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BossDeadPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BossDeadPush"
}

type NSNB_ExitBossLandPush struct {
}

func (m *NSNB_ExitBossLandPush) Reset()      { *m = NSNB_ExitBossLandPush{} }
func (*NSNB_ExitBossLandPush) ProtoMessage() {}
func (*NSNB_ExitBossLandPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 77}
}
func (m *NSNB_ExitBossLandPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ExitBossLandPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ExitBossLandPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ExitBossLandPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ExitBossLandPush.Merge(m, src)
}
func (m *NSNB_ExitBossLandPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ExitBossLandPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ExitBossLandPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ExitBossLandPush proto.InternalMessageInfo

func (*NSNB_ExitBossLandPush) XXX_MessageName() string {
	return "cppbattle.NSNB.ExitBossLandPush"
}

type NSNB_BossRefreshPush struct {
	RefreshTime int64 `protobuf:"varint,1,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BossRefreshPush) Reset()      { *m = NSNB_BossRefreshPush{} }
func (*NSNB_BossRefreshPush) ProtoMessage() {}
func (*NSNB_BossRefreshPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 78}
}
func (m *NSNB_BossRefreshPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BossRefreshPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BossRefreshPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BossRefreshPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BossRefreshPush.Merge(m, src)
}
func (m *NSNB_BossRefreshPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BossRefreshPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BossRefreshPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BossRefreshPush proto.InternalMessageInfo

func (m *NSNB_BossRefreshPush) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *NSNB_BossRefreshPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BossRefreshPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BossRefreshPush"
}

type NSNB_ItemDropPush struct {
	RoleId      string         `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	DropPos     *models.Vec2   `protobuf:"bytes,2,opt,name=drop_pos,json=dropPos,proto3" json:"drop_pos,omitempty"`
	Items       []*models.Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	ServerFrame int64          `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_ItemDropPush) Reset()      { *m = NSNB_ItemDropPush{} }
func (*NSNB_ItemDropPush) ProtoMessage() {}
func (*NSNB_ItemDropPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 79}
}
func (m *NSNB_ItemDropPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ItemDropPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ItemDropPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ItemDropPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ItemDropPush.Merge(m, src)
}
func (m *NSNB_ItemDropPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ItemDropPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ItemDropPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ItemDropPush proto.InternalMessageInfo

func (m *NSNB_ItemDropPush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NSNB_ItemDropPush) GetDropPos() *models.Vec2 {
	if m != nil {
		return m.DropPos
	}
	return nil
}

func (m *NSNB_ItemDropPush) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *NSNB_ItemDropPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_ItemDropPush) XXX_MessageName() string {
	return "cppbattle.NSNB.ItemDropPush"
}

// 恶魔秘境广播消息
type NSNB_BossHallPush struct {
	RemainSeconds float32 `protobuf:"fixed32,1,opt,name=remain_seconds,json=remainSeconds,proto3" json:"remain_seconds,omitempty"`
	IsFinish      bool    `protobuf:"varint,2,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	ServerFrame   int64   `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BossHallPush) Reset()      { *m = NSNB_BossHallPush{} }
func (*NSNB_BossHallPush) ProtoMessage() {}
func (*NSNB_BossHallPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 80}
}
func (m *NSNB_BossHallPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BossHallPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BossHallPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BossHallPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BossHallPush.Merge(m, src)
}
func (m *NSNB_BossHallPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BossHallPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BossHallPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BossHallPush proto.InternalMessageInfo

func (m *NSNB_BossHallPush) GetRemainSeconds() float32 {
	if m != nil {
		return m.RemainSeconds
	}
	return 0
}

func (m *NSNB_BossHallPush) GetIsFinish() bool {
	if m != nil {
		return m.IsFinish
	}
	return false
}

func (m *NSNB_BossHallPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BossHallPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BossHallPush"
}

// 恶魔秘境结算界面数据推送
type NSNB_BossHallFinishPush struct {
	IsSuccess    bool           `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	HasKillItems bool           `protobuf:"varint,2,opt,name=has_kill_items,json=hasKillItems,proto3" json:"has_kill_items,omitempty"`
	KillItems    []*models.Item `protobuf:"bytes,3,rep,name=kill_items,json=killItems,proto3" json:"kill_items,omitempty"`
	HasJoinItems bool           `protobuf:"varint,4,opt,name=has_join_items,json=hasJoinItems,proto3" json:"has_join_items,omitempty"`
	JoinItems    []*models.Item `protobuf:"bytes,5,rep,name=join_items,json=joinItems,proto3" json:"join_items,omitempty"`
	Killer       string         `protobuf:"bytes,6,opt,name=killer,proto3" json:"killer,omitempty"`
	IsSelfKill   bool           `protobuf:"varint,7,opt,name=is_self_kill,json=isSelfKill,proto3" json:"is_self_kill,omitempty"`
	ServerFrame  int64          `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_BossHallFinishPush) Reset()      { *m = NSNB_BossHallFinishPush{} }
func (*NSNB_BossHallFinishPush) ProtoMessage() {}
func (*NSNB_BossHallFinishPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 81}
}
func (m *NSNB_BossHallFinishPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_BossHallFinishPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_BossHallFinishPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_BossHallFinishPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_BossHallFinishPush.Merge(m, src)
}
func (m *NSNB_BossHallFinishPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_BossHallFinishPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_BossHallFinishPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_BossHallFinishPush proto.InternalMessageInfo

func (m *NSNB_BossHallFinishPush) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *NSNB_BossHallFinishPush) GetHasKillItems() bool {
	if m != nil {
		return m.HasKillItems
	}
	return false
}

func (m *NSNB_BossHallFinishPush) GetKillItems() []*models.Item {
	if m != nil {
		return m.KillItems
	}
	return nil
}

func (m *NSNB_BossHallFinishPush) GetHasJoinItems() bool {
	if m != nil {
		return m.HasJoinItems
	}
	return false
}

func (m *NSNB_BossHallFinishPush) GetJoinItems() []*models.Item {
	if m != nil {
		return m.JoinItems
	}
	return nil
}

func (m *NSNB_BossHallFinishPush) GetKiller() string {
	if m != nil {
		return m.Killer
	}
	return ""
}

func (m *NSNB_BossHallFinishPush) GetIsSelfKill() bool {
	if m != nil {
		return m.IsSelfKill
	}
	return false
}

func (m *NSNB_BossHallFinishPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_BossHallFinishPush) XXX_MessageName() string {
	return "cppbattle.NSNB.BossHallFinishPush"
}

type NSNB_PlaneDungeonStatusPush struct {
	Status      int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	IdentChange int64 `protobuf:"varint,2,opt,name=ident_change,json=identChange,proto3" json:"ident_change,omitempty"`
	AllTime     int64 `protobuf:"varint,3,opt,name=all_time,json=allTime,proto3" json:"all_time,omitempty"`
	UseTime     int64 `protobuf:"varint,4,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
	IdentNum    int64 `protobuf:"varint,5,opt,name=ident_num,json=identNum,proto3" json:"ident_num,omitempty"`
	WaitEnd     int64 `protobuf:"varint,6,opt,name=wait_end,json=waitEnd,proto3" json:"wait_end,omitempty"`
	ServerFrame int64 `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_PlaneDungeonStatusPush) Reset()      { *m = NSNB_PlaneDungeonStatusPush{} }
func (*NSNB_PlaneDungeonStatusPush) ProtoMessage() {}
func (*NSNB_PlaneDungeonStatusPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 82}
}
func (m *NSNB_PlaneDungeonStatusPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_PlaneDungeonStatusPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_PlaneDungeonStatusPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_PlaneDungeonStatusPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_PlaneDungeonStatusPush.Merge(m, src)
}
func (m *NSNB_PlaneDungeonStatusPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_PlaneDungeonStatusPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_PlaneDungeonStatusPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_PlaneDungeonStatusPush proto.InternalMessageInfo

func (m *NSNB_PlaneDungeonStatusPush) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *NSNB_PlaneDungeonStatusPush) GetIdentChange() int64 {
	if m != nil {
		return m.IdentChange
	}
	return 0
}

func (m *NSNB_PlaneDungeonStatusPush) GetAllTime() int64 {
	if m != nil {
		return m.AllTime
	}
	return 0
}

func (m *NSNB_PlaneDungeonStatusPush) GetUseTime() int64 {
	if m != nil {
		return m.UseTime
	}
	return 0
}

func (m *NSNB_PlaneDungeonStatusPush) GetIdentNum() int64 {
	if m != nil {
		return m.IdentNum
	}
	return 0
}

func (m *NSNB_PlaneDungeonStatusPush) GetWaitEnd() int64 {
	if m != nil {
		return m.WaitEnd
	}
	return 0
}

func (m *NSNB_PlaneDungeonStatusPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_PlaneDungeonStatusPush) XXX_MessageName() string {
	return "cppbattle.NSNB.PlaneDungeonStatusPush"
}

type NSNB_ExitPlaneDungeonPush struct {
}

func (m *NSNB_ExitPlaneDungeonPush) Reset()      { *m = NSNB_ExitPlaneDungeonPush{} }
func (*NSNB_ExitPlaneDungeonPush) ProtoMessage() {}
func (*NSNB_ExitPlaneDungeonPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 83}
}
func (m *NSNB_ExitPlaneDungeonPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_ExitPlaneDungeonPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_ExitPlaneDungeonPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_ExitPlaneDungeonPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_ExitPlaneDungeonPush.Merge(m, src)
}
func (m *NSNB_ExitPlaneDungeonPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_ExitPlaneDungeonPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_ExitPlaneDungeonPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_ExitPlaneDungeonPush proto.InternalMessageInfo

func (*NSNB_ExitPlaneDungeonPush) XXX_MessageName() string {
	return "cppbattle.NSNB.ExitPlaneDungeonPush"
}

type NSNB_UserAutoSoulSkillPush struct {
	ObjId          string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	AutoSouleSkill int64  `protobuf:"varint,2,opt,name=auto_soule_skill,json=autoSouleSkill,proto3" json:"auto_soule_skill,omitempty"`
	ServerFrame    int64  `protobuf:"varint,100,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
}

func (m *NSNB_UserAutoSoulSkillPush) Reset()      { *m = NSNB_UserAutoSoulSkillPush{} }
func (*NSNB_UserAutoSoulSkillPush) ProtoMessage() {}
func (*NSNB_UserAutoSoulSkillPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 84}
}
func (m *NSNB_UserAutoSoulSkillPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_UserAutoSoulSkillPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_UserAutoSoulSkillPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_UserAutoSoulSkillPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_UserAutoSoulSkillPush.Merge(m, src)
}
func (m *NSNB_UserAutoSoulSkillPush) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_UserAutoSoulSkillPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_UserAutoSoulSkillPush.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_UserAutoSoulSkillPush proto.InternalMessageInfo

func (m *NSNB_UserAutoSoulSkillPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NSNB_UserAutoSoulSkillPush) GetAutoSouleSkill() int64 {
	if m != nil {
		return m.AutoSouleSkill
	}
	return 0
}

func (m *NSNB_UserAutoSoulSkillPush) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (*NSNB_UserAutoSoulSkillPush) XXX_MessageName() string {
	return "cppbattle.NSNB.UserAutoSoulSkillPush"
}

type NSNB_GM struct {
}

func (m *NSNB_GM) Reset()      { *m = NSNB_GM{} }
func (*NSNB_GM) ProtoMessage() {}
func (*NSNB_GM) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 85}
}
func (m *NSNB_GM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_GM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_GM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_GM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_GM.Merge(m, src)
}
func (m *NSNB_GM) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_GM) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_GM.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_GM proto.InternalMessageInfo

func (*NSNB_GM) XXX_MessageName() string {
	return "cppbattle.NSNB.GM"
}

type NSNB_GM_CreateMonsterNearby struct {
	MonsterId int64 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Test      int64 `protobuf:"varint,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (m *NSNB_GM_CreateMonsterNearby) Reset()      { *m = NSNB_GM_CreateMonsterNearby{} }
func (*NSNB_GM_CreateMonsterNearby) ProtoMessage() {}
func (*NSNB_GM_CreateMonsterNearby) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 85, 0}
}
func (m *NSNB_GM_CreateMonsterNearby) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_GM_CreateMonsterNearby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_GM_CreateMonsterNearby.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_GM_CreateMonsterNearby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_GM_CreateMonsterNearby.Merge(m, src)
}
func (m *NSNB_GM_CreateMonsterNearby) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_GM_CreateMonsterNearby) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_GM_CreateMonsterNearby.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_GM_CreateMonsterNearby proto.InternalMessageInfo

func (m *NSNB_GM_CreateMonsterNearby) GetMonsterId() int64 {
	if m != nil {
		return m.MonsterId
	}
	return 0
}

func (m *NSNB_GM_CreateMonsterNearby) GetTest() int64 {
	if m != nil {
		return m.Test
	}
	return 0
}

func (*NSNB_GM_CreateMonsterNearby) XXX_MessageName() string {
	return "cppbattle.NSNB.GM.CreateMonsterNearby"
}

type NSNB_GM_CloseConn struct {
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *NSNB_GM_CloseConn) Reset()      { *m = NSNB_GM_CloseConn{} }
func (*NSNB_GM_CloseConn) ProtoMessage() {}
func (*NSNB_GM_CloseConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c83872e1d1fbd19f, []int{0, 85, 1}
}
func (m *NSNB_GM_CloseConn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSNB_GM_CloseConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSNB_GM_CloseConn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSNB_GM_CloseConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSNB_GM_CloseConn.Merge(m, src)
}
func (m *NSNB_GM_CloseConn) XXX_Size() int {
	return m.Size()
}
func (m *NSNB_GM_CloseConn) XXX_DiscardUnknown() {
	xxx_messageInfo_NSNB_GM_CloseConn.DiscardUnknown(m)
}

var xxx_messageInfo_NSNB_GM_CloseConn proto.InternalMessageInfo

func (m *NSNB_GM_CloseConn) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (*NSNB_GM_CloseConn) XXX_MessageName() string {
	return "cppbattle.NSNB.GM.CloseConn"
}
func init() {
	proto.RegisterEnum("cppbattle.ClickTyp", ClickTyp_name, ClickTyp_value)
	proto.RegisterType((*NSNB)(nil), "cppbattle.NSNB")
	proto.RegisterType((*NSNB_Vec2)(nil), "cppbattle.NSNB.Vec2")
	proto.RegisterType((*NSNB_Ping)(nil), "cppbattle.NSNB.Ping")
	proto.RegisterType((*NSNB_Pong)(nil), "cppbattle.NSNB.Pong")
	proto.RegisterType((*NSNB_EdgeAuth)(nil), "cppbattle.NSNB.EdgeAuth")
	proto.RegisterType((*NSNB_ManyPushMsg)(nil), "cppbattle.NSNB.ManyPushMsg")
	proto.RegisterType((*NSNB_AuthTCPPushToServer)(nil), "cppbattle.NSNB.AuthTCPPushToServer")
	proto.RegisterType((*NSNB_BinDataVersionPush)(nil), "cppbattle.NSNB.BinDataVersionPush")
	proto.RegisterType((*NSNB_PlayerPush)(nil), "cppbattle.NSNB.PlayerPush")
	proto.RegisterType((*NSNB_MonsterPush)(nil), "cppbattle.NSNB.MonsterPush")
	proto.RegisterType((*NSNB_MoveOutPush)(nil), "cppbattle.NSNB.MoveOutPush")
	proto.RegisterType((*NSNB_MoveSyncPush)(nil), "cppbattle.NSNB.MoveSyncPush")
	proto.RegisterType((*NSNB_ClientMoveRequest)(nil), "cppbattle.NSNB.ClientMoveRequest")
	proto.RegisterType((*NSNB_BuffInfo)(nil), "cppbattle.NSNB.BuffInfo")
	proto.RegisterType((*NSNB_AttrValues)(nil), "cppbattle.NSNB.AttrValues")
	proto.RegisterType((*NSNB_BuffPush)(nil), "cppbattle.NSNB.BuffPush")
	proto.RegisterMapType((map[int64]*NSNB_AttrValues)(nil), "cppbattle.NSNB.BuffPush.BuffAttrsEntry")
	proto.RegisterMapType((map[int64]*NSNB_BuffInfo)(nil), "cppbattle.NSNB.BuffPush.BuffsEntry")
	proto.RegisterType((*NSNB_BuffFlyDescPush)(nil), "cppbattle.NSNB.BuffFlyDescPush")
	proto.RegisterType((*NSNB_BuffTracingBulletPush)(nil), "cppbattle.NSNB.BuffTracingBulletPush")
	proto.RegisterType((*NSNB_ClientAttack)(nil), "cppbattle.NSNB.ClientAttack")
	proto.RegisterType((*NSNB_SkillPush)(nil), "cppbattle.NSNB.SkillPush")
	proto.RegisterType((*NSNB_DamagePush)(nil), "cppbattle.NSNB.DamagePush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.DamagePush.AttrEntry")
	proto.RegisterType((*NSNB_BuffValuePush)(nil), "cppbattle.NSNB.BuffValuePush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.BuffValuePush.AttrEntry")
	proto.RegisterType((*NSNB_DeadPush)(nil), "cppbattle.NSNB.DeadPush")
	proto.RegisterType((*NSNB_DeadNotifyPush)(nil), "cppbattle.NSNB.DeadNotifyPush")
	proto.RegisterType((*NSNB_PosChange)(nil), "cppbattle.NSNB.PosChange")
	proto.RegisterType((*NSNB_TransFormNotice)(nil), "cppbattle.NSNB.TransFormNotice")
	proto.RegisterType((*NSNB_CreateAirWallPush)(nil), "cppbattle.NSNB.CreateAirWallPush")
	proto.RegisterType((*NSNB_DestroyAirWallPush)(nil), "cppbattle.NSNB.DestroyAirWallPush")
	proto.RegisterType((*NSNB_CurAirWallPush)(nil), "cppbattle.NSNB.CurAirWallPush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.CurAirWallPush.AirWallsEntry")
	proto.RegisterType((*NSNB_RevivePush)(nil), "cppbattle.NSNB.RevivePush")
	proto.RegisterType((*NSNB_QueryDeadPush)(nil), "cppbattle.NSNB.QueryDeadPush")
	proto.RegisterType((*NSNB_TransFormRequest)(nil), "cppbattle.NSNB.TransFormRequest")
	proto.RegisterType((*NSNB_ChangeHero)(nil), "cppbattle.NSNB.ChangeHero")
	proto.RegisterType((*NSNB_ChangeHeroPush)(nil), "cppbattle.NSNB.ChangeHeroPush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.ChangeHeroPush.AttrEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.ChangeHeroPush.EquipEntry")
	proto.RegisterType((*NSNB_ChangeHeroSelfPush)(nil), "cppbattle.NSNB.ChangeHeroSelfPush")
	proto.RegisterType((*NSNB_ReviveHeroPush)(nil), "cppbattle.NSNB.ReviveHeroPush")
	proto.RegisterType((*NSNB_ExitBattle)(nil), "cppbattle.NSNB.ExitBattle")
	proto.RegisterType((*NSNB_ExitBattlePush)(nil), "cppbattle.NSNB.ExitBattlePush")
	proto.RegisterType((*NSNB_AIStatus)(nil), "cppbattle.NSNB.AIStatus")
	proto.RegisterType((*NSNB_SyncNicknameChangePush)(nil), "cppbattle.NSNB.SyncNicknameChangePush")
	proto.RegisterType((*NSNB_HeroesChangePush)(nil), "cppbattle.NSNB.HeroesChangePush")
	proto.RegisterType((*NSNB_UserTitleChangePush)(nil), "cppbattle.NSNB.UserTitleChangePush")
	proto.RegisterType((*NSNB_UserLevelChangePush)(nil), "cppbattle.NSNB.UserLevelChangePush")
	proto.RegisterType((*NSNB_GetRlBattleRoomsRequest)(nil), "cppbattle.NSNB.GetRlBattleRoomsRequest")
	proto.RegisterType((*NSNB_GetRlBattleRoomsResponse)(nil), "cppbattle.NSNB.GetRlBattleRoomsResponse")
	proto.RegisterType((*NSNB_RlDataPush)(nil), "cppbattle.NSNB.RlDataPush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.RlDataPush.AirWallsEntry")
	proto.RegisterType((*NSNB_BlockPlayerActionPush)(nil), "cppbattle.NSNB.BlockPlayerActionPush")
	proto.RegisterType((*NSNB_UnblockPlayerActionPush)(nil), "cppbattle.NSNB.UnblockPlayerActionPush")
	proto.RegisterType((*NSNB_RlRoomSettlePush)(nil), "cppbattle.NSNB.RlRoomSettlePush")
	proto.RegisterType((*NSNB_RlSelectArtifactRequest)(nil), "cppbattle.NSNB.RlSelectArtifactRequest")
	proto.RegisterType((*NSNB_RlSelectArtifactResponse)(nil), "cppbattle.NSNB.RlSelectArtifactResponse")
	proto.RegisterType((*NSNB_BossSchemeInitPush)(nil), "cppbattle.NSNB.BossSchemeInitPush")
	proto.RegisterType((*NSNB_BossSchemePush)(nil), "cppbattle.NSNB.BossSchemePush")
	proto.RegisterType((*NSNB_BossSchemeClickPush)(nil), "cppbattle.NSNB.BossSchemeClickPush")
	proto.RegisterType((*NSNB_HeroUpdate)(nil), "cppbattle.NSNB.HeroUpdate")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.HeroUpdate.AttrEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.HeroUpdate.EquipEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.HeroUpdate.EquipLightEffectEntry")
	proto.RegisterType((*NSNB_HeroAttrUpdatePush)(nil), "cppbattle.NSNB.HeroAttrUpdatePush")
	proto.RegisterType((*NSNB_HeroFashionPush)(nil), "cppbattle.NSNB.HeroFashionPush")
	proto.RegisterType((*NSNB_TaskMoveStart)(nil), "cppbattle.NSNB.TaskMoveStart")
	proto.RegisterType((*NSNB_TaskMoveFinish)(nil), "cppbattle.NSNB.TaskMoveFinish")
	proto.RegisterType((*NSNB_TaskMoveEnd)(nil), "cppbattle.NSNB.TaskMoveEnd")
	proto.RegisterType((*NSNB_SetSelect)(nil), "cppbattle.NSNB.SetSelect")
	proto.RegisterType((*NSNB_SetTarget)(nil), "cppbattle.NSNB.SetTarget")
	proto.RegisterType((*NSNB_GuildBossDamageSync)(nil), "cppbattle.NSNB.GuildBossDamageSync")
	proto.RegisterType((*NSNB_MonsterFullHPPush)(nil), "cppbattle.NSNB.MonsterFullHPPush")
	proto.RegisterType((*NSNB_SetShowLog)(nil), "cppbattle.NSNB.SetShowLog")
	proto.RegisterType((*NSNB_BuffAttr)(nil), "cppbattle.NSNB.BuffAttr")
	proto.RegisterType((*NSNB_ObjectInfo)(nil), "cppbattle.NSNB.ObjectInfo")
	proto.RegisterMapType((map[string]int64)(nil), "cppbattle.NSNB.ObjectInfo.AttrEntry")
	proto.RegisterMapType((map[string]*NSNB_BuffAttr)(nil), "cppbattle.NSNB.ObjectInfo.BuffAttrEntry")
	proto.RegisterType((*NSNB_ShowSkillsLogs)(nil), "cppbattle.NSNB.ShowSkillsLogs")
	proto.RegisterMapType((map[string]*NSNB_BuffAttr)(nil), "cppbattle.NSNB.ShowSkillsLogs.BuffAttrEntry")
	proto.RegisterMapType((map[string]float32)(nil), "cppbattle.NSNB.ShowSkillsLogs.CalBuffAttrEntry")
	proto.RegisterType((*NSNB_EdgeKillPlayer)(nil), "cppbattle.NSNB.EdgeKillPlayer")
	proto.RegisterType((*NSNB_KeepAliveRequest)(nil), "cppbattle.NSNB.KeepAliveRequest")
	proto.RegisterType((*NSNB_KeepAliveResponse)(nil), "cppbattle.NSNB.KeepAliveResponse")
	proto.RegisterType((*NSNB_DrawSkillOpenPush)(nil), "cppbattle.NSNB.DrawSkillOpenPush")
	proto.RegisterType((*NSNB_DrawSKillRangePush)(nil), "cppbattle.NSNB.DrawSKillRangePush")
	proto.RegisterType((*NSNB_ShowFightLog)(nil), "cppbattle.NSNB.ShowFightLog")
	proto.RegisterType((*NSNB_SoulPwerPush)(nil), "cppbattle.NSNB.SoulPwerPush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.NSNB.SoulPwerPush.AttrEntry")
	proto.RegisterType((*NSNB_SyncSkillInfo)(nil), "cppbattle.NSNB.SyncSkillInfo")
	proto.RegisterType((*NSNB_SyncSkillPush)(nil), "cppbattle.NSNB.SyncSkillPush")
	proto.RegisterMapType((map[int64]*NSNB_SyncSkillInfo)(nil), "cppbattle.NSNB.SyncSkillPush.SkillsEntry")
	proto.RegisterType((*NSNB_BossDeadPush)(nil), "cppbattle.NSNB.BossDeadPush")
	proto.RegisterType((*NSNB_ExitBossLandPush)(nil), "cppbattle.NSNB.ExitBossLandPush")
	proto.RegisterType((*NSNB_BossRefreshPush)(nil), "cppbattle.NSNB.BossRefreshPush")
	proto.RegisterType((*NSNB_ItemDropPush)(nil), "cppbattle.NSNB.ItemDropPush")
	proto.RegisterType((*NSNB_BossHallPush)(nil), "cppbattle.NSNB.BossHallPush")
	proto.RegisterType((*NSNB_BossHallFinishPush)(nil), "cppbattle.NSNB.BossHallFinishPush")
	proto.RegisterType((*NSNB_PlaneDungeonStatusPush)(nil), "cppbattle.NSNB.PlaneDungeonStatusPush")
	proto.RegisterType((*NSNB_ExitPlaneDungeonPush)(nil), "cppbattle.NSNB.ExitPlaneDungeonPush")
	proto.RegisterType((*NSNB_UserAutoSoulSkillPush)(nil), "cppbattle.NSNB.UserAutoSoulSkillPush")
	proto.RegisterType((*NSNB_GM)(nil), "cppbattle.NSNB.GM")
	proto.RegisterType((*NSNB_GM_CreateMonsterNearby)(nil), "cppbattle.NSNB.GM.CreateMonsterNearby")
	proto.RegisterType((*NSNB_GM_CloseConn)(nil), "cppbattle.NSNB.GM.CloseConn")
}

func init() {
	proto.RegisterFile("proto/cppbattle/cpp_battle_new.proto", fileDescriptor_c83872e1d1fbd19f)
}

var fileDescriptor_c83872e1d1fbd19f = []byte{
	// 4257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3b, 0x4b, 0x8c, 0x23, 0x49,
	0x56, 0x9d, 0xfe, 0xa6, 0x9f, 0x5d, 0x6e, 0x77, 0xf6, 0xcf, 0xe5, 0xd9, 0xae, 0xed, 0x9d, 0xe9,
	0x99, 0xa9, 0x65, 0x66, 0xab, 0x46, 0x33, 0x68, 0x19, 0x66, 0x56, 0x8b, 0xaa, 0x5c, 0xd5, 0xdd,
	0x66, 0xba, 0x7b, 0x8a, 0x74, 0x75, 0xcf, 0x0a, 0x09, 0x52, 0xe9, 0xcc, 0xb0, 0x2b, 0xba, 0xd2,
	0x19, 0xee, 0x8c, 0x74, 0x55, 0x19, 0x24, 0x04, 0x42, 0x1c, 0x91, 0x10, 0x1c, 0x56, 0x42, 0x42,
	0x08, 0xad, 0x10, 0x1c, 0x56, 0x1c, 0x59, 0x24, 0xe0, 0xba, 0x9a, 0xe3, 0x72, 0x41, 0x2b, 0x71,
	0x81, 0x1e, 0x0e, 0x1c, 0x38, 0x70, 0xe2, 0x0a, 0x8a, 0x17, 0x91, 0x3f, 0x97, 0xed, 0xca, 0xea,
	0x61, 0x76, 0xb9, 0x39, 0x5f, 0xbc, 0x78, 0xef, 0xc5, 0x7b, 0x2f, 0x5e, 0xbc, 0x78, 0x2f, 0x0c,
	0xf7, 0x26, 0x01, 0x0b, 0xd9, 0xb6, 0x33, 0x99, 0x0c, 0xec, 0x30, 0xf4, 0x88, 0xf8, 0x65, 0xc9,
	0x9f, 0x96, 0x4f, 0x4e, 0xb7, 0x70, 0xd8, 0xa8, 0xc5, 0xe3, 0x9d, 0x75, 0x39, 0x61, 0xcc, 0x5c,
	0xe2, 0xf1, 0x6d, 0x09, 0x94, 0x58, 0x9d, 0x5b, 0x73, 0x43, 0x23, 0x05, 0x5f, 0x1f, 0x31, 0x36,
	0xf2, 0xc8, 0x36, 0x7e, 0x0d, 0xa6, 0xc3, 0x6d, 0xdb, 0x9f, 0xa9, 0xa1, 0xbb, 0xcb, 0xd9, 0x2b,
	0x8c, 0xaf, 0x65, 0x88, 0x06, 0x6c, 0x34, 0x25, 0x1e, 0x3d, 0x8e, 0x46, 0x6f, 0x67, 0x46, 0x8f,
	0x48, 0xc0, 0xe4, 0xc0, 0xeb, 0x7f, 0x12, 0x40, 0xe9, 0x49, 0xff, 0xc9, 0x6e, 0xe7, 0x75, 0x28,
	0x3d, 0x23, 0xce, 0xfb, 0x46, 0x03, 0xb4, 0xb3, 0xb6, 0x76, 0x57, 0xdb, 0x2c, 0x98, 0xda, 0x99,
	0xf8, 0x9a, 0xb5, 0x0b, 0xf2, 0x6b, 0xd6, 0x79, 0x1b, 0x4a, 0x07, 0xd4, 0x1f, 0x19, 0x5f, 0x87,
	0xba, 0xe3, 0x51, 0xe2, 0x87, 0x56, 0x48, 0xc7, 0x04, 0xb1, 0x8b, 0x26, 0x48, 0xd0, 0x21, 0x1d,
	0x93, 0xce, 0x31, 0x94, 0x0e, 0x58, 0x0e, 0x44, 0x81, 0xc0, 0x49, 0x70, 0x42, 0x02, 0x89, 0x50,
	0x90, 0x08, 0x12, 0x84, 0x08, 0xdf, 0x80, 0x86, 0x42, 0x18, 0x06, 0xf6, 0x98, 0xb4, 0x5d, 0xc4,
	0x50, 0x93, 0xee, 0x0b, 0x50, 0x07, 0x40, 0xdf, 0x77, 0x47, 0x64, 0x67, 0x1a, 0x1e, 0x75, 0x06,
	0x50, 0x7f, 0x6c, 0xfb, 0xb3, 0x83, 0x29, 0x3f, 0x7a, 0xcc, 0x47, 0xc6, 0x7b, 0xa0, 0x8f, 0x09,
	0xe7, 0xf6, 0x88, 0xf0, 0xb6, 0x76, 0xb7, 0xb8, 0x59, 0x7f, 0xff, 0xc6, 0x96, 0x54, 0xf2, 0x56,
	0xa4, 0xe4, 0xad, 0x1d, 0x7f, 0x66, 0xc6, 0x58, 0x79, 0xf8, 0xfd, 0x50, 0x83, 0xeb, 0x82, 0xd9,
	0x61, 0xf7, 0x40, 0xf0, 0x39, 0x64, 0x7d, 0x1c, 0x34, 0x6e, 0x43, 0x35, 0x60, 0x1e, 0xb1, 0xa8,
	0x8b, 0x0b, 0xad, 0x99, 0x15, 0xf1, 0xd9, 0x73, 0x8d, 0x1b, 0x50, 0x0e, 0xd9, 0x31, 0xf1, 0x71,
	0x79, 0x35, 0x53, 0x7e, 0x18, 0xaf, 0x41, 0xcd, 0x61, 0xfe, 0x90, 0x8e, 0xc4, 0x84, 0x22, 0xb2,
	0xd1, 0x25, 0xa0, 0xe7, 0xce, 0x2b, 0xae, 0x74, 0x4e, 0x71, 0x9b, 0xd0, 0x1a, 0x50, 0xdf, 0x72,
	0xed, 0xd0, 0xb6, 0x4e, 0x48, 0xc0, 0x29, 0xf3, 0xdb, 0x65, 0xc4, 0x6a, 0x0e, 0xa8, 0xbf, 0x67,
	0x87, 0xf6, 0x33, 0x09, 0xed, 0xfc, 0x0e, 0x18, 0xbb, 0x19, 0x88, 0x10, 0x7a, 0xe1, 0x7c, 0x6d,
	0xd1, 0x7c, 0x21, 0xa7, 0xd2, 0x08, 0x9d, 0xa8, 0x15, 0xe8, 0x12, 0xd0, 0x9b, 0xe4, 0x51, 0xd7,
	0xe7, 0x45, 0x80, 0x03, 0xcf, 0x9e, 0x91, 0x00, 0x19, 0xdf, 0x84, 0x0a, 0x1b, 0x3c, 0x4f, 0x94,
	0x54, 0x66, 0x83, 0xe7, 0x3d, 0xd7, 0x30, 0xa0, 0xe4, 0xdb, 0xca, 0x03, 0x6a, 0x26, 0xfe, 0x96,
	0x9c, 0x9d, 0xd0, 0xc2, 0x81, 0x62, 0xc4, 0xd9, 0x09, 0x9f, 0x88, 0xc1, 0x1b, 0x50, 0xf6, 0xc8,
	0x09, 0xf1, 0x94, 0x6e, 0xe4, 0x87, 0xf1, 0x2d, 0xa8, 0x08, 0xe7, 0x26, 0xbc, 0x5d, 0x46, 0x73,
	0xdf, 0xdc, 0x92, 0x2e, 0xbf, 0xf5, 0x90, 0x04, 0xec, 0x3e, 0x0b, 0x76, 0x71, 0xcb, 0x98, 0x0a,
	0xc9, 0xb8, 0x03, 0x20, 0x7e, 0x59, 0xd4, 0x77, 0xc9, 0x59, 0xbb, 0x82, 0x94, 0x6a, 0x02, 0xd2,
	0x13, 0x00, 0xe3, 0x2d, 0x28, 0x4e, 0x18, 0x6f, 0x57, 0xef, 0x6a, 0xe8, 0x39, 0xf1, 0xee, 0xdb,
	0x12, 0x3b, 0x66, 0x4b, 0x6c, 0x17, 0x53, 0x20, 0x18, 0x5b, 0x50, 0x0d, 0xd9, 0xa9, 0x1d, 0xb8,
	0xbc, 0xad, 0xaf, 0xc0, 0x8d, 0x90, 0x84, 0xec, 0x7c, 0x42, 0x88, 0xdb, 0xae, 0xe1, 0xce, 0x92,
	0x1f, 0xc2, 0x7f, 0x1c, 0x7b, 0x3c, 0x11, 0xaa, 0x01, 0x94, 0xa4, 0x22, 0x3e, 0x7b, 0xae, 0xf1,
	0x16, 0x5c, 0x1d, 0x06, 0x94, 0xf8, 0xae, 0xa5, 0xc6, 0x79, 0xbb, 0x7e, 0xb7, 0xb8, 0x59, 0x34,
	0xd7, 0x24, 0xb8, 0x8b, 0x68, 0x48, 0x36, 0xa4, 0xa1, 0x47, 0xda, 0x0d, 0xa9, 0x12, 0xfc, 0x10,
	0xb3, 0xed, 0x69, 0xc8, 0x2c, 0xce, 0xa6, 0x9e, 0xc5, 0x8f, 0xa9, 0xe7, 0xb5, 0xd7, 0x70, 0x7c,
	0x4d, 0x80, 0xfb, 0x6c, 0xea, 0xf5, 0x05, 0x30, 0x8f, 0x29, 0xff, 0xb8, 0x04, 0xf5, 0xc7, 0xcc,
	0xe7, 0xe1, 0x6a, 0x5b, 0x26, 0x46, 0x28, 0x5c, 0xde, 0x08, 0xc5, 0x25, 0x46, 0x28, 0x5d, 0xc2,
	0x08, 0xe5, 0x4b, 0x19, 0xa1, 0x92, 0x36, 0x42, 0x66, 0x57, 0x56, 0xe7, 0x76, 0x65, 0xca, 0x42,
	0xfa, 0x45, 0x16, 0xaa, 0x2d, 0xb2, 0x90, 0x08, 0x77, 0xd3, 0xf1, 0x98, 0xf9, 0xc4, 0x8d, 0xcc,
	0x5c, 0x33, 0x21, 0x02, 0xf5, 0x5c, 0xe3, 0x0d, 0x58, 0x8b, 0x11, 0xd0, 0xed, 0xeb, 0x88, 0xd2,
	0x88, 0x80, 0xe8, 0xfa, 0x69, 0xa4, 0x70, 0x36, 0x89, 0xec, 0x1d, 0x23, 0x1d, 0xce, 0x26, 0xa9,
	0xfd, 0xb1, 0x96, 0xde, 0x1f, 0x5b, 0x50, 0x1e, 0x4c, 0x87, 0x43, 0xde, 0x6e, 0xa2, 0x8a, 0xda,
	0xf3, 0x2a, 0xda, 0x9d, 0x0e, 0x87, 0xc2, 0xb4, 0xa6, 0x44, 0xcb, 0xe3, 0x14, 0x0f, 0x84, 0x4f,
	0x9c, 0x90, 0x4f, 0xa7, 0xe1, 0x39, 0x9f, 0x28, 0x26, 0x3e, 0x91, 0x83, 0xd0, 0x7f, 0x16, 0xa0,
	0x21, 0x28, 0xf5, 0x67, 0xbe, 0xb3, 0xca, 0xbd, 0x62, 0xc3, 0x15, 0xd2, 0x86, 0xdb, 0x06, 0x7d,
	0xcc, 0x4e, 0x88, 0xe5, 0xd2, 0x00, 0x7d, 0x68, 0xa9, 0xfd, 0x05, 0xd6, 0x1e, 0x0d, 0xd2, 0xfe,
	0x52, 0xca, 0xe3, 0x2f, 0xdb, 0xa0, 0x3b, 0xd3, 0x20, 0xb0, 0x84, 0x33, 0xae, 0x74, 0x30, 0x81,
	0x75, 0xc0, 0xb8, 0xf0, 0x16, 0xca, 0x2d, 0x1e, 0xb2, 0x09, 0xba, 0x98, 0x6e, 0x56, 0x28, 0xef,
	0x87, 0x0c, 0x83, 0xa6, 0x33, 0xe5, 0x21, 0x1b, 0x5b, 0x72, 0x1d, 0x55, 0x5c, 0x47, 0x5d, 0xc2,
	0xfa, 0xb8, 0x9a, 0x3b, 0x00, 0x38, 0x66, 0x05, 0x76, 0x48, 0xd0, 0xd9, 0x0a, 0x66, 0x0d, 0x21,
	0xa6, 0x1d, 0xe2, 0xb1, 0x89, 0x8b, 0xe5, 0xa1, 0x1d, 0x4e, 0x39, 0x86, 0x91, 0xa2, 0x09, 0x02,
	0xd4, 0x47, 0x48, 0x1e, 0x75, 0x9f, 0xc1, 0xb5, 0x2e, 0x9e, 0x27, 0x42, 0xe7, 0x26, 0x79, 0x31,
	0x25, 0x3c, 0x34, 0x5a, 0x50, 0x0c, 0x67, 0x13, 0x75, 0x12, 0x88, 0x9f, 0xc6, 0x2f, 0x42, 0xdd,
	0x25, 0x3c, 0xb4, 0x58, 0x80, 0xaa, 0x2d, 0xac, 0x58, 0x79, 0x4d, 0x20, 0x7e, 0x1a, 0x08, 0xe5,
	0xbe, 0x06, 0x35, 0xca, 0xad, 0xb1, 0xed, 0x4f, 0x6d, 0x2f, 0x3a, 0xdc, 0x28, 0x7f, 0x8c, 0xdf,
	0x9d, 0x3f, 0xd5, 0x40, 0x17, 0x8e, 0xd6, 0xf3, 0x87, 0xcc, 0x68, 0x42, 0x41, 0x19, 0xb8, 0x68,
	0x16, 0xe8, 0xdc, 0x06, 0x2c, 0x9c, 0x3f, 0x16, 0x03, 0x32, 0xb6, 0xa9, 0x2f, 0x8f, 0x45, 0x49,
	0x18, 0x24, 0x08, 0x8f, 0xc5, 0x37, 0x60, 0x8d, 0x9d, 0x90, 0xc0, 0xb3, 0x67, 0x96, 0xc3, 0xa6,
	0x7e, 0xa8, 0x4e, 0x87, 0x86, 0x02, 0x76, 0x05, 0x0c, 0x59, 0xd8, 0x22, 0x88, 0x09, 0x16, 0x65,
	0x79, 0xae, 0x48, 0x40, 0xcf, 0xed, 0x3c, 0x01, 0xd8, 0x09, 0xc3, 0xe0, 0x99, 0xed, 0x4d, 0x09,
	0x17, 0xa8, 0x43, 0x7a, 0x66, 0x9d, 0x88, 0x2f, 0x25, 0xa4, 0x3e, 0xa4, 0x67, 0x38, 0x2a, 0x98,
	0x4d, 0x48, 0xe0, 0x88, 0x53, 0x5a, 0x22, 0x48, 0x71, 0x1b, 0x0a, 0x88, 0x48, 0x9d, 0xbf, 0x28,
	0xca, 0xc5, 0xa2, 0x47, 0xbf, 0x06, 0x35, 0x36, 0x78, 0x2e, 0xce, 0xb4, 0xd8, 0xa9, 0x75, 0x09,
	0xe8, 0xb9, 0xc6, 0x2f, 0x47, 0x7b, 0x53, 0x46, 0xcd, 0x37, 0x96, 0xed, 0x4d, 0xfc, 0xc1, 0xf7,
	0xfd, 0x30, 0x98, 0x45, 0xdb, 0xf4, 0x1e, 0x34, 0x31, 0x84, 0xce, 0x27, 0x14, 0x0d, 0x01, 0xed,
	0x46, 0xda, 0xbb, 0x0f, 0x20, 0xd0, 0x2d, 0x3b, 0x0c, 0x03, 0xe1, 0xf4, 0x82, 0xcb, 0xdb, 0x2b,
	0xb9, 0x08, 0x4d, 0x28, 0x4e, 0xb5, 0x41, 0xf4, 0x9d, 0xc7, 0xb9, 0x4c, 0x80, 0x44, 0x4a, 0xe1,
	0x55, 0xc7, 0x64, 0x16, 0x79, 0xd5, 0x31, 0x99, 0x89, 0x38, 0x94, 0xa8, 0x6c, 0x49, 0x1c, 0x12,
	0xee, 0x61, 0x4a, 0xb4, 0x8f, 0x0a, 0x1f, 0x6a, 0x9d, 0xef, 0x41, 0x33, 0x2b, 0xd3, 0x02, 0xba,
	0xef, 0x65, 0xe9, 0x76, 0xe6, 0xe9, 0x26, 0xa6, 0x4d, 0x53, 0xb6, 0xe1, 0xaa, 0xa0, 0x7c, 0xdf,
	0x9b, 0xed, 0x11, 0x7e, 0x51, 0xec, 0x49, 0x6c, 0x54, 0xbc, 0x44, 0x94, 0xfc, 0xa1, 0x06, 0x37,
	0x05, 0x8f, 0xc3, 0xc0, 0x76, 0xa8, 0x3f, 0xda, 0x9d, 0x7a, 0x1e, 0x09, 0x23, 0x9f, 0x48, 0xcc,
	0xa6, 0xcd, 0x39, 0x7c, 0xc6, 0x55, 0x0b, 0x59, 0x57, 0x35, 0xd6, 0x41, 0x67, 0xa7, 0xbe, 0x1c,
	0x93, 0xe9, 0x51, 0x15, 0xbf, 0xe5, 0xbc, 0x01, 0xb2, 0x10, 0x63, 0x25, 0x39, 0x4f, 0x02, 0xf2,
	0xc5, 0xe2, 0xbf, 0xd3, 0xa0, 0x21, 0xa3, 0xc3, 0x4e, 0x18, 0xda, 0xce, 0xb1, 0xd8, 0x79, 0x36,
	0xfe, 0x92, 0xec, 0xa4, 0x52, 0x20, 0x02, 0xc9, 0xad, 0xe9, 0x92, 0x21, 0xf1, 0xdd, 0xb4, 0xac,
	0x10, 0x81, 0x7a, 0xae, 0xc8, 0x38, 0x63, 0x0a, 0xf2, 0xbc, 0x8f, 0xbc, 0xb4, 0x19, 0xc1, 0x45,
	0x7e, 0x20, 0xd7, 0x85, 0x79, 0x4a, 0x24, 0x7b, 0xd1, 0xac, 0xe2, 0x77, 0x4e, 0xd1, 0x0b, 0x50,
	0xc3, 0x8c, 0x06, 0xb5, 0xfb, 0xe5, 0xe5, 0x4e, 0x4b, 0x53, 0xcc, 0x4a, 0xb3, 0x09, 0x2d, 0x39,
	0x74, 0x42, 0xc9, 0xa9, 0xca, 0x5f, 0xa4, 0xc0, 0x4d, 0x84, 0x3f, 0xa3, 0xe4, 0x54, 0x26, 0x31,
	0x8b, 0x16, 0x5f, 0x5e, 0xb8, 0x78, 0x91, 0xf4, 0x22, 0x4d, 0x4e, 0x5e, 0xa8, 0x8c, 0x54, 0xf2,
	0xef, 0x93, 0x17, 0x98, 0x3f, 0xc8, 0xc1, 0xf8, 0xe0, 0x10, 0xd7, 0x25, 0x1c, 0xc6, 0x73, 0x23,
	0x16, 0xd6, 0x89, 0x52, 0x14, 0x29, 0x6c, 0x37, 0x97, 0xea, 0xfe, 0xb6, 0x04, 0xb0, 0x67, 0x8f,
	0xed, 0x11, 0xf9, 0xff, 0xa4, 0xbb, 0x78, 0xd1, 0x12, 0xa9, 0x9c, 0x5a, 0xb4, 0x44, 0xb8, 0x05,
	0x15, 0x17, 0xa5, 0x56, 0xfa, 0x52, 0x5f, 0xc6, 0x87, 0x50, 0x12, 0xa1, 0xae, 0x5d, 0xc5, 0x48,
	0x77, 0x6f, 0x3e, 0x16, 0x24, 0x2b, 0xc5, 0xb0, 0x20, 0xc3, 0x1c, 0xce, 0x10, 0xba, 0x92, 0x34,
	0x2c, 0x87, 0x79, 0x2c, 0x50, 0xaa, 0xac, 0x4b, 0x58, 0x57, 0x80, 0xc4, 0xd2, 0x28, 0xb7, 0x5c,
	0xe6, 0x8e, 0x08, 0x9e, 0xbf, 0xba, 0x59, 0xa5, 0x7c, 0x4f, 0x7c, 0xaa, 0xa1, 0x89, 0x1d, 0x04,
	0x33, 0x4c, 0xf1, 0x70, 0xe8, 0x40, 0x7c, 0x1a, 0xef, 0x82, 0x11, 0xab, 0x34, 0xd9, 0xf5, 0x75,
	0x24, 0x1f, 0x7b, 0x48, 0x1c, 0xb0, 0xdf, 0x05, 0x23, 0xd6, 0x6f, 0x82, 0x2d, 0xb3, 0xbd, 0x56,
	0x34, 0x12, 0x63, 0xdf, 0x01, 0xa0, 0xdc, 0x0a, 0xc8, 0xd0, 0x23, 0x4e, 0x88, 0x69, 0x9f, 0x6e,
	0xd6, 0x28, 0x37, 0x25, 0x20, 0x8f, 0xfd, 0x7f, 0x09, 0x6a, 0xb1, 0x26, 0x16, 0x04, 0xd7, 0x1b,
	0xe9, 0xe0, 0x5a, 0x4c, 0x07, 0xd0, 0x7f, 0x29, 0xc2, 0x9a, 0x88, 0x6e, 0x18, 0x5a, 0xd1, 0x77,
	0xd2, 0xb1, 0x49, 0x3b, 0x17, 0x9b, 0x96, 0xc7, 0xb4, 0x98, 0x47, 0x31, 0xc5, 0x43, 0x2c, 0x0d,
	0x7f, 0xc8, 0x74, 0x57, 0xba, 0x49, 0x0d, 0x21, 0x98, 0xeb, 0x7e, 0xac, 0x0c, 0x5d, 0x5e, 0x7e,
	0xa4, 0xc5, 0x92, 0x5d, 0x68, 0xeb, 0xca, 0x6a, 0x5b, 0x57, 0x97, 0xdb, 0x5a, 0xcf, 0xda, 0x7a,
	0x13, 0x5a, 0x6a, 0x9d, 0x89, 0xed, 0x64, 0xa6, 0xd6, 0x94, 0xf0, 0xd8, 0x72, 0x6f, 0xc1, 0x55,
	0xa9, 0xac, 0x04, 0x51, 0xde, 0x00, 0xd7, 0x10, 0x1c, 0xe3, 0xad, 0x83, 0x6e, 0xbb, 0x2a, 0xe7,
	0xaf, 0x4b, 0x66, 0xb6, 0x2b, 0xd3, 0xfd, 0xaf, 0xd2, 0xba, 0x7f, 0x59, 0x04, 0x7d, 0x8f, 0xd8,
	0x6e, 0xbe, 0xa0, 0x70, 0x1b, 0xaa, 0x2e, 0xb1, 0xdd, 0xc4, 0xb8, 0x15, 0xf1, 0xf9, 0x73, 0x0f,
	0x06, 0x77, 0xa1, 0xe4, 0x06, 0x6c, 0xa2, 0x82, 0x41, 0x23, 0xba, 0x92, 0xf6, 0x42, 0x32, 0x36,
	0x71, 0x64, 0xc9, 0xde, 0xd4, 0x2f, 0xb5, 0x37, 0x6b, 0x4b, 0xf6, 0x26, 0x26, 0xae, 0x27, 0xf4,
	0x44, 0x38, 0x19, 0x0f, 0x95, 0x75, 0x41, 0x82, 0xba, 0x8c, 0x87, 0x29, 0x04, 0xcc, 0x6c, 0xeb,
	0x69, 0x84, 0xbc, 0x85, 0xb0, 0x7f, 0xd0, 0xa0, 0x29, 0xec, 0xf4, 0x84, 0x85, 0x74, 0x88, 0x35,
	0xb0, 0xb4, 0x31, 0xb4, 0x8c, 0x31, 0x16, 0x8b, 0x5f, 0xc8, 0x27, 0x7e, 0xf1, 0x22, 0xf1, 0x4b,
	0xaf, 0x22, 0xfe, 0x6f, 0x41, 0xed, 0x80, 0xf1, 0xee, 0x91, 0xed, 0x8f, 0xc8, 0xb2, 0xfc, 0x4b,
	0x15, 0x03, 0x0a, 0x97, 0x28, 0x06, 0x14, 0x73, 0x5c, 0xee, 0x3a, 0x3f, 0xd0, 0xe0, 0xea, 0x61,
	0x60, 0xfb, 0xfc, 0x3e, 0x0b, 0xc6, 0x42, 0x7f, 0xce, 0xcf, 0x5a, 0x84, 0x3c, 0x1a, 0x7a, 0x06,
	0xd7, 0xba, 0x01, 0xb1, 0x43, 0xb2, 0x43, 0x83, 0xcf, 0x6c, 0x95, 0xe1, 0x6c, 0x40, 0xdd, 0xa6,
	0x81, 0x75, 0x6a, 0xcb, 0x9d, 0x25, 0x77, 0x74, 0xcd, 0x96, 0x18, 0xf9, 0x52, 0xa6, 0xcf, 0xc0,
	0xd8, 0x23, 0x3c, 0x0c, 0xd8, 0xec, 0xff, 0x98, 0xf0, 0xdf, 0x6b, 0xd0, 0xec, 0x4e, 0x83, 0x34,
	0xd5, 0x1e, 0xd4, 0x22, 0xaa, 0x51, 0x4d, 0xf6, 0xdd, 0x79, 0xc5, 0x64, 0xa7, 0x6c, 0xa9, 0xdf,
	0xea, 0x22, 0xa2, 0x2b, 0x09, 0x72, 0x69, 0xec, 0x63, 0x58, 0xcb, 0xcc, 0xbe, 0x54, 0xdc, 0xfb,
	0x81, 0x06, 0x60, 0xa2, 0x0b, 0xaf, 0xba, 0x12, 0x7c, 0x00, 0x10, 0xb9, 0xfe, 0x4c, 0x16, 0x48,
	0x9b, 0x19, 0x53, 0x4b, 0x0a, 0x87, 0xb3, 0x89, 0x59, 0x0b, 0xa2, 0x9f, 0x91, 0x13, 0x15, 0x2f,
	0x72, 0xa2, 0x1c, 0x4b, 0xfc, 0x43, 0x0d, 0xd6, 0x7e, 0x6d, 0x4a, 0x82, 0x59, 0x1c, 0xa2, 0x97,
	0x6e, 0xfa, 0xb9, 0x6d, 0x5c, 0xb8, 0x68, 0x1b, 0x17, 0x5f, 0x65, 0x1b, 0xff, 0x9e, 0x06, 0xad,
	0x78, 0x2b, 0x45, 0x75, 0x85, 0x9f, 0xf1, 0x76, 0xee, 0x03, 0xc8, 0x38, 0x22, 0x92, 0x6a, 0xac,
	0x75, 0xcb, 0x4e, 0x4d, 0x54, 0xc8, 0x76, 0xe3, 0x5a, 0x37, 0xc2, 0x65, 0x01, 0xbf, 0xb7, 0xba,
	0xf8, 0xd0, 0xf9, 0x83, 0x22, 0x34, 0x13, 0xaa, 0x71, 0x15, 0xfd, 0xcb, 0x53, 0x36, 0xbe, 0xa3,
	0xf2, 0x97, 0x22, 0x6e, 0x87, 0xcd, 0x73, 0xdb, 0x21, 0xc3, 0xf4, 0x5c, 0x02, 0xf3, 0x2b, 0x50,
	0x26, 0x2f, 0xa6, 0x74, 0xa2, 0x6e, 0xf4, 0xdf, 0xbc, 0x60, 0xfa, 0xbe, 0xc0, 0x55, 0xd5, 0x03,
	0x9c, 0x97, 0x6e, 0x5c, 0x94, 0x33, 0x8d, 0x8b, 0xaf, 0x32, 0xa9, 0xf8, 0x10, 0x20, 0x91, 0xe4,
	0x52, 0x33, 0x7f, 0xa4, 0x81, 0x91, 0xac, 0xa9, 0x4f, 0xbc, 0xe1, 0xe5, 0x6d, 0xa1, 0xaa, 0x48,
	0x4e, 0x6c, 0x0b, 0x09, 0xe8, 0xba, 0xab, 0xdb, 0x32, 0x1d, 0xd0, 0x5d, 0x1a, 0x10, 0x27, 0xf4,
	0x66, 0xea, 0x8c, 0x8b, 0xbf, 0xf3, 0x28, 0x6b, 0x04, 0x4d, 0x19, 0x0d, 0x62, 0x07, 0x5a, 0xb2,
	0x2f, 0x56, 0x7a, 0x4b, 0x0e, 0x46, 0x0d, 0x80, 0xfd, 0x33, 0x1a, 0xca, 0x42, 0x7b, 0xe7, 0x11,
	0x34, 0x93, 0xaf, 0x28, 0x42, 0x2c, 0x6e, 0x55, 0xe5, 0xa0, 0xbd, 0x0b, 0xfa, 0x4e, 0x4f, 0x95,
	0x19, 0xaf, 0x43, 0x99, 0x72, 0xcb, 0xa6, 0x48, 0x45, 0x37, 0x4b, 0x94, 0xef, 0xd0, 0x3c, 0x34,
	0x5e, 0xc0, 0xad, 0xfe, 0xcc, 0x77, 0x9e, 0x50, 0xe7, 0xd8, 0xb7, 0xc7, 0x44, 0x5a, 0x73, 0xb5,
	0x64, 0xaf, 0x41, 0xcd, 0xa7, 0xce, 0xb1, 0x95, 0xea, 0x12, 0xe9, 0x02, 0x80, 0x15, 0xf1, 0x79,
	0x96, 0xc5, 0xf3, 0x2c, 0xff, 0xaa, 0x00, 0xad, 0x87, 0xd8, 0x70, 0x48, 0x71, 0x4b, 0x3a, 0x15,
	0xda, 0xe5, 0x3b, 0x15, 0x85, 0xf9, 0x4e, 0x45, 0x5c, 0x98, 0x2e, 0xce, 0xb5, 0x75, 0xa2, 0x15,
	0x95, 0x32, 0x2b, 0xfa, 0x3a, 0xd4, 0x1d, 0x14, 0x45, 0x26, 0xf4, 0x2a, 0x95, 0x95, 0xa0, 0xa8,
	0x84, 0x2f, 0xfb, 0x39, 0x95, 0x74, 0x3f, 0x27, 0x2e, 0xec, 0x57, 0xd3, 0x85, 0xfd, 0x05, 0x5d,
	0x1e, 0xfd, 0x15, 0xbb, 0x3c, 0x04, 0xae, 0x3f, 0xe5, 0x24, 0x38, 0x14, 0xdc, 0x52, 0xba, 0x5a,
	0x5e, 0x11, 0x93, 0x42, 0x16, 0xd2, 0x42, 0xe6, 0x67, 0xf3, 0x48, 0x88, 0x9f, 0x8b, 0x8d, 0x5c,
	0x75, 0x21, 0xbd, 0xea, 0x1c, 0x6c, 0xd6, 0xe1, 0xf6, 0x03, 0x12, 0x9a, 0x9e, 0x32, 0x25, 0x63,
	0x63, 0xae, 0x0e, 0xa5, 0x8e, 0x0b, 0xed, 0xf3, 0x43, 0x7c, 0xc2, 0x7c, 0x4e, 0x8c, 0x6d, 0xd0,
	0x03, 0xcf, 0x0a, 0x04, 0x2c, 0xee, 0x1c, 0x2b, 0xdf, 0x48, 0x4f, 0x30, 0xab, 0x81, 0x87, 0x13,
	0xb1, 0x37, 0x34, 0x15, 0x41, 0x27, 0x72, 0x8c, 0x8a, 0x33, 0x0d, 0x7a, 0xee, 0x59, 0xe7, 0xfb,
	0x25, 0x00, 0xd3, 0xdb, 0xb3, 0x43, 0x1b, 0xd7, 0x77, 0x07, 0xc0, 0x9d, 0xfa, 0x23, 0xc2, 0xfc,
	0x54, 0x52, 0xa5, 0x20, 0x3d, 0x37, 0xc3, 0xb7, 0x90, 0x87, 0xef, 0x5d, 0x68, 0x08, 0xbe, 0x62,
	0x06, 0x32, 0x57, 0x67, 0xb6, 0x33, 0x0d, 0xc4, 0x78, 0xcf, 0x3d, 0xc3, 0x5e, 0x42, 0x68, 0x07,
	0x99, 0x56, 0x72, 0x0d, 0x21, 0x78, 0xa4, 0xaf, 0x83, 0x4e, 0x7c, 0x57, 0x0e, 0x4a, 0x1f, 0xac,
	0x12, 0xdf, 0xc5, 0xa1, 0x6d, 0x68, 0xb0, 0xa9, 0xb8, 0xc0, 0x06, 0x44, 0x9c, 0xab, 0xed, 0xca,
	0x82, 0xbb, 0x53, 0x1d, 0x31, 0x4c, 0x44, 0x30, 0xde, 0x84, 0x26, 0xf5, 0xc5, 0x45, 0xd6, 0x0e,
	0x42, 0x3a, 0xb4, 0x9d, 0x10, 0xaf, 0x5b, 0x45, 0x73, 0x0d, 0xa1, 0x3b, 0x0a, 0x28, 0x9c, 0x95,
	0x72, 0x6b, 0xe0, 0x31, 0xe7, 0xd8, 0xb2, 0x9d, 0x90, 0x32, 0x5f, 0xdd, 0x9d, 0xd7, 0x28, 0xdf,
	0x15, 0xd0, 0x1d, 0x04, 0x62, 0xb9, 0xdc, 0xb7, 0x06, 0x01, 0x4d, 0x8a, 0x2c, 0x3a, 0xf3, 0x77,
	0xf1, 0xdb, 0xd8, 0x4f, 0x27, 0x92, 0xb0, 0xf8, 0xe4, 0x4c, 0xf4, 0xbe, 0x34, 0x89, 0x5c, 0x07,
	0x7d, 0xca, 0x33, 0xb7, 0xae, 0xea, 0x94, 0xe7, 0x4e, 0x76, 0xbe, 0x54, 0x7e, 0xf9, 0x11, 0xdc,
	0xc4, 0xd5, 0xca, 0xee, 0xb8, 0x5c, 0x33, 0xfa, 0x48, 0x0e, 0xc6, 0xdf, 0x81, 0xdb, 0x4f, 0xfd,
	0xc1, 0xab, 0xce, 0xfe, 0x1b, 0x0d, 0x5a, 0x26, 0x3a, 0x50, 0x9f, 0xc4, 0x87, 0xc2, 0xbc, 0xb5,
	0xb5, 0x8b, 0xac, 0xfd, 0x0e, 0x5c, 0x63, 0x13, 0xc1, 0xd6, 0xf6, 0x12, 0x83, 0xcb, 0xc2, 0x78,
	0x2b, 0x1a, 0x88, 0x6d, 0xbe, 0x0e, 0xfa, 0x9c, 0x8f, 0x56, 0x03, 0xe5, 0xa0, 0x39, 0x04, 0x7e,
	0x07, 0x6e, 0x9b, 0x5e, 0x9f, 0x78, 0xc4, 0x09, 0x23, 0x8a, 0xa9, 0x96, 0x95, 0xa0, 0xa9, 0x34,
	0x4e, 0xdd, 0xb3, 0xce, 0x04, 0xda, 0xe7, 0x91, 0xd5, 0xbe, 0x3e, 0x87, 0x8d, 0x05, 0x0d, 0x85,
	0x95, 0x9c, 0xb6, 0x10, 0x81, 0xf2, 0x9d, 0x89, 0x03, 0x30, 0x76, 0x19, 0xe7, 0x7d, 0xe7, 0x88,
	0x8c, 0x49, 0xcf, 0xa7, 0xb2, 0xb2, 0x7f, 0xbe, 0x99, 0x76, 0x1b, 0xaa, 0x03, 0xc6, 0x79, 0xaa,
	0x36, 0x22, 0x3e, 0xf3, 0xf1, 0xf8, 0x47, 0x0d, 0x9a, 0x09, 0x93, 0xa8, 0xc8, 0xa6, 0x8e, 0x16,
	0xae, 0xba, 0xad, 0x55, 0x79, 0xb6, 0x60, 0xe3, 0x6a, 0x62, 0x73, 0x9e, 0x3c, 0xab, 0x29, 0x98,
	0xba, 0x00, 0xa0, 0x63, 0x2b, 0xc1, 0x8a, 0x89, 0x60, 0xef, 0x42, 0x65, 0xc2, 0xa8, 0x1f, 0x46,
	0x6d, 0xa1, 0xc5, 0xf9, 0xb5, 0xc2, 0x89, 0x94, 0x58, 0x4e, 0x94, 0x98, 0xab, 0xdf, 0x78, 0x3d,
	0x11, 0xbf, 0xeb, 0x51, 0xe7, 0x78, 0xf5, 0x81, 0xff, 0xa6, 0x14, 0x52, 0x5e, 0xa8, 0xae, 0xa7,
	0xe4, 0xc1, 0xb9, 0xe2, 0x3e, 0x85, 0x92, 0xe7, 0xe0, 0xfc, 0xe3, 0x12, 0x80, 0x38, 0xd0, 0x9f,
	0x4e, 0x5c, 0x3b, 0x24, 0xab, 0x1b, 0x2e, 0x51, 0xcd, 0xb8, 0xb0, 0xb8, 0x66, 0x9c, 0x90, 0x39,
	0x97, 0x86, 0x7f, 0x1c, 0xa5, 0xe1, 0x32, 0x8b, 0x7f, 0x73, 0xc5, 0xd4, 0xf3, 0x29, 0xf8, 0xb7,
	0xa3, 0xaa, 0x3f, 0x75, 0x23, 0x13, 0xac, 0xa7, 0x73, 0x11, 0x3c, 0xbc, 0x77, 0x7c, 0xb7, 0x1f,
	0x32, 0x9f, 0xa8, 0x86, 0x80, 0x30, 0xb3, 0x8c, 0xa4, 0xaa, 0xe4, 0x8f, 0x87, 0x28, 0x5a, 0x05,
	0x23, 0x29, 0xce, 0x51, 0xe5, 0x14, 0x03, 0x4a, 0x83, 0xe9, 0x70, 0x88, 0x11, 0xbc, 0x68, 0xe2,
	0x6f, 0xe3, 0x37, 0xc1, 0x40, 0xe6, 0x96, 0x47, 0x47, 0x47, 0xa1, 0x45, 0x86, 0x43, 0xa2, 0x02,
	0x76, 0xfd, 0xfd, 0xf7, 0x2e, 0x92, 0xfe, 0x91, 0x98, 0xb3, 0x8f, 0x53, 0xe4, 0x42, 0x5a, 0x64,
	0x0e, 0x6c, 0xb4, 0xa1, 0x3a, 0xb4, 0xf9, 0x51, 0x14, 0xdd, 0x8b, 0x66, 0xf4, 0xf9, 0xf3, 0xb8,
	0x34, 0x74, 0xe1, 0xe6, 0x42, 0xb9, 0x2f, 0x45, 0xe4, 0x77, 0x0b, 0x60, 0x08, 0x45, 0x08, 0xe1,
	0xa5, 0x32, 0x2e, 0x79, 0xf3, 0x48, 0x92, 0x9b, 0x42, 0x3a, 0xb9, 0x79, 0x3f, 0x4e, 0x43, 0xa5,
	0xef, 0x74, 0x96, 0x6b, 0x3f, 0xce, 0x45, 0xe3, 0xbc, 0xab, 0xb4, 0x30, 0x39, 0x2c, 0x5f, 0x90,
	0x1c, 0x56, 0x5e, 0x31, 0x39, 0xfc, 0x91, 0x06, 0x57, 0x31, 0x39, 0x96, 0xa6, 0xbc, 0xe4, 0xfa,
	0x53, 0x9b, 0xbd, 0x90, 0xd9, 0xec, 0xf9, 0x1a, 0xd8, 0x29, 0x8f, 0x2a, 0x65, 0x3c, 0x2a, 0x5f,
	0x91, 0x6b, 0xed, 0xd0, 0xe6, 0xc7, 0x8f, 0xe5, 0x23, 0x89, 0x20, 0x34, 0x36, 0xa1, 0xe4, 0x12,
	0x1e, 0xa2, 0xa8, 0xcb, 0x22, 0x1e, 0x62, 0x18, 0x5f, 0x83, 0xda, 0xd8, 0x3e, 0x33, 0x6d, 0x97,
	0x4e, 0xb9, 0x0a, 0xa6, 0x09, 0xa0, 0xf3, 0x1b, 0xd0, 0x8c, 0x08, 0xdf, 0xa7, 0x3e, 0x45, 0x85,
	0xe4, 0xa5, 0x9c, 0x43, 0xee, 0x35, 0xa8, 0x47, 0xe4, 0xf7, 0x7d, 0xb7, 0x33, 0x80, 0x5a, 0x9f,
	0x84, 0xf2, 0x74, 0x5b, 0x71, 0x7d, 0xe4, 0x88, 0x90, 0xea, 0xb0, 0x48, 0x40, 0xde, 0xe3, 0x4c,
	0xf0, 0x38, 0xb4, 0x83, 0x11, 0x59, 0xc5, 0x23, 0x44, 0x84, 0x14, 0x0f, 0x09, 0xc8, 0xc7, 0xe3,
	0xcf, 0x34, 0xb8, 0xfe, 0x60, 0x4a, 0x3d, 0x57, 0x1c, 0x0a, 0xb2, 0x15, 0x27, 0xae, 0x84, 0xf2,
	0x45, 0xa8, 0x37, 0xb4, 0x54, 0x11, 0x5f, 0x8b, 0x5e, 0x84, 0x7a, 0x43, 0x89, 0x24, 0x68, 0x87,
	0x2c, 0xb4, 0xbd, 0x08, 0x43, 0xee, 0xd2, 0x3a, 0xc2, 0x14, 0xca, 0x82, 0x67, 0x22, 0x85, 0xcc,
	0x33, 0x91, 0x1c, 0xf2, 0x3d, 0x86, 0x6b, 0xea, 0xa9, 0xdb, 0xfd, 0xa9, 0xe7, 0x3d, 0x3c, 0x58,
	0x75, 0x39, 0xc9, 0x41, 0xae, 0x0b, 0x20, 0xcc, 0x76, 0xc4, 0x4e, 0x1f, 0xb1, 0xd1, 0x32, 0x3a,
	0x1b, 0x50, 0x17, 0xd1, 0xfc, 0x88, 0x9d, 0x5a, 0x1e, 0x1b, 0xe1, 0xca, 0xb0, 0x85, 0xa7, 0xa6,
	0x75, 0x1e, 0xc9, 0xa7, 0x24, 0x22, 0xfc, 0x9c, 0x7f, 0x99, 0x52, 0xb8, 0xe8, 0x65, 0x4a, 0x61,
	0xee, 0x65, 0xca, 0x8f, 0x0b, 0x00, 0x9f, 0xca, 0xc7, 0x27, 0xd9, 0x87, 0x38, 0x35, 0x7c, 0x88,
	0x73, 0x1b, 0xaa, 0x51, 0xa7, 0x5a, 0x5d, 0x68, 0x8e, 0x64, 0x87, 0xfa, 0xc3, 0x4c, 0xb5, 0xea,
	0xdc, 0x11, 0x99, 0x90, 0x3c, 0x77, 0x44, 0xee, 0x43, 0x2d, 0x7e, 0x80, 0xa2, 0x4e, 0xb9, 0xcd,
	0x15, 0xd3, 0xa3, 0xb5, 0xaa, 0x94, 0x3d, 0x7a, 0x80, 0xb2, 0xf4, 0xf8, 0xa8, 0x5d, 0x14, 0xbf,
	0x9f, 0xca, 0x2e, 0xe5, 0xaa, 0xc9, 0x79, 0x1e, 0xa6, 0x88, 0xf9, 0x69, 0xb2, 0xff, 0x5d, 0x82,
	0xa6, 0x30, 0x11, 0x06, 0x51, 0xfe, 0x88, 0x8d, 0xb8, 0xf1, 0x6d, 0xd0, 0xa3, 0x8e, 0x91, 0x8a,
	0x02, 0x9d, 0xe5, 0x0b, 0x35, 0x63, 0x5c, 0x31, 0x2f, 0x6a, 0xbe, 0x2c, 0x7b, 0xc2, 0x92, 0x9e,
	0x17, 0xe1, 0xae, 0xea, 0xad, 0x89, 0x9c, 0x53, 0x28, 0x3d, 0x7e, 0x4c, 0x51, 0x11, 0x9f, 0xf2,
	0x30, 0xa2, 0xdc, 0x72, 0x02, 0xaa, 0x52, 0x86, 0x32, 0xe5, 0xdd, 0x80, 0x66, 0x9a, 0x9d, 0x95,
	0xe5, 0xcd, 0xce, 0x6a, 0xb6, 0xd9, 0xb9, 0x0e, 0xba, 0xc7, 0x46, 0xb2, 0x92, 0xa1, 0x4e, 0x7b,
	0x8f, 0x8d, 0xa2, 0xd6, 0xa4, 0xaa, 0x73, 0x48, 0xcd, 0xde, 0xc0, 0x1c, 0x44, 0xd5, 0x3e, 0xa4,
	0xbf, 0xf6, 0xd2, 0x8e, 0x71, 0x73, 0x71, 0x53, 0x20, 0xab, 0xe1, 0x65, 0xce, 0x61, 0xf4, 0x61,
	0xcd, 0xb1, 0x3d, 0x2b, 0x21, 0x77, 0x0b, 0xc9, 0x6d, 0x5f, 0x40, 0xae, 0x6b, 0x7b, 0x59, 0x8a,
	0x75, 0x27, 0x81, 0x7c, 0x55, 0x8e, 0xf3, 0x5d, 0x68, 0xcd, 0xf3, 0xbd, 0xc8, 0x9f, 0x0b, 0xe9,
	0xf9, 0xdf, 0x84, 0xe6, 0xbe, 0x3b, 0x22, 0x9f, 0x50, 0xcf, 0x93, 0xb7, 0xc0, 0x6c, 0x36, 0x5d,
	0x4c, 0x0e, 0xd8, 0x8e, 0x01, 0xad, 0x4f, 0x08, 0x99, 0xec, 0x78, 0x34, 0x7e, 0xec, 0xd7, 0xb9,
	0x0e, 0xd7, 0x52, 0x30, 0x79, 0x41, 0xea, 0x74, 0xe1, 0xda, 0x5e, 0x60, 0x4b, 0xd5, 0x7c, 0x3a,
	0x21, 0xfe, 0xaa, 0xb8, 0x27, 0x5f, 0x38, 0xb2, 0x89, 0x7a, 0xda, 0x8e, 0x2f, 0x1c, 0xc5, 0x9c,
	0xce, 0x9f, 0x6b, 0x60, 0x20, 0x15, 0x21, 0x9a, 0x19, 0xd7, 0x76, 0x54, 0xb9, 0x5f, 0x5b, 0x71,
	0xc5, 0xc0, 0x72, 0xff, 0x2d, 0xa8, 0x78, 0xc4, 0x1f, 0x85, 0x47, 0x6a, 0xc9, 0xea, 0x4b, 0x68,
	0xe2, 0x94, 0xba, 0xe1, 0x51, 0x54, 0x60, 0xc3, 0x8f, 0xe8, 0x36, 0x23, 0x9c, 0xbb, 0x9c, 0xfb,
	0x4e, 0xf0, 0x5d, 0x68, 0x08, 0x0f, 0xb8, 0x2f, 0xd2, 0xc1, 0x15, 0x11, 0x79, 0xe9, 0x0a, 0xff,
	0x59, 0x83, 0x86, 0x48, 0x9c, 0x0e, 0x4e, 0x57, 0xbf, 0x85, 0x5e, 0x1a, 0x45, 0x3f, 0xca, 0x44,
	0xd1, 0xb7, 0xce, 0xb9, 0x67, 0x8a, 0xf6, 0xa2, 0x27, 0x0b, 0x5f, 0x59, 0x5d, 0xfe, 0xf7, 0x35,
	0x58, 0x13, 0x07, 0x71, 0x5f, 0xb6, 0xd4, 0x87, 0x2c, 0x13, 0x5b, 0xb4, 0x6c, 0x6c, 0xb9, 0x05,
	0x15, 0xf5, 0x04, 0x55, 0x2d, 0x4e, 0x7e, 0x65, 0x9e, 0x21, 0x15, 0xb3, 0xcf, 0x90, 0xee, 0x41,
	0x33, 0x1a, 0xb2, 0x5c, 0xe2, 0x85, 0x76, 0xf4, 0x44, 0x53, 0x21, 0xec, 0x09, 0x58, 0xe7, 0x7f,
	0xd2, 0x52, 0xbc, 0x92, 0x7e, 0x77, 0xa0, 0x82, 0x14, 0xa3, 0x9c, 0xfa, 0x5c, 0x5b, 0x24, 0x43,
	0x7e, 0x4b, 0x86, 0x02, 0xa9, 0x64, 0x35, 0x31, 0x8f, 0x9a, 0xbf, 0x07, 0xf5, 0xd4, 0xcc, 0x05,
	0x8a, 0xfe, 0x20, 0x1b, 0x16, 0xee, 0x2c, 0x95, 0x62, 0xfe, 0xb5, 0xe3, 0x3f, 0x69, 0xd0, 0xc0,
	0xd4, 0x28, 0xd5, 0xd5, 0x8b, 0x6a, 0x07, 0x5a, 0xa6, 0x76, 0xb0, 0xb2, 0x59, 0xf0, 0x3a, 0x94,
	0x69, 0x48, 0xc6, 0x91, 0x16, 0xb2, 0xd5, 0x1c, 0x39, 0x64, 0xbc, 0x0d, 0x3a, 0x52, 0x4e, 0x9e,
	0xd9, 0xc7, 0x68, 0xb2, 0xad, 0x26, 0x46, 0x0f, 0x18, 0x16, 0x15, 0x84, 0xa8, 0x99, 0x87, 0xb3,
	0x12, 0x90, 0x2f, 0x09, 0x32, 0xa0, 0x85, 0x8d, 0x08, 0xc6, 0xf9, 0x23, 0xdb, 0xc7, 0x65, 0x75,
	0x3e, 0x83, 0xab, 0xe2, 0xdb, 0x24, 0xc3, 0x80, 0xf0, 0xa3, 0xa8, 0x80, 0x15, 0xc8, 0xcf, 0xf4,
	0xdf, 0x86, 0xea, 0x0a, 0x96, 0x37, 0x81, 0xfb, 0xbe, 0x06, 0x0d, 0xb1, 0xca, 0xbd, 0x80, 0x4d,
	0x56, 0x57, 0x1a, 0xde, 0x06, 0xdd, 0x0d, 0xd8, 0xc4, 0x4a, 0x5a, 0x91, 0x73, 0xeb, 0x17, 0xa3,
	0x62, 0xfd, 0x79, 0x94, 0x99, 0x43, 0xb2, 0xa9, 0xb4, 0xec, 0xc3, 0xa8, 0x25, 0xfe, 0x26, 0x34,
	0x55, 0xba, 0xca, 0x89, 0xc3, 0x7c, 0x2c, 0xe6, 0x88, 0xf8, 0xb6, 0x26, 0xa1, 0x7d, 0x09, 0x54,
	0x6f, 0xaa, 0x87, 0x78, 0xc5, 0x50, 0xd1, 0x48, 0xa7, 0x5c, 0x5d, 0x39, 0xf2, 0xbc, 0xee, 0x2b,
	0xc8, 0x2a, 0x95, 0xe0, 0x2b, 0x67, 0x45, 0x05, 0x69, 0x91, 0x74, 0x4e, 0x1d, 0x87, 0x70, 0xae,
	0x1a, 0x39, 0x22, 0xe7, 0x94, 0x00, 0xbc, 0x99, 0xd9, 0xdc, 0x92, 0x01, 0x00, 0x17, 0x2f, 0x59,
	0x37, 0x8e, 0x6c, 0x2e, 0xa2, 0x7b, 0x0f, 0x57, 0xfd, 0x0e, 0x40, 0x0a, 0x63, 0x91, 0x7a, 0xd0,
	0x73, 0x24, 0xb2, 0x22, 0xf9, 0x9c, 0x51, 0x5f, 0x4d, 0x28, 0xc5, 0x24, 0x7f, 0x95, 0x51, 0x3f,
	0x26, 0x99, 0xc2, 0x28, 0x2f, 0x22, 0xf9, 0x3c, 0x46, 0xbe, 0x05, 0x15, 0xe9, 0x88, 0x98, 0xb2,
	0xd4, 0x4c, 0xf5, 0x65, 0xdc, 0x85, 0x86, 0x58, 0x9c, 0xb8, 0x50, 0xe0, 0xb5, 0x57, 0x66, 0x2d,
	0x40, 0x79, 0x9f, 0x78, 0xc3, 0x4f, 0x72, 0xde, 0x79, 0xff, 0x5d, 0x83, 0x5b, 0x07, 0x9e, 0xed,
	0x93, 0x3d, 0x59, 0xa6, 0x97, 0xcd, 0x2f, 0x54, 0x5e, 0x12, 0x00, 0xb5, 0x4c, 0x00, 0xfc, 0x06,
	0x34, 0xa8, 0x2b, 0xd2, 0x6f, 0x55, 0x94, 0x51, 0x97, 0x14, 0x84, 0xa9, 0x92, 0xcc, 0x3a, 0xe8,
	0xb6, 0xe7, 0xa5, 0x1b, 0xed, 0x55, 0xdb, 0xf3, 0xa2, 0x92, 0x7c, 0x5c, 0x93, 0x2e, 0x65, 0x6b,
	0xd2, 0xc2, 0x09, 0x90, 0xb0, 0x3f, 0x1d, 0xab, 0x4b, 0xbe, 0x8e, 0x80, 0x27, 0xd3, 0xb1, 0x98,
	0x77, 0x6a, 0xd3, 0xd0, 0x22, 0xbe, 0xab, 0x2e, 0xf8, 0x55, 0xf1, 0xbd, 0xef, 0xe7, 0xda, 0x9d,
	0xb7, 0xe0, 0x86, 0xd8, 0x9d, 0xe9, 0x95, 0xe2, 0x0e, 0xfd, 0x6d, 0xb8, 0xf9, 0x94, 0x93, 0x60,
	0x27, 0x5d, 0x2a, 0x58, 0x15, 0x92, 0x37, 0xa1, 0x15, 0x57, 0x1b, 0x88, 0x2a, 0x37, 0x14, 0xd4,
	0x5b, 0x57, 0x45, 0x83, 0xe4, 0xae, 0x37, 0x84, 0x50, 0x78, 0xf0, 0xb8, 0xf3, 0x10, 0xae, 0xcb,
	0x87, 0x2f, 0xea, 0x4a, 0xf6, 0x84, 0xd8, 0xc1, 0x60, 0x26, 0x5c, 0x77, 0x2c, 0x01, 0xa9, 0x5e,
	0x8a, 0x82, 0xc8, 0xff, 0x94, 0x85, 0x24, 0x7e, 0xe7, 0x80, 0xbf, 0x3b, 0xf7, 0xa0, 0xd6, 0xf5,
	0x18, 0x27, 0x5d, 0xe6, 0xfb, 0xf3, 0x11, 0xa1, 0x18, 0x45, 0x84, 0x5f, 0x38, 0x04, 0x3d, 0xaa,
	0x32, 0x1a, 0xd7, 0xe1, 0x6a, 0xf4, 0xfb, 0x80, 0x04, 0x43, 0xe2, 0x84, 0xad, 0x2b, 0x46, 0x0b,
	0x9f, 0x47, 0x23, 0xf0, 0x01, 0x63, 0x6e, 0x4b, 0x33, 0xae, 0x42, 0x3d, 0x82, 0xec, 0xda, 0x6e,
	0xab, 0x90, 0x46, 0x79, 0x4c, 0x39, 0x6f, 0x15, 0x77, 0x0f, 0x7e, 0xfa, 0x6f, 0x1b, 0x57, 0xfe,
	0xfa, 0xe5, 0x86, 0xf6, 0xf9, 0xcb, 0x0d, 0xed, 0x27, 0x2f, 0x37, 0xb4, 0x7f, 0x7d, 0xb9, 0xa1,
	0xfd, 0xc7, 0xcb, 0x8d, 0x2b, 0xff, 0xf5, 0x72, 0x43, 0xfb, 0xa3, 0x2f, 0x36, 0xae, 0x7c, 0xfe,
	0xc5, 0x86, 0xf6, 0x93, 0x2f, 0x36, 0xae, 0xfc, 0xf4, 0x8b, 0x8d, 0x2b, 0xbf, 0xfe, 0xba, 0xc3,
	0xa8, 0xff, 0x2d, 0xa9, 0x8b, 0x6d, 0x87, 0x8d, 0xc7, 0xcc, 0xdf, 0x9e, 0xfb, 0x17, 0xe8, 0xa0,
	0x82, 0x80, 0x0f, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xce, 0x07, 0xeb, 0x9e, 0x3a, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_Vec2.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_Ping.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_Pong.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_EdgeAuth.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ManyPushMsg.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_AuthTCPPushToServer.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BinDataVersionPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_PlayerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_MonsterPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_MoveOutPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_MoveSyncPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ClientMoveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BuffInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_AttrValues.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BuffPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BuffFlyDescPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BuffTracingBulletPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ClientAttack.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SkillPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_DamagePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BuffValuePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_DeadPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_DeadNotifyPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_PosChange.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_TransFormNotice.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_CreateAirWallPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_DestroyAirWallPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_CurAirWallPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_RevivePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_QueryDeadPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_TransFormRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ChangeHero.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ChangeHeroPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ChangeHeroSelfPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ReviveHeroPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ExitBattle.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ExitBattlePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_AIStatus.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SyncNicknameChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_HeroesChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_UserTitleChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_UserLevelChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_GetRlBattleRoomsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_GetRlBattleRoomsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_RlDataPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BlockPlayerActionPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_UnblockPlayerActionPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_RlRoomSettlePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_RlSelectArtifactRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_RlSelectArtifactResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BossSchemeInitPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BossSchemePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BossSchemeClickPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_HeroUpdate.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_HeroAttrUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_HeroFashionPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_TaskMoveStart.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_TaskMoveFinish.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_TaskMoveEnd.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SetSelect.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SetTarget.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_GuildBossDamageSync.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_MonsterFullHPPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SetShowLog.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BuffAttr.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ObjectInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ShowSkillsLogs.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_EdgeKillPlayer.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_KeepAliveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_KeepAliveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_DrawSkillOpenPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_DrawSKillRangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ShowFightLog.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SoulPwerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SyncSkillInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_SyncSkillPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BossDeadPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ExitBossLandPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BossRefreshPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ItemDropPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BossHallPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_BossHallFinishPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_PlaneDungeonStatusPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_ExitPlaneDungeonPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_UserAutoSoulSkillPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_GM.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_GM_CreateMonsterNearby.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNSNB_GM_CloseConn.Get().(proto.Message)
	})
}

var poolNSNB = &sync.Pool{New: func() interface{} { return &NSNB{} }}

func (m *NSNB) ReleasePool() { m.Reset(); poolNSNB.Put(m); m = nil }

var poolNSNB_Vec2 = &sync.Pool{New: func() interface{} { return &NSNB_Vec2{} }}

func (m *NSNB_Vec2) ReleasePool() { m.Reset(); poolNSNB_Vec2.Put(m); m = nil }

var poolNSNB_Ping = &sync.Pool{New: func() interface{} { return &NSNB_Ping{} }}

func (m *NSNB_Ping) ReleasePool() { m.Reset(); poolNSNB_Ping.Put(m); m = nil }

var poolNSNB_Pong = &sync.Pool{New: func() interface{} { return &NSNB_Pong{} }}

func (m *NSNB_Pong) ReleasePool() { m.Reset(); poolNSNB_Pong.Put(m); m = nil }

var poolNSNB_EdgeAuth = &sync.Pool{New: func() interface{} { return &NSNB_EdgeAuth{} }}

func (m *NSNB_EdgeAuth) ReleasePool() { m.Reset(); poolNSNB_EdgeAuth.Put(m); m = nil }

var poolNSNB_ManyPushMsg = &sync.Pool{New: func() interface{} { return &NSNB_ManyPushMsg{} }}

func (m *NSNB_ManyPushMsg) ReleasePool() { m.Reset(); poolNSNB_ManyPushMsg.Put(m); m = nil }

var poolNSNB_AuthTCPPushToServer = &sync.Pool{New: func() interface{} { return &NSNB_AuthTCPPushToServer{} }}

func (m *NSNB_AuthTCPPushToServer) ReleasePool() {
	m.Reset()
	poolNSNB_AuthTCPPushToServer.Put(m)
	m = nil
}

var poolNSNB_BinDataVersionPush = &sync.Pool{New: func() interface{} { return &NSNB_BinDataVersionPush{} }}

func (m *NSNB_BinDataVersionPush) ReleasePool() {
	m.Reset()
	poolNSNB_BinDataVersionPush.Put(m)
	m = nil
}

var poolNSNB_PlayerPush = &sync.Pool{New: func() interface{} { return &NSNB_PlayerPush{} }}

func (m *NSNB_PlayerPush) ReleasePool() { m.Reset(); poolNSNB_PlayerPush.Put(m); m = nil }

var poolNSNB_MonsterPush = &sync.Pool{New: func() interface{} { return &NSNB_MonsterPush{} }}

func (m *NSNB_MonsterPush) ReleasePool() { m.Reset(); poolNSNB_MonsterPush.Put(m); m = nil }

var poolNSNB_MoveOutPush = &sync.Pool{New: func() interface{} { return &NSNB_MoveOutPush{} }}

func (m *NSNB_MoveOutPush) ReleasePool() { m.Reset(); poolNSNB_MoveOutPush.Put(m); m = nil }

var poolNSNB_MoveSyncPush = &sync.Pool{New: func() interface{} { return &NSNB_MoveSyncPush{} }}

func (m *NSNB_MoveSyncPush) ReleasePool() { m.Reset(); poolNSNB_MoveSyncPush.Put(m); m = nil }

var poolNSNB_ClientMoveRequest = &sync.Pool{New: func() interface{} { return &NSNB_ClientMoveRequest{} }}

func (m *NSNB_ClientMoveRequest) ReleasePool() { m.Reset(); poolNSNB_ClientMoveRequest.Put(m); m = nil }

var poolNSNB_BuffInfo = &sync.Pool{New: func() interface{} { return &NSNB_BuffInfo{} }}

func (m *NSNB_BuffInfo) ReleasePool() { m.Reset(); poolNSNB_BuffInfo.Put(m); m = nil }

var poolNSNB_AttrValues = &sync.Pool{New: func() interface{} { return &NSNB_AttrValues{} }}

func (m *NSNB_AttrValues) ReleasePool() { m.Reset(); poolNSNB_AttrValues.Put(m); m = nil }

var poolNSNB_BuffPush = &sync.Pool{New: func() interface{} { return &NSNB_BuffPush{} }}

func (m *NSNB_BuffPush) ReleasePool() { m.Reset(); poolNSNB_BuffPush.Put(m); m = nil }

var poolNSNB_BuffFlyDescPush = &sync.Pool{New: func() interface{} { return &NSNB_BuffFlyDescPush{} }}

func (m *NSNB_BuffFlyDescPush) ReleasePool() { m.Reset(); poolNSNB_BuffFlyDescPush.Put(m); m = nil }

var poolNSNB_BuffTracingBulletPush = &sync.Pool{New: func() interface{} { return &NSNB_BuffTracingBulletPush{} }}

func (m *NSNB_BuffTracingBulletPush) ReleasePool() {
	m.Reset()
	poolNSNB_BuffTracingBulletPush.Put(m)
	m = nil
}

var poolNSNB_ClientAttack = &sync.Pool{New: func() interface{} { return &NSNB_ClientAttack{} }}

func (m *NSNB_ClientAttack) ReleasePool() { m.Reset(); poolNSNB_ClientAttack.Put(m); m = nil }

var poolNSNB_SkillPush = &sync.Pool{New: func() interface{} { return &NSNB_SkillPush{} }}

func (m *NSNB_SkillPush) ReleasePool() { m.Reset(); poolNSNB_SkillPush.Put(m); m = nil }

var poolNSNB_DamagePush = &sync.Pool{New: func() interface{} { return &NSNB_DamagePush{} }}

func (m *NSNB_DamagePush) ReleasePool() { m.Reset(); poolNSNB_DamagePush.Put(m); m = nil }

var poolNSNB_BuffValuePush = &sync.Pool{New: func() interface{} { return &NSNB_BuffValuePush{} }}

func (m *NSNB_BuffValuePush) ReleasePool() { m.Reset(); poolNSNB_BuffValuePush.Put(m); m = nil }

var poolNSNB_DeadPush = &sync.Pool{New: func() interface{} { return &NSNB_DeadPush{} }}

func (m *NSNB_DeadPush) ReleasePool() { m.Reset(); poolNSNB_DeadPush.Put(m); m = nil }

var poolNSNB_DeadNotifyPush = &sync.Pool{New: func() interface{} { return &NSNB_DeadNotifyPush{} }}

func (m *NSNB_DeadNotifyPush) ReleasePool() { m.Reset(); poolNSNB_DeadNotifyPush.Put(m); m = nil }

var poolNSNB_PosChange = &sync.Pool{New: func() interface{} { return &NSNB_PosChange{} }}

func (m *NSNB_PosChange) ReleasePool() { m.Reset(); poolNSNB_PosChange.Put(m); m = nil }

var poolNSNB_TransFormNotice = &sync.Pool{New: func() interface{} { return &NSNB_TransFormNotice{} }}

func (m *NSNB_TransFormNotice) ReleasePool() { m.Reset(); poolNSNB_TransFormNotice.Put(m); m = nil }

var poolNSNB_CreateAirWallPush = &sync.Pool{New: func() interface{} { return &NSNB_CreateAirWallPush{} }}

func (m *NSNB_CreateAirWallPush) ReleasePool() { m.Reset(); poolNSNB_CreateAirWallPush.Put(m); m = nil }

var poolNSNB_DestroyAirWallPush = &sync.Pool{New: func() interface{} { return &NSNB_DestroyAirWallPush{} }}

func (m *NSNB_DestroyAirWallPush) ReleasePool() {
	m.Reset()
	poolNSNB_DestroyAirWallPush.Put(m)
	m = nil
}

var poolNSNB_CurAirWallPush = &sync.Pool{New: func() interface{} { return &NSNB_CurAirWallPush{} }}

func (m *NSNB_CurAirWallPush) ReleasePool() { m.Reset(); poolNSNB_CurAirWallPush.Put(m); m = nil }

var poolNSNB_RevivePush = &sync.Pool{New: func() interface{} { return &NSNB_RevivePush{} }}

func (m *NSNB_RevivePush) ReleasePool() { m.Reset(); poolNSNB_RevivePush.Put(m); m = nil }

var poolNSNB_QueryDeadPush = &sync.Pool{New: func() interface{} { return &NSNB_QueryDeadPush{} }}

func (m *NSNB_QueryDeadPush) ReleasePool() { m.Reset(); poolNSNB_QueryDeadPush.Put(m); m = nil }

var poolNSNB_TransFormRequest = &sync.Pool{New: func() interface{} { return &NSNB_TransFormRequest{} }}

func (m *NSNB_TransFormRequest) ReleasePool() { m.Reset(); poolNSNB_TransFormRequest.Put(m); m = nil }

var poolNSNB_ChangeHero = &sync.Pool{New: func() interface{} { return &NSNB_ChangeHero{} }}

func (m *NSNB_ChangeHero) ReleasePool() { m.Reset(); poolNSNB_ChangeHero.Put(m); m = nil }

var poolNSNB_ChangeHeroPush = &sync.Pool{New: func() interface{} { return &NSNB_ChangeHeroPush{} }}

func (m *NSNB_ChangeHeroPush) ReleasePool() { m.Reset(); poolNSNB_ChangeHeroPush.Put(m); m = nil }

var poolNSNB_ChangeHeroSelfPush = &sync.Pool{New: func() interface{} { return &NSNB_ChangeHeroSelfPush{} }}

func (m *NSNB_ChangeHeroSelfPush) ReleasePool() {
	m.Reset()
	poolNSNB_ChangeHeroSelfPush.Put(m)
	m = nil
}

var poolNSNB_ReviveHeroPush = &sync.Pool{New: func() interface{} { return &NSNB_ReviveHeroPush{} }}

func (m *NSNB_ReviveHeroPush) ReleasePool() { m.Reset(); poolNSNB_ReviveHeroPush.Put(m); m = nil }

var poolNSNB_ExitBattle = &sync.Pool{New: func() interface{} { return &NSNB_ExitBattle{} }}

func (m *NSNB_ExitBattle) ReleasePool() { m.Reset(); poolNSNB_ExitBattle.Put(m); m = nil }

var poolNSNB_ExitBattlePush = &sync.Pool{New: func() interface{} { return &NSNB_ExitBattlePush{} }}

func (m *NSNB_ExitBattlePush) ReleasePool() { m.Reset(); poolNSNB_ExitBattlePush.Put(m); m = nil }

var poolNSNB_AIStatus = &sync.Pool{New: func() interface{} { return &NSNB_AIStatus{} }}

func (m *NSNB_AIStatus) ReleasePool() { m.Reset(); poolNSNB_AIStatus.Put(m); m = nil }

var poolNSNB_SyncNicknameChangePush = &sync.Pool{New: func() interface{} { return &NSNB_SyncNicknameChangePush{} }}

func (m *NSNB_SyncNicknameChangePush) ReleasePool() {
	m.Reset()
	poolNSNB_SyncNicknameChangePush.Put(m)
	m = nil
}

var poolNSNB_HeroesChangePush = &sync.Pool{New: func() interface{} { return &NSNB_HeroesChangePush{} }}

func (m *NSNB_HeroesChangePush) ReleasePool() { m.Reset(); poolNSNB_HeroesChangePush.Put(m); m = nil }

var poolNSNB_UserTitleChangePush = &sync.Pool{New: func() interface{} { return &NSNB_UserTitleChangePush{} }}

func (m *NSNB_UserTitleChangePush) ReleasePool() {
	m.Reset()
	poolNSNB_UserTitleChangePush.Put(m)
	m = nil
}

var poolNSNB_UserLevelChangePush = &sync.Pool{New: func() interface{} { return &NSNB_UserLevelChangePush{} }}

func (m *NSNB_UserLevelChangePush) ReleasePool() {
	m.Reset()
	poolNSNB_UserLevelChangePush.Put(m)
	m = nil
}

var poolNSNB_GetRlBattleRoomsRequest = &sync.Pool{New: func() interface{} { return &NSNB_GetRlBattleRoomsRequest{} }}

func (m *NSNB_GetRlBattleRoomsRequest) ReleasePool() {
	m.Reset()
	poolNSNB_GetRlBattleRoomsRequest.Put(m)
	m = nil
}

var poolNSNB_GetRlBattleRoomsResponse = &sync.Pool{New: func() interface{} { return &NSNB_GetRlBattleRoomsResponse{} }}

func (m *NSNB_GetRlBattleRoomsResponse) ReleasePool() {
	m.Reset()
	poolNSNB_GetRlBattleRoomsResponse.Put(m)
	m = nil
}

var poolNSNB_RlDataPush = &sync.Pool{New: func() interface{} { return &NSNB_RlDataPush{} }}

func (m *NSNB_RlDataPush) ReleasePool() { m.Reset(); poolNSNB_RlDataPush.Put(m); m = nil }

var poolNSNB_BlockPlayerActionPush = &sync.Pool{New: func() interface{} { return &NSNB_BlockPlayerActionPush{} }}

func (m *NSNB_BlockPlayerActionPush) ReleasePool() {
	m.Reset()
	poolNSNB_BlockPlayerActionPush.Put(m)
	m = nil
}

var poolNSNB_UnblockPlayerActionPush = &sync.Pool{New: func() interface{} { return &NSNB_UnblockPlayerActionPush{} }}

func (m *NSNB_UnblockPlayerActionPush) ReleasePool() {
	m.Reset()
	poolNSNB_UnblockPlayerActionPush.Put(m)
	m = nil
}

var poolNSNB_RlRoomSettlePush = &sync.Pool{New: func() interface{} { return &NSNB_RlRoomSettlePush{} }}

func (m *NSNB_RlRoomSettlePush) ReleasePool() { m.Reset(); poolNSNB_RlRoomSettlePush.Put(m); m = nil }

var poolNSNB_RlSelectArtifactRequest = &sync.Pool{New: func() interface{} { return &NSNB_RlSelectArtifactRequest{} }}

func (m *NSNB_RlSelectArtifactRequest) ReleasePool() {
	m.Reset()
	poolNSNB_RlSelectArtifactRequest.Put(m)
	m = nil
}

var poolNSNB_RlSelectArtifactResponse = &sync.Pool{New: func() interface{} { return &NSNB_RlSelectArtifactResponse{} }}

func (m *NSNB_RlSelectArtifactResponse) ReleasePool() {
	m.Reset()
	poolNSNB_RlSelectArtifactResponse.Put(m)
	m = nil
}

var poolNSNB_BossSchemeInitPush = &sync.Pool{New: func() interface{} { return &NSNB_BossSchemeInitPush{} }}

func (m *NSNB_BossSchemeInitPush) ReleasePool() {
	m.Reset()
	poolNSNB_BossSchemeInitPush.Put(m)
	m = nil
}

var poolNSNB_BossSchemePush = &sync.Pool{New: func() interface{} { return &NSNB_BossSchemePush{} }}

func (m *NSNB_BossSchemePush) ReleasePool() { m.Reset(); poolNSNB_BossSchemePush.Put(m); m = nil }

var poolNSNB_BossSchemeClickPush = &sync.Pool{New: func() interface{} { return &NSNB_BossSchemeClickPush{} }}

func (m *NSNB_BossSchemeClickPush) ReleasePool() {
	m.Reset()
	poolNSNB_BossSchemeClickPush.Put(m)
	m = nil
}

var poolNSNB_HeroUpdate = &sync.Pool{New: func() interface{} { return &NSNB_HeroUpdate{} }}

func (m *NSNB_HeroUpdate) ReleasePool() { m.Reset(); poolNSNB_HeroUpdate.Put(m); m = nil }

var poolNSNB_HeroAttrUpdatePush = &sync.Pool{New: func() interface{} { return &NSNB_HeroAttrUpdatePush{} }}

func (m *NSNB_HeroAttrUpdatePush) ReleasePool() {
	m.Reset()
	poolNSNB_HeroAttrUpdatePush.Put(m)
	m = nil
}

var poolNSNB_HeroFashionPush = &sync.Pool{New: func() interface{} { return &NSNB_HeroFashionPush{} }}

func (m *NSNB_HeroFashionPush) ReleasePool() { m.Reset(); poolNSNB_HeroFashionPush.Put(m); m = nil }

var poolNSNB_TaskMoveStart = &sync.Pool{New: func() interface{} { return &NSNB_TaskMoveStart{} }}

func (m *NSNB_TaskMoveStart) ReleasePool() { m.Reset(); poolNSNB_TaskMoveStart.Put(m); m = nil }

var poolNSNB_TaskMoveFinish = &sync.Pool{New: func() interface{} { return &NSNB_TaskMoveFinish{} }}

func (m *NSNB_TaskMoveFinish) ReleasePool() { m.Reset(); poolNSNB_TaskMoveFinish.Put(m); m = nil }

var poolNSNB_TaskMoveEnd = &sync.Pool{New: func() interface{} { return &NSNB_TaskMoveEnd{} }}

func (m *NSNB_TaskMoveEnd) ReleasePool() { m.Reset(); poolNSNB_TaskMoveEnd.Put(m); m = nil }

var poolNSNB_SetSelect = &sync.Pool{New: func() interface{} { return &NSNB_SetSelect{} }}

func (m *NSNB_SetSelect) ReleasePool() { m.Reset(); poolNSNB_SetSelect.Put(m); m = nil }

var poolNSNB_SetTarget = &sync.Pool{New: func() interface{} { return &NSNB_SetTarget{} }}

func (m *NSNB_SetTarget) ReleasePool() { m.Reset(); poolNSNB_SetTarget.Put(m); m = nil }

var poolNSNB_GuildBossDamageSync = &sync.Pool{New: func() interface{} { return &NSNB_GuildBossDamageSync{} }}

func (m *NSNB_GuildBossDamageSync) ReleasePool() {
	m.Reset()
	poolNSNB_GuildBossDamageSync.Put(m)
	m = nil
}

var poolNSNB_MonsterFullHPPush = &sync.Pool{New: func() interface{} { return &NSNB_MonsterFullHPPush{} }}

func (m *NSNB_MonsterFullHPPush) ReleasePool() { m.Reset(); poolNSNB_MonsterFullHPPush.Put(m); m = nil }

var poolNSNB_SetShowLog = &sync.Pool{New: func() interface{} { return &NSNB_SetShowLog{} }}

func (m *NSNB_SetShowLog) ReleasePool() { m.Reset(); poolNSNB_SetShowLog.Put(m); m = nil }

var poolNSNB_BuffAttr = &sync.Pool{New: func() interface{} { return &NSNB_BuffAttr{} }}

func (m *NSNB_BuffAttr) ReleasePool() { m.Reset(); poolNSNB_BuffAttr.Put(m); m = nil }

var poolNSNB_ObjectInfo = &sync.Pool{New: func() interface{} { return &NSNB_ObjectInfo{} }}

func (m *NSNB_ObjectInfo) ReleasePool() { m.Reset(); poolNSNB_ObjectInfo.Put(m); m = nil }

var poolNSNB_ShowSkillsLogs = &sync.Pool{New: func() interface{} { return &NSNB_ShowSkillsLogs{} }}

func (m *NSNB_ShowSkillsLogs) ReleasePool() { m.Reset(); poolNSNB_ShowSkillsLogs.Put(m); m = nil }

var poolNSNB_EdgeKillPlayer = &sync.Pool{New: func() interface{} { return &NSNB_EdgeKillPlayer{} }}

func (m *NSNB_EdgeKillPlayer) ReleasePool() { m.Reset(); poolNSNB_EdgeKillPlayer.Put(m); m = nil }

var poolNSNB_KeepAliveRequest = &sync.Pool{New: func() interface{} { return &NSNB_KeepAliveRequest{} }}

func (m *NSNB_KeepAliveRequest) ReleasePool() { m.Reset(); poolNSNB_KeepAliveRequest.Put(m); m = nil }

var poolNSNB_KeepAliveResponse = &sync.Pool{New: func() interface{} { return &NSNB_KeepAliveResponse{} }}

func (m *NSNB_KeepAliveResponse) ReleasePool() { m.Reset(); poolNSNB_KeepAliveResponse.Put(m); m = nil }

var poolNSNB_DrawSkillOpenPush = &sync.Pool{New: func() interface{} { return &NSNB_DrawSkillOpenPush{} }}

func (m *NSNB_DrawSkillOpenPush) ReleasePool() { m.Reset(); poolNSNB_DrawSkillOpenPush.Put(m); m = nil }

var poolNSNB_DrawSKillRangePush = &sync.Pool{New: func() interface{} { return &NSNB_DrawSKillRangePush{} }}

func (m *NSNB_DrawSKillRangePush) ReleasePool() {
	m.Reset()
	poolNSNB_DrawSKillRangePush.Put(m)
	m = nil
}

var poolNSNB_ShowFightLog = &sync.Pool{New: func() interface{} { return &NSNB_ShowFightLog{} }}

func (m *NSNB_ShowFightLog) ReleasePool() { m.Reset(); poolNSNB_ShowFightLog.Put(m); m = nil }

var poolNSNB_SoulPwerPush = &sync.Pool{New: func() interface{} { return &NSNB_SoulPwerPush{} }}

func (m *NSNB_SoulPwerPush) ReleasePool() { m.Reset(); poolNSNB_SoulPwerPush.Put(m); m = nil }

var poolNSNB_SyncSkillInfo = &sync.Pool{New: func() interface{} { return &NSNB_SyncSkillInfo{} }}

func (m *NSNB_SyncSkillInfo) ReleasePool() { m.Reset(); poolNSNB_SyncSkillInfo.Put(m); m = nil }

var poolNSNB_SyncSkillPush = &sync.Pool{New: func() interface{} { return &NSNB_SyncSkillPush{} }}

func (m *NSNB_SyncSkillPush) ReleasePool() { m.Reset(); poolNSNB_SyncSkillPush.Put(m); m = nil }

var poolNSNB_BossDeadPush = &sync.Pool{New: func() interface{} { return &NSNB_BossDeadPush{} }}

func (m *NSNB_BossDeadPush) ReleasePool() { m.Reset(); poolNSNB_BossDeadPush.Put(m); m = nil }

var poolNSNB_ExitBossLandPush = &sync.Pool{New: func() interface{} { return &NSNB_ExitBossLandPush{} }}

func (m *NSNB_ExitBossLandPush) ReleasePool() { m.Reset(); poolNSNB_ExitBossLandPush.Put(m); m = nil }

var poolNSNB_BossRefreshPush = &sync.Pool{New: func() interface{} { return &NSNB_BossRefreshPush{} }}

func (m *NSNB_BossRefreshPush) ReleasePool() { m.Reset(); poolNSNB_BossRefreshPush.Put(m); m = nil }

var poolNSNB_ItemDropPush = &sync.Pool{New: func() interface{} { return &NSNB_ItemDropPush{} }}

func (m *NSNB_ItemDropPush) ReleasePool() { m.Reset(); poolNSNB_ItemDropPush.Put(m); m = nil }

var poolNSNB_BossHallPush = &sync.Pool{New: func() interface{} { return &NSNB_BossHallPush{} }}

func (m *NSNB_BossHallPush) ReleasePool() { m.Reset(); poolNSNB_BossHallPush.Put(m); m = nil }

var poolNSNB_BossHallFinishPush = &sync.Pool{New: func() interface{} { return &NSNB_BossHallFinishPush{} }}

func (m *NSNB_BossHallFinishPush) ReleasePool() {
	m.Reset()
	poolNSNB_BossHallFinishPush.Put(m)
	m = nil
}

var poolNSNB_PlaneDungeonStatusPush = &sync.Pool{New: func() interface{} { return &NSNB_PlaneDungeonStatusPush{} }}

func (m *NSNB_PlaneDungeonStatusPush) ReleasePool() {
	m.Reset()
	poolNSNB_PlaneDungeonStatusPush.Put(m)
	m = nil
}

var poolNSNB_ExitPlaneDungeonPush = &sync.Pool{New: func() interface{} { return &NSNB_ExitPlaneDungeonPush{} }}

func (m *NSNB_ExitPlaneDungeonPush) ReleasePool() {
	m.Reset()
	poolNSNB_ExitPlaneDungeonPush.Put(m)
	m = nil
}

var poolNSNB_UserAutoSoulSkillPush = &sync.Pool{New: func() interface{} { return &NSNB_UserAutoSoulSkillPush{} }}

func (m *NSNB_UserAutoSoulSkillPush) ReleasePool() {
	m.Reset()
	poolNSNB_UserAutoSoulSkillPush.Put(m)
	m = nil
}

var poolNSNB_GM = &sync.Pool{New: func() interface{} { return &NSNB_GM{} }}

func (m *NSNB_GM) ReleasePool() { m.Reset(); poolNSNB_GM.Put(m); m = nil }

var poolNSNB_GM_CreateMonsterNearby = &sync.Pool{New: func() interface{} { return &NSNB_GM_CreateMonsterNearby{} }}

func (m *NSNB_GM_CreateMonsterNearby) ReleasePool() {
	m.Reset()
	poolNSNB_GM_CreateMonsterNearby.Put(m)
	m = nil
}

var poolNSNB_GM_CloseConn = &sync.Pool{New: func() interface{} { return &NSNB_GM_CloseConn{} }}

func (m *NSNB_GM_CloseConn) ReleasePool() { m.Reset(); poolNSNB_GM_CloseConn.Put(m); m = nil }
func (x ClickTyp) String() string {
	s, ok := ClickTyp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NSNB) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB)
	if !ok {
		that2, ok := that.(NSNB)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_Vec2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_Vec2)
	if !ok {
		that2, ok := that.(NSNB_Vec2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *NSNB_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_Ping)
	if !ok {
		that2, ok := that.(NSNB_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientTime != that1.ClientTime {
		return false
	}
	return true
}
func (this *NSNB_Pong) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_Pong)
	if !ok {
		that2, ok := that.(NSNB_Pong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientTime != that1.ClientTime {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_EdgeAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_EdgeAuth)
	if !ok {
		that2, ok := that.(NSNB_EdgeAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_ManyPushMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ManyPushMsg)
	if !ok {
		that2, ok := that.(NSNB_ManyPushMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_AuthTCPPushToServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_AuthTCPPushToServer)
	if !ok {
		that2, ok := that.(NSNB_AuthTCPPushToServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.ClientTime != that1.ClientTime {
		return false
	}
	if this.BinDataVersion != that1.BinDataVersion {
		return false
	}
	return true
}
func (this *NSNB_BinDataVersionPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BinDataVersionPush)
	if !ok {
		that2, ok := that.(NSNB_BinDataVersionPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BinDataVersion != that1.BinDataVersion {
		return false
	}
	if this.ServerIp != that1.ServerIp {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_PlayerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_PlayerPush)
	if !ok {
		that2, ok := that.(NSNB_PlayerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SectName != that1.SectName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.HeroIndex != that1.HeroIndex {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.CampId != that1.CampId {
		return false
	}
	if len(this.FriendCampIds) != len(that1.FriendCampIds) {
		return false
	}
	for i := range this.FriendCampIds {
		if this.FriendCampIds[i] != that1.FriendCampIds[i] {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if this.AutoSoulSkill != that1.AutoSoulSkill {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_MonsterPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_MonsterPush)
	if !ok {
		that2, ok := that.(NSNB_MonsterPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.HeroIndex != that1.HeroIndex {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.CampId != that1.CampId {
		return false
	}
	if len(this.FriendCampIds) != len(that1.FriendCampIds) {
		return false
	}
	for i := range this.FriendCampIds {
		if this.FriendCampIds[i] != that1.FriendCampIds[i] {
			return false
		}
	}
	if this.SummonedId != that1.SummonedId {
		return false
	}
	if this.SummonedName != that1.SummonedName {
		return false
	}
	if this.SummonedType != that1.SummonedType {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if !this.Buffs.Equal(that1.Buffs) {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_MoveOutPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_MoveOutPush)
	if !ok {
		that2, ok := that.(NSNB_MoveOutPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ObjId) != len(that1.ObjId) {
		return false
	}
	for i := range this.ObjId {
		if this.ObjId[i] != that1.ObjId[i] {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_MoveSyncPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_MoveSyncPush)
	if !ok {
		that2, ok := that.(NSNB_MoveSyncPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if !this.MoveDir.Equal(that1.MoveDir) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if !this.CurrPos.Equal(that1.CurrPos) {
		return false
	}
	if this.IsStop != that1.IsStop {
		return false
	}
	if this.CustomSpeed != that1.CustomSpeed {
		return false
	}
	if this.SpeedRate != that1.SpeedRate {
		return false
	}
	if this.MoveStatus != that1.MoveStatus {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ClientMoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ClientMoveRequest)
	if !ok {
		that2, ok := that.(NSNB_ClientMoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if !this.DestOrDir.Equal(that1.DestOrDir) {
		return false
	}
	if this.IsManual != that1.IsManual {
		return false
	}
	return true
}
func (this *NSNB_BuffInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BuffInfo)
	if !ok {
		that2, ok := that.(NSNB_BuffInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.RemainTime != that1.RemainTime {
		return false
	}
	if this.OverlayCount != that1.OverlayCount {
		return false
	}
	if this.CasterId != that1.CasterId {
		return false
	}
	return true
}
func (this *NSNB_AttrValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_AttrValues)
	if !ok {
		that2, ok := that.(NSNB_AttrValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FixValue != that1.FixValue {
		return false
	}
	if this.PercentValue != that1.PercentValue {
		return false
	}
	return true
}
func (this *NSNB_BuffPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BuffPush)
	if !ok {
		that2, ok := that.(NSNB_BuffPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectId != that1.ObjectId {
		return false
	}
	if len(this.Buffs) != len(that1.Buffs) {
		return false
	}
	for i := range this.Buffs {
		if !this.Buffs[i].Equal(that1.Buffs[i]) {
			return false
		}
	}
	if this.HeroConfigId != that1.HeroConfigId {
		return false
	}
	if len(this.BuffAttrs) != len(that1.BuffAttrs) {
		return false
	}
	for i := range this.BuffAttrs {
		if !this.BuffAttrs[i].Equal(that1.BuffAttrs[i]) {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BuffFlyDescPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BuffFlyDescPush)
	if !ok {
		that2, ok := that.(NSNB_BuffFlyDescPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if len(this.Buffs) != len(that1.Buffs) {
		return false
	}
	for i := range this.Buffs {
		if this.Buffs[i] != that1.Buffs[i] {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BuffTracingBulletPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BuffTracingBulletPush)
	if !ok {
		that2, ok := that.(NSNB_BuffTracingBulletPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.CasterId != that1.CasterId {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.BulletId != that1.BulletId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ClientAttack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ClientAttack)
	if !ok {
		that2, ok := that.(NSNB_ClientAttack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.DefenderId != that1.DefenderId {
		return false
	}
	if this.AttackerHeroId != that1.AttackerHeroId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_SkillPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SkillPush)
	if !ok {
		that2, ok := that.(NSNB_SkillPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.DefenderId != that1.DefenderId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.SkillViewIndex != that1.SkillViewIndex {
		return false
	}
	if this.AttackerHeroId != that1.AttackerHeroId {
		return false
	}
	if this.SkillSeq != that1.SkillSeq {
		return false
	}
	if this.SkillSpeed != that1.SkillSpeed {
		return false
	}
	if this.SkillCd != that1.SkillCd {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_DamagePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_DamagePush)
	if !ok {
		that2, ok := that.(NSNB_DamagePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.DefenderId != that1.DefenderId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.SkillViewIndex != that1.SkillViewIndex {
		return false
	}
	if this.SkillIndex != that1.SkillIndex {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if this.DamageColor != that1.DamageColor {
		return false
	}
	if this.IsDodge != that1.IsDodge {
		return false
	}
	if this.IsParry != that1.IsParry {
		return false
	}
	if this.AttackerConfigId != that1.AttackerConfigId {
		return false
	}
	if this.DefenderConfigId != that1.DefenderConfigId {
		return false
	}
	if this.IsReflect != that1.IsReflect {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BuffValuePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BuffValuePush)
	if !ok {
		that2, ok := that.(NSNB_BuffValuePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.CasterId != that1.CasterId {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if this.DamageColor != that1.DamageColor {
		return false
	}
	if this.IsDodge != that1.IsDodge {
		return false
	}
	if this.IsParry != that1.IsParry {
		return false
	}
	if this.CasterConfigId != that1.CasterConfigId {
		return false
	}
	if this.OwnerConfigId != that1.OwnerConfigId {
		return false
	}
	if this.AddType != that1.AddType {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_DeadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_DeadPush)
	if !ok {
		that2, ok := that.(NSNB_DeadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.DeadId != that1.DeadId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.SkillViewIndex != that1.SkillViewIndex {
		return false
	}
	if this.SkillIndex != that1.SkillIndex {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if len(this.Drop) != len(that1.Drop) {
		return false
	}
	for i := range this.Drop {
		if !this.Drop[i].Equal(that1.Drop[i]) {
			return false
		}
	}
	if this.AttackerConfigId != that1.AttackerConfigId {
		return false
	}
	if this.DefenderConfigId != that1.DefenderConfigId {
		return false
	}
	if this.ReviveCost != that1.ReviveCost {
		return false
	}
	if this.ReviveTime != that1.ReviveTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_DeadNotifyPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_DeadNotifyPush)
	if !ok {
		that2, ok := that.(NSNB_DeadNotifyPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeadId != that1.DeadId {
		return false
	}
	if this.DefenderConfigId != that1.DefenderConfigId {
		return false
	}
	if this.ReviveCost != that1.ReviveCost {
		return false
	}
	if this.ReviveTime != that1.ReviveTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_PosChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_PosChange)
	if !ok {
		that2, ok := that.(NSNB_PosChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	return true
}
func (this *NSNB_TransFormNotice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_TransFormNotice)
	if !ok {
		that2, ok := that.(NSNB_TransFormNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_CreateAirWallPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_CreateAirWallPush)
	if !ok {
		that2, ok := that.(NSNB_CreateAirWallPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AirWallId != that1.AirWallId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_DestroyAirWallPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_DestroyAirWallPush)
	if !ok {
		that2, ok := that.(NSNB_DestroyAirWallPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AirWallId != that1.AirWallId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_CurAirWallPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_CurAirWallPush)
	if !ok {
		that2, ok := that.(NSNB_CurAirWallPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AirWalls) != len(that1.AirWalls) {
		return false
	}
	for i := range this.AirWalls {
		if this.AirWalls[i] != that1.AirWalls[i] {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_RevivePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_RevivePush)
	if !ok {
		that2, ok := that.(NSNB_RevivePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.ReviveTyp != that1.ReviveTyp {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_QueryDeadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_QueryDeadPush)
	if !ok {
		that2, ok := that.(NSNB_QueryDeadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeadId != that1.DeadId {
		return false
	}
	if this.ReviveCost != that1.ReviveCost {
		return false
	}
	if this.ReviveTime != that1.ReviveTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_TransFormRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_TransFormRequest)
	if !ok {
		that2, ok := that.(NSNB_TransFormRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	return true
}
func (this *NSNB_ChangeHero) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ChangeHero)
	if !ok {
		that2, ok := that.(NSNB_ChangeHero)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	return true
}
func (this *NSNB_ChangeHeroPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ChangeHeroPush)
	if !ok {
		that2, ok := that.(NSNB_ChangeHeroPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if len(this.Equip) != len(that1.Equip) {
		return false
	}
	for i := range this.Equip {
		if this.Equip[i] != that1.Equip[i] {
			return false
		}
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ChangeHeroSelfPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ChangeHeroSelfPush)
	if !ok {
		that2, ok := that.(NSNB_ChangeHeroSelfPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.RemainCd != that1.RemainCd {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.Directly != that1.Directly {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ReviveHeroPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ReviveHeroPush)
	if !ok {
		that2, ok := that.(NSNB_ReviveHeroPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ExitBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ExitBattle)
	if !ok {
		that2, ok := that.(NSNB_ExitBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_ExitBattlePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ExitBattlePush)
	if !ok {
		that2, ok := that.(NSNB_ExitBattlePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_AIStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_AIStatus)
	if !ok {
		that2, ok := that.(NSNB_AIStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsAi != that1.IsAi {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_SyncNicknameChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SyncNicknameChangePush)
	if !ok {
		that2, ok := that.(NSNB_SyncNicknameChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_HeroesChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_HeroesChangePush)
	if !ok {
		that2, ok := that.(NSNB_HeroesChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.HeroIndex != that1.HeroIndex {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ChangeType != that1.ChangeType {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AutoSoulSkill != that1.AutoSoulSkill {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_UserTitleChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_UserTitleChangePush)
	if !ok {
		that2, ok := that.(NSNB_UserTitleChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_UserLevelChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_UserLevelChangePush)
	if !ok {
		that2, ok := that.(NSNB_UserLevelChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_GetRlBattleRoomsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_GetRlBattleRoomsRequest)
	if !ok {
		that2, ok := that.(NSNB_GetRlBattleRoomsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_GetRlBattleRoomsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_GetRlBattleRoomsResponse)
	if !ok {
		that2, ok := that.(NSNB_GetRlBattleRoomsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RlRooms) != len(that1.RlRooms) {
		return false
	}
	for i := range this.RlRooms {
		if !this.RlRooms[i].Equal(that1.RlRooms[i]) {
			return false
		}
	}
	if this.CurIdx != that1.CurIdx {
		return false
	}
	return true
}
func (this *NSNB_RlDataPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_RlDataPush)
	if !ok {
		that2, ok := that.(NSNB_RlDataPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	if len(this.RlRooms) != len(that1.RlRooms) {
		return false
	}
	for i := range this.RlRooms {
		if !this.RlRooms[i].Equal(that1.RlRooms[i]) {
			return false
		}
	}
	if this.CurRoomIdx != that1.CurRoomIdx {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if len(this.OuterReward) != len(that1.OuterReward) {
		return false
	}
	for i := range this.OuterReward {
		if !this.OuterReward[i].Equal(that1.OuterReward[i]) {
			return false
		}
	}
	if len(this.InnerArtifact) != len(that1.InnerArtifact) {
		return false
	}
	for i := range this.InnerArtifact {
		if this.InnerArtifact[i] != that1.InnerArtifact[i] {
			return false
		}
	}
	if this.IsBlockAction != that1.IsBlockAction {
		return false
	}
	if this.OnBridge != that1.OnBridge {
		return false
	}
	if len(this.AirWalls) != len(that1.AirWalls) {
		return false
	}
	for i := range this.AirWalls {
		if this.AirWalls[i] != that1.AirWalls[i] {
			return false
		}
	}
	if this.UseTime != that1.UseTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BlockPlayerActionPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BlockPlayerActionPush)
	if !ok {
		that2, ok := that.(NSNB_BlockPlayerActionPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_UnblockPlayerActionPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_UnblockPlayerActionPush)
	if !ok {
		that2, ok := that.(NSNB_UnblockPlayerActionPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_RlRoomSettlePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_RlRoomSettlePush)
	if !ok {
		that2, ok := that.(NSNB_RlRoomSettlePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OuterReward) != len(that1.OuterReward) {
		return false
	}
	for i := range this.OuterReward {
		if !this.OuterReward[i].Equal(that1.OuterReward[i]) {
			return false
		}
	}
	if len(this.OptionalArtifact) != len(that1.OptionalArtifact) {
		return false
	}
	for i := range this.OptionalArtifact {
		if this.OptionalArtifact[i] != that1.OptionalArtifact[i] {
			return false
		}
	}
	if this.RoomIdx != that1.RoomIdx {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_RlSelectArtifactRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_RlSelectArtifactRequest)
	if !ok {
		that2, ok := that.(NSNB_RlSelectArtifactRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Idx != that1.Idx {
		return false
	}
	return true
}
func (this *NSNB_RlSelectArtifactResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_RlSelectArtifactResponse)
	if !ok {
		that2, ok := that.(NSNB_RlSelectArtifactResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Idx != that1.Idx {
		return false
	}
	if this.ArtifactId != that1.ArtifactId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BossSchemeInitPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BossSchemeInitPush)
	if !ok {
		that2, ok := that.(NSNB_BossSchemeInitPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BossSchemePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BossSchemePush)
	if !ok {
		that2, ok := that.(NSNB_BossSchemePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoleIds) != len(that1.RoleIds) {
		return false
	}
	for i := range this.RoleIds {
		if this.RoleIds[i] != that1.RoleIds[i] {
			return false
		}
	}
	if this.PassTime != that1.PassTime {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if len(this.Points) != len(that1.Points) {
		return false
	}
	for i := range this.Points {
		if !this.Points[i].Equal(that1.Points[i]) {
			return false
		}
	}
	if this.Idx != that1.Idx {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BossSchemeClickPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BossSchemeClickPush)
	if !ok {
		that2, ok := that.(NSNB_BossSchemeClickPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_HeroUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_HeroUpdate)
	if !ok {
		that2, ok := that.(NSNB_HeroUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if len(this.Equip) != len(that1.Equip) {
		return false
	}
	for i := range this.Equip {
		if this.Equip[i] != that1.Equip[i] {
			return false
		}
	}
	if len(this.SkillIds) != len(that1.SkillIds) {
		return false
	}
	for i := range this.SkillIds {
		if !this.SkillIds[i].Equal(that1.SkillIds[i]) {
			return false
		}
	}
	if this.IsSkillChange != that1.IsSkillChange {
		return false
	}
	if len(this.Buff) != len(that1.Buff) {
		return false
	}
	for i := range this.Buff {
		if this.Buff[i] != that1.Buff[i] {
			return false
		}
	}
	if len(this.EquipLightEffect) != len(that1.EquipLightEffect) {
		return false
	}
	for i := range this.EquipLightEffect {
		if this.EquipLightEffect[i] != that1.EquipLightEffect[i] {
			return false
		}
	}
	if this.Fashion != that1.Fashion {
		return false
	}
	return true
}
func (this *NSNB_HeroAttrUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_HeroAttrUpdatePush)
	if !ok {
		that2, ok := that.(NSNB_HeroAttrUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AutoSoulSkill != that1.AutoSoulSkill {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_HeroFashionPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_HeroFashionPush)
	if !ok {
		that2, ok := that.(NSNB_HeroFashionPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.HeroConfigId != that1.HeroConfigId {
		return false
	}
	if this.Fashion != that1.Fashion {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_TaskMoveStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_TaskMoveStart)
	if !ok {
		that2, ok := that.(NSNB_TaskMoveStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dest.Equal(that1.Dest) {
		return false
	}
	if this.MaxRadius != that1.MaxRadius {
		return false
	}
	return true
}
func (this *NSNB_TaskMoveFinish) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_TaskMoveFinish)
	if !ok {
		that2, ok := that.(NSNB_TaskMoveFinish)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dest.Equal(that1.Dest) {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_TaskMoveEnd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_TaskMoveEnd)
	if !ok {
		that2, ok := that.(NSNB_TaskMoveEnd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_SetSelect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SetSelect)
	if !ok {
		that2, ok := that.(NSNB_SetSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.SelectId != that1.SelectId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_SetTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SetTarget)
	if !ok {
		that2, ok := that.(NSNB_SetTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.TargetId != that1.TargetId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_GuildBossDamageSync) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_GuildBossDamageSync)
	if !ok {
		that2, ok := that.(NSNB_GuildBossDamageSync)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SelfDamage != that1.SelfDamage {
		return false
	}
	if this.TotalDamage != that1.TotalDamage {
		return false
	}
	if this.RemainTime != that1.RemainTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_MonsterFullHPPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_MonsterFullHPPush)
	if !ok {
		that2, ok := that.(NSNB_MonsterFullHPPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_SetShowLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SetShowLog)
	if !ok {
		that2, ok := that.(NSNB_SetShowLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.IsShowLog != that1.IsShowLog {
		return false
	}
	return true
}
func (this *NSNB_BuffAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BuffAttr)
	if !ok {
		that2, ok := that.(NSNB_BuffAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FixValue != that1.FixValue {
		return false
	}
	if this.PercentValue != that1.PercentValue {
		return false
	}
	return true
}
func (this *NSNB_ObjectInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ObjectInfo)
	if !ok {
		that2, ok := that.(NSNB_ObjectInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if len(this.BuffAttr) != len(that1.BuffAttr) {
		return false
	}
	for i := range this.BuffAttr {
		if !this.BuffAttr[i].Equal(that1.BuffAttr[i]) {
			return false
		}
	}
	return true
}
func (this *NSNB_ShowSkillsLogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ShowSkillsLogs)
	if !ok {
		that2, ok := that.(NSNB_ShowSkillsLogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Attacker.Equal(that1.Attacker) {
		return false
	}
	if !this.Defender.Equal(that1.Defender) {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.BuffId != that1.BuffId {
		return false
	}
	if this.IsCri != that1.IsCri {
		return false
	}
	if this.IsDodge != that1.IsDodge {
		return false
	}
	if this.IsParry != that1.IsParry {
		return false
	}
	if this.LogType != that1.LogType {
		return false
	}
	if len(this.ChangeValue) != len(that1.ChangeValue) {
		return false
	}
	for i := range this.ChangeValue {
		if this.ChangeValue[i] != that1.ChangeValue[i] {
			return false
		}
	}
	if len(this.BuffAttr) != len(that1.BuffAttr) {
		return false
	}
	for i := range this.BuffAttr {
		if !this.BuffAttr[i].Equal(that1.BuffAttr[i]) {
			return false
		}
	}
	if len(this.CalBuffAttr) != len(that1.CalBuffAttr) {
		return false
	}
	for i := range this.CalBuffAttr {
		if this.CalBuffAttr[i] != that1.CalBuffAttr[i] {
			return false
		}
	}
	return true
}
func (this *NSNB_EdgeKillPlayer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_EdgeKillPlayer)
	if !ok {
		that2, ok := that.(NSNB_EdgeKillPlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoleId) != len(that1.RoleId) {
		return false
	}
	for i := range this.RoleId {
		if this.RoleId[i] != that1.RoleId[i] {
			return false
		}
	}
	return true
}
func (this *NSNB_KeepAliveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_KeepAliveRequest)
	if !ok {
		that2, ok := that.(NSNB_KeepAliveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_KeepAliveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_KeepAliveResponse)
	if !ok {
		that2, ok := that.(NSNB_KeepAliveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_DrawSkillOpenPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_DrawSkillOpenPush)
	if !ok {
		that2, ok := that.(NSNB_DrawSkillOpenPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.IsOpen != that1.IsOpen {
		return false
	}
	return true
}
func (this *NSNB_DrawSKillRangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_DrawSKillRangePush)
	if !ok {
		that2, ok := that.(NSNB_DrawSKillRangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pos) != len(that1.Pos) {
		return false
	}
	for i := range this.Pos {
		if !this.Pos[i].Equal(that1.Pos[i]) {
			return false
		}
	}
	if this.Length != that1.Length {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ShowFightLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ShowFightLog)
	if !ok {
		that2, ok := that.(NSNB_ShowFightLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.IsOpen != that1.IsOpen {
		return false
	}
	return true
}
func (this *NSNB_SoulPwerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SoulPwerPush)
	if !ok {
		that2, ok := that.(NSNB_SoulPwerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_SyncSkillInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SyncSkillInfo)
	if !ok {
		that2, ok := that.(NSNB_SyncSkillInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SkillCd != that1.SkillCd {
		return false
	}
	if this.SkillCdDelta != that1.SkillCdDelta {
		return false
	}
	return true
}
func (this *NSNB_SyncSkillPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_SyncSkillPush)
	if !ok {
		that2, ok := that.(NSNB_SyncSkillPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if len(this.Skills) != len(that1.Skills) {
		return false
	}
	for i := range this.Skills {
		if !this.Skills[i].Equal(that1.Skills[i]) {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BossDeadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BossDeadPush)
	if !ok {
		that2, ok := that.(NSNB_BossDeadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !this.BossPos.Equal(that1.BossPos) {
		return false
	}
	if this.KillerId != that1.KillerId {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ExitBossLandPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ExitBossLandPush)
	if !ok {
		that2, ok := that.(NSNB_ExitBossLandPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_BossRefreshPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BossRefreshPush)
	if !ok {
		that2, ok := that.(NSNB_BossRefreshPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RefreshTime != that1.RefreshTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ItemDropPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ItemDropPush)
	if !ok {
		that2, ok := that.(NSNB_ItemDropPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.DropPos.Equal(that1.DropPos) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BossHallPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BossHallPush)
	if !ok {
		that2, ok := that.(NSNB_BossHallPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RemainSeconds != that1.RemainSeconds {
		return false
	}
	if this.IsFinish != that1.IsFinish {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_BossHallFinishPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_BossHallFinishPush)
	if !ok {
		that2, ok := that.(NSNB_BossHallFinishPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	if this.HasKillItems != that1.HasKillItems {
		return false
	}
	if len(this.KillItems) != len(that1.KillItems) {
		return false
	}
	for i := range this.KillItems {
		if !this.KillItems[i].Equal(that1.KillItems[i]) {
			return false
		}
	}
	if this.HasJoinItems != that1.HasJoinItems {
		return false
	}
	if len(this.JoinItems) != len(that1.JoinItems) {
		return false
	}
	for i := range this.JoinItems {
		if !this.JoinItems[i].Equal(that1.JoinItems[i]) {
			return false
		}
	}
	if this.Killer != that1.Killer {
		return false
	}
	if this.IsSelfKill != that1.IsSelfKill {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_PlaneDungeonStatusPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_PlaneDungeonStatusPush)
	if !ok {
		that2, ok := that.(NSNB_PlaneDungeonStatusPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.IdentChange != that1.IdentChange {
		return false
	}
	if this.AllTime != that1.AllTime {
		return false
	}
	if this.UseTime != that1.UseTime {
		return false
	}
	if this.IdentNum != that1.IdentNum {
		return false
	}
	if this.WaitEnd != that1.WaitEnd {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_ExitPlaneDungeonPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_ExitPlaneDungeonPush)
	if !ok {
		that2, ok := that.(NSNB_ExitPlaneDungeonPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_UserAutoSoulSkillPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_UserAutoSoulSkillPush)
	if !ok {
		that2, ok := that.(NSNB_UserAutoSoulSkillPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.AutoSouleSkill != that1.AutoSouleSkill {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	return true
}
func (this *NSNB_GM) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_GM)
	if !ok {
		that2, ok := that.(NSNB_GM)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NSNB_GM_CreateMonsterNearby) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_GM_CreateMonsterNearby)
	if !ok {
		that2, ok := that.(NSNB_GM_CreateMonsterNearby)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MonsterId != that1.MonsterId {
		return false
	}
	if this.Test != that1.Test {
		return false
	}
	return true
}
func (this *NSNB_GM_CloseConn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSNB_GM_CloseConn)
	if !ok {
		that2, ok := that.(NSNB_GM_CloseConn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (m *NSNB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_Vec2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_Vec2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_Vec2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ClientTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_EdgeAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_EdgeAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_EdgeAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_ManyPushMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ManyPushMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ManyPushMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_AuthTCPPushToServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_AuthTCPPushToServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_AuthTCPPushToServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BinDataVersion != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BinDataVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.ClientTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BinDataVersionPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BinDataVersionPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BinDataVersionPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ServerIp) > 0 {
		i -= len(m.ServerIp)
		copy(dAtA[i:], m.ServerIp)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ServerIp)))
		i--
		dAtA[i] = 0x12
	}
	if m.BinDataVersion != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BinDataVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_PlayerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_PlayerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_PlayerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AutoSoulSkill != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AutoSoulSkill))
		i--
		dAtA[i] = 0x68
	}
	if m.Title != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x60
	}
	if len(m.FriendCampIds) > 0 {
		dAtA2 := make([]byte, len(m.FriendCampIds)*10)
		var j1 int
		for _, num1 := range m.FriendCampIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCppBattleNew(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x5a
	}
	if m.CampId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.CampId))
		i--
		dAtA[i] = 0x50
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x4d
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.HeroIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Level != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SectName) > 0 {
		i -= len(m.SectName)
		copy(dAtA[i:], m.SectName)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.SectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_MonsterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_MonsterPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_MonsterPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Buffs != nil {
		{
			size, err := m.Buffs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Level != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x68
	}
	if m.SummonedType != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SummonedType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.SummonedName) > 0 {
		i -= len(m.SummonedName)
		copy(dAtA[i:], m.SummonedName)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.SummonedName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SummonedId) > 0 {
		i -= len(m.SummonedId)
		copy(dAtA[i:], m.SummonedId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.SummonedId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FriendCampIds) > 0 {
		dAtA7 := make([]byte, len(m.FriendCampIds)*10)
		var j6 int
		for _, num1 := range m.FriendCampIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintCppBattleNew(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x4a
	}
	if m.CampId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.CampId))
		i--
		dAtA[i] = 0x40
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x38
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x35
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HeroIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_MoveOutPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_MoveOutPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_MoveOutPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ObjId) > 0 {
		for iNdEx := len(m.ObjId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjId[iNdEx])
			copy(dAtA[i:], m.ObjId[iNdEx])
			i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_MoveSyncPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_MoveSyncPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_MoveSyncPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.MoveStatus != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.MoveStatus))
		i--
		dAtA[i] = 0x48
	}
	if m.SpeedRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SpeedRate))))
		i--
		dAtA[i] = 0x45
	}
	if m.CustomSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CustomSpeed))))
		i--
		dAtA[i] = 0x3d
	}
	if m.IsStop {
		i--
		if m.IsStop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CurrPos != nil {
		{
			size, err := m.CurrPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MoveDir != nil {
		{
			size, err := m.MoveDir.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ClientMoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ClientMoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ClientMoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsManual != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.IsManual))
		i--
		dAtA[i] = 0x18
	}
	if m.DestOrDir != nil {
		{
			size, err := m.DestOrDir.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Typ != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BuffInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BuffInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BuffInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CasterId) > 0 {
		i -= len(m.CasterId)
		copy(dAtA[i:], m.CasterId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.CasterId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OverlayCount != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.OverlayCount))
		i--
		dAtA[i] = 0x20
	}
	if m.RemainTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.RemainTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_AttrValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_AttrValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_AttrValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PercentValue != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.PercentValue))
		i--
		dAtA[i] = 0x10
	}
	if m.FixValue != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.FixValue))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BuffPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BuffPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BuffPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.BuffAttrs) > 0 {
		for k := range m.BuffAttrs {
			v := m.BuffAttrs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.HeroConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroConfigId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Buffs) > 0 {
		for k := range m.Buffs {
			v := m.Buffs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BuffFlyDescPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BuffFlyDescPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BuffFlyDescPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Buffs) > 0 {
		dAtA17 := make([]byte, len(m.Buffs)*10)
		var j16 int
		for _, num1 := range m.Buffs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintCppBattleNew(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BuffTracingBulletPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BuffTracingBulletPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BuffTracingBulletPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.BulletId) > 0 {
		i -= len(m.BulletId)
		copy(dAtA[i:], m.BulletId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.BulletId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CasterId) > 0 {
		i -= len(m.CasterId)
		copy(dAtA[i:], m.CasterId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.CasterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ClientAttack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ClientAttack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ClientAttack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x20
	}
	if m.AttackerHeroId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AttackerHeroId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DefenderId) > 0 {
		i -= len(m.DefenderId)
		copy(dAtA[i:], m.DefenderId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.DefenderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_SkillPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SkillPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SkillPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.SkillCd != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillCd))
		i--
		dAtA[i] = 0x40
	}
	if m.SkillSpeed != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillSpeed))
		i--
		dAtA[i] = 0x38
	}
	if m.SkillSeq != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillSeq))
		i--
		dAtA[i] = 0x30
	}
	if m.AttackerHeroId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AttackerHeroId))
		i--
		dAtA[i] = 0x28
	}
	if m.SkillViewIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillViewIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DefenderId) > 0 {
		i -= len(m.DefenderId)
		copy(dAtA[i:], m.DefenderId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.DefenderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_DamagePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_DamagePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_DamagePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.IsReflect {
		i--
		if m.IsReflect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.DefenderConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.DefenderConfigId))
		i--
		dAtA[i] = 0x60
	}
	if m.AttackerConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AttackerConfigId))
		i--
		dAtA[i] = 0x58
	}
	if m.IsParry {
		i--
		if m.IsParry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsDodge {
		i--
		if m.IsDodge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DamageColor != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.DamageColor))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Damage != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x30
	}
	if m.SkillIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.SkillViewIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillViewIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DefenderId) > 0 {
		i -= len(m.DefenderId)
		copy(dAtA[i:], m.DefenderId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.DefenderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BuffValuePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BuffValuePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BuffValuePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AddType {
		i--
		if m.AddType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.OwnerConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.OwnerConfigId))
		i--
		dAtA[i] = 0x50
	}
	if m.CasterConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.CasterConfigId))
		i--
		dAtA[i] = 0x48
	}
	if m.IsParry {
		i--
		if m.IsParry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsDodge {
		i--
		if m.IsDodge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DamageColor != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.DamageColor))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ValueType != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CasterId) > 0 {
		i -= len(m.CasterId)
		copy(dAtA[i:], m.CasterId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.CasterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_DeadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_DeadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_DeadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ReviveTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ReviveTime))
		i--
		dAtA[i] = 0x58
	}
	if m.ReviveCost != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ReviveCost))
		i--
		dAtA[i] = 0x50
	}
	if m.DefenderConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.DefenderConfigId))
		i--
		dAtA[i] = 0x48
	}
	if m.AttackerConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AttackerConfigId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Drop) > 0 {
		for iNdEx := len(m.Drop) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Drop[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Damage != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x30
	}
	if m.SkillIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.SkillViewIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillViewIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeadId) > 0 {
		i -= len(m.DeadId)
		copy(dAtA[i:], m.DeadId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.DeadId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_DeadNotifyPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_DeadNotifyPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_DeadNotifyPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ReviveTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ReviveTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ReviveCost != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ReviveCost))
		i--
		dAtA[i] = 0x18
	}
	if m.DefenderConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.DefenderConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeadId) > 0 {
		i -= len(m.DeadId)
		copy(dAtA[i:], m.DeadId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.DeadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_PosChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_PosChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_PosChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_TransFormNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_TransFormNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_TransFormNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_CreateAirWallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_CreateAirWallPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_CreateAirWallPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AirWallId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AirWallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_DestroyAirWallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_DestroyAirWallPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_DestroyAirWallPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AirWallId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AirWallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_CurAirWallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_CurAirWallPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_CurAirWallPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.AirWalls) > 0 {
		for k := range m.AirWalls {
			v := m.AirWalls[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_RevivePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_RevivePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_RevivePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ReviveTyp != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ReviveTyp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_QueryDeadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_QueryDeadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_QueryDeadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ReviveTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ReviveTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ReviveCost != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ReviveCost))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeadId) > 0 {
		i -= len(m.DeadId)
		copy(dAtA[i:], m.DeadId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.DeadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_TransFormRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_TransFormRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_TransFormRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ChangeHero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ChangeHero) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ChangeHero) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ChangeHeroPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ChangeHeroPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ChangeHeroPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Equip) > 0 {
		for k := range m.Equip {
			v := m.Equip[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ChangeHeroSelfPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ChangeHeroSelfPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ChangeHeroSelfPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Directly != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Directly))
		i--
		dAtA[i] = 0x20
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x18
	}
	if m.RemainCd != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.RemainCd))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ReviveHeroPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ReviveHeroPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ReviveHeroPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ExitBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ExitBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ExitBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_ExitBattlePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ExitBattlePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ExitBattlePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_AIStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_AIStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_AIStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.IsAi {
		i--
		if m.IsAi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_SyncNicknameChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SyncNicknameChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SyncNicknameChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_HeroesChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_HeroesChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_HeroesChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AutoSoulSkill != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AutoSoulSkill))
		i--
		dAtA[i] = 0x40
	}
	if m.Level != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x38
	}
	if m.Title != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x30
	}
	if m.ChangeType != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ChangeType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x1d
	}
	if m.HeroIndex != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_UserTitleChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_UserTitleChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_UserTitleChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Title != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_UserLevelChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_UserLevelChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_UserLevelChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Level != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_GetRlBattleRoomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_GetRlBattleRoomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_GetRlBattleRoomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_GetRlBattleRoomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_GetRlBattleRoomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_GetRlBattleRoomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurIdx != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.CurIdx))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RlRooms) > 0 {
		for iNdEx := len(m.RlRooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RlRooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_RlDataPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_RlDataPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_RlDataPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UseTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.UseTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.AirWalls) > 0 {
		for k := range m.AirWalls {
			v := m.AirWalls[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.OnBridge {
		i--
		if m.OnBridge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsBlockAction {
		i--
		if m.IsBlockAction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.InnerArtifact) > 0 {
		dAtA26 := make([]byte, len(m.InnerArtifact)*10)
		var j25 int
		for _, num1 := range m.InnerArtifact {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		i -= j25
		copy(dAtA[i:], dAtA26[:j25])
		i = encodeVarintCppBattleNew(dAtA, i, uint64(j25))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OuterReward) > 0 {
		for iNdEx := len(m.OuterReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OuterReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EndTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.CurRoomIdx != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.CurRoomIdx))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RlRooms) > 0 {
		for iNdEx := len(m.RlRooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RlRooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DungeonId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BlockPlayerActionPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BlockPlayerActionPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BlockPlayerActionPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_UnblockPlayerActionPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_UnblockPlayerActionPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_UnblockPlayerActionPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_RlRoomSettlePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_RlRoomSettlePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_RlRoomSettlePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.RoomIdx != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.RoomIdx))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OptionalArtifact) > 0 {
		dAtA28 := make([]byte, len(m.OptionalArtifact)*10)
		var j27 int
		for _, num1 := range m.OptionalArtifact {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintCppBattleNew(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OuterReward) > 0 {
		for iNdEx := len(m.OuterReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OuterReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_RlSelectArtifactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_RlSelectArtifactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_RlSelectArtifactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_RlSelectArtifactResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_RlSelectArtifactResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_RlSelectArtifactResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ArtifactId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ArtifactId))
		i--
		dAtA[i] = 0x10
	}
	if m.Idx != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BossSchemeInitPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BossSchemeInitPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BossSchemeInitPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.BossId) > 0 {
		i -= len(m.BossId)
		copy(dAtA[i:], m.BossId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.BossId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Typ != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BossSchemePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BossSchemePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BossSchemePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Idx != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Typ != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x18
	}
	if m.PassTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PassTime))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.RoleIds) > 0 {
		for iNdEx := len(m.RoleIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleIds[iNdEx])
			copy(dAtA[i:], m.RoleIds[iNdEx])
			i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BossSchemeClickPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BossSchemeClickPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BossSchemeClickPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Typ != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_HeroUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_HeroUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_HeroUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fashion != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Fashion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.EquipLightEffect) > 0 {
		for k := range m.EquipLightEffect {
			v := m.EquipLightEffect[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Buff) > 0 {
		dAtA30 := make([]byte, len(m.Buff)*10)
		var j29 int
		for _, num1 := range m.Buff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		i -= j29
		copy(dAtA[i:], dAtA30[:j29])
		i = encodeVarintCppBattleNew(dAtA, i, uint64(j29))
		i--
		dAtA[i] = 0x32
	}
	if m.IsSkillChange {
		i--
		if m.IsSkillChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.SkillIds) > 0 {
		for iNdEx := len(m.SkillIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkillIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Equip) > 0 {
		for k := range m.Equip {
			v := m.Equip[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_HeroAttrUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_HeroAttrUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_HeroAttrUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AutoSoulSkill != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AutoSoulSkill))
		i--
		dAtA[i] = 0x30
	}
	if m.Level != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x28
	}
	if m.Title != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_HeroFashionPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_HeroFashionPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_HeroFashionPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Fashion != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Fashion))
		i--
		dAtA[i] = 0x20
	}
	if m.HeroConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroConfigId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_TaskMoveStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_TaskMoveStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_TaskMoveStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRadius != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxRadius))))
		i--
		dAtA[i] = 0x15
	}
	if m.Dest != nil {
		{
			size, err := m.Dest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_TaskMoveFinish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_TaskMoveFinish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_TaskMoveFinish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Dest != nil {
		{
			size, err := m.Dest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_TaskMoveEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_TaskMoveEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_TaskMoveEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_SetSelect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SetSelect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SetSelect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.SelectId) > 0 {
		i -= len(m.SelectId)
		copy(dAtA[i:], m.SelectId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.SelectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_SetTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SetTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SetTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_GuildBossDamageSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_GuildBossDamageSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_GuildBossDamageSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.RemainTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RemainTime))))
		i--
		dAtA[i] = 0x1d
	}
	if m.TotalDamage != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.TotalDamage))
		i--
		dAtA[i] = 0x10
	}
	if m.SelfDamage != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SelfDamage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_MonsterFullHPPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_MonsterFullHPPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_MonsterFullHPPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_SetShowLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SetShowLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SetShowLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsShowLog {
		i--
		if m.IsShowLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BuffAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BuffAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BuffAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PercentValue != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PercentValue))))
		i--
		dAtA[i] = 0x15
	}
	if m.FixValue != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FixValue))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ObjectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ObjectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ObjectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuffAttr) > 0 {
		for k := range m.BuffAttr {
			v := m.BuffAttr[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCppBattleNew(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCppBattleNew(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HeroId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ShowSkillsLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ShowSkillsLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ShowSkillsLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CalBuffAttr) > 0 {
		for k := range m.CalBuffAttr {
			v := m.CalBuffAttr[k]
			baseI := i
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(v))))
			i--
			dAtA[i] = 0x15
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCppBattleNew(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.BuffAttr) > 0 {
		for k := range m.BuffAttr {
			v := m.BuffAttr[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCppBattleNew(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.ChangeValue) > 0 {
		dAtA36 := make([]byte, len(m.ChangeValue)*10)
		var j35 int
		for _, num1 := range m.ChangeValue {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintCppBattleNew(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.LogType != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.LogType))
		i--
		dAtA[i] = 0x40
	}
	if m.IsParry {
		i--
		if m.IsParry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsDodge {
		i--
		if m.IsDodge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsCri {
		i--
		if m.IsCri {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BuffId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.BuffId))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if m.Defender != nil {
		{
			size, err := m.Defender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Attacker != nil {
		{
			size, err := m.Attacker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_EdgeKillPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_EdgeKillPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_EdgeKillPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		for iNdEx := len(m.RoleId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleId[iNdEx])
			copy(dAtA[i:], m.RoleId[iNdEx])
			i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_KeepAliveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_KeepAliveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_KeepAliveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_KeepAliveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_KeepAliveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_KeepAliveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_DrawSkillOpenPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_DrawSkillOpenPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_DrawSkillOpenPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_DrawSKillRangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_DrawSKillRangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_DrawSKillRangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Typ != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x20
	}
	if m.Width != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Width))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Length != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Length))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Pos) > 0 {
		for iNdEx := len(m.Pos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ShowFightLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ShowFightLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ShowFightLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_SoulPwerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SoulPwerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SoulPwerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattleNew(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HeroId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_SyncSkillInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SyncSkillInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SyncSkillInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkillCdDelta != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillCdDelta))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillCd != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillCd))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_SyncSkillPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_SyncSkillPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_SyncSkillPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Skills) > 0 {
		for k := range m.Skills {
			v := m.Skills[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCppBattleNew(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattleNew(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HeroId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BossDeadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BossDeadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BossDeadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.KillerId) > 0 {
		i -= len(m.KillerId)
		copy(dAtA[i:], m.KillerId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.KillerId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BossPos != nil {
		{
			size, err := m.BossPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BossId) > 0 {
		i -= len(m.BossId)
		copy(dAtA[i:], m.BossId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.BossId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ExitBossLandPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ExitBossLandPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ExitBossLandPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_BossRefreshPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BossRefreshPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BossRefreshPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.RefreshTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ItemDropPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ItemDropPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ItemDropPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DropPos != nil {
		{
			size, err := m.DropPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BossHallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BossHallPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BossHallPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.IsFinish {
		i--
		if m.IsFinish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RemainSeconds != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RemainSeconds))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_BossHallFinishPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_BossHallFinishPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_BossHallFinishPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.IsSelfKill {
		i--
		if m.IsSelfKill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Killer) > 0 {
		i -= len(m.Killer)
		copy(dAtA[i:], m.Killer)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.Killer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.JoinItems) > 0 {
		for iNdEx := len(m.JoinItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoinItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.HasJoinItems {
		i--
		if m.HasJoinItems {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.KillItems) > 0 {
		for iNdEx := len(m.KillItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattleNew(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HasKillItems {
		i--
		if m.HasKillItems {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_PlaneDungeonStatusPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_PlaneDungeonStatusPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_PlaneDungeonStatusPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.WaitEnd != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.WaitEnd))
		i--
		dAtA[i] = 0x30
	}
	if m.IdentNum != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.IdentNum))
		i--
		dAtA[i] = 0x28
	}
	if m.UseTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.UseTime))
		i--
		dAtA[i] = 0x20
	}
	if m.AllTime != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AllTime))
		i--
		dAtA[i] = 0x18
	}
	if m.IdentChange != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.IdentChange))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_ExitPlaneDungeonPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_ExitPlaneDungeonPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_ExitPlaneDungeonPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_UserAutoSoulSkillPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_UserAutoSoulSkillPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_UserAutoSoulSkillPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AutoSouleSkill != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.AutoSouleSkill))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattleNew(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_GM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_GM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_GM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NSNB_GM_CreateMonsterNearby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_GM_CreateMonsterNearby) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_GM_CreateMonsterNearby) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Test != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.Test))
		i--
		dAtA[i] = 0x10
	}
	if m.MonsterId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.MonsterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NSNB_GM_CloseConn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSNB_GM_CloseConn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSNB_GM_CloseConn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoleId != 0 {
		i = encodeVarintCppBattleNew(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCppBattleNew(dAtA []byte, offset int, v uint64) int {
	offset -= sovCppBattleNew(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *NSNB) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_Vec2) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.X)) > 0.000001 {
		w.RawByte('"')
		w.RawString("x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.X))
		needWriteComma = true
	}
	if math.Abs(float64(m.Y)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Y))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_Ping) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ClientTime != 0 {
		w.RawByte('"')
		w.RawString("client_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ClientTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_Pong) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ClientTime != 0 {
		w.RawByte('"')
		w.RawString("client_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ClientTime))
		needWriteComma = true
	}
	if m.ServerTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_EdgeAuth) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_ManyPushMsg) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("messages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Messages == nil {
		w.RawString("null")
	} else if len(m.Messages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Messages {
			(*coin_server_common_proto_jsonany.Any)(v).JsonBytes(w)
			if i != len(m.Messages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_AuthTCPPushToServer) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Token != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.ClientTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("client_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ClientTime))
		needWriteComma = true
	}
	if m.BinDataVersion != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("bin_data_version")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BinDataVersion))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BinDataVersionPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BinDataVersion != 0 {
		w.RawByte('"')
		w.RawString("bin_data_version")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BinDataVersion))
		needWriteComma = true
	}
	if m.ServerIp != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_ip")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ServerIp)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_PlayerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.SectName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sect_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SectName)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HeroIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroIndex))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if m.CampId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("camp_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CampId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("friend_camp_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.FriendCampIds == nil {
		w.RawString("null")
	} else if len(m.FriendCampIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.FriendCampIds {
			w.Int64(int64(v))
			if i != len(m.FriendCampIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.AutoSoulSkill != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_soul_skill")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AutoSoulSkill))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_MonsterPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HeroIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroIndex))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.CampId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("camp_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CampId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("friend_camp_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.FriendCampIds == nil {
		w.RawString("null")
	} else if len(m.FriendCampIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.FriendCampIds {
			w.Int64(int64(v))
			if i != len(m.FriendCampIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.SummonedId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("summoned_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SummonedId)
		needWriteComma = true
	}
	if m.SummonedName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("summoned_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SummonedName)
		needWriteComma = true
	}
	if m.SummonedType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("summoned_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SummonedType))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buffs")
	w.RawByte('"')
	w.RawByte(':')
	m.Buffs.JsonBytes(w)
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_MoveOutPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("obj_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.ObjId == nil {
		w.RawString("null")
	} else if len(m.ObjId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ObjId {
			w.String(v)
			if i != len(m.ObjId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_MoveSyncPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("move_dir")
	w.RawByte('"')
	w.RawByte(':')
	m.MoveDir.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("curr_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.CurrPos.JsonBytes(w)
	needWriteComma = true
	if m.IsStop {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_stop")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsStop)
		needWriteComma = true
	}
	if math.Abs(float64(m.CustomSpeed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("custom_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.CustomSpeed))
		needWriteComma = true
	}
	if math.Abs(float64(m.SpeedRate)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed_rate")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.SpeedRate))
		needWriteComma = true
	}
	if m.MoveStatus != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("move_status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MoveStatus))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ClientMoveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("dest_or_dir")
	w.RawByte('"')
	w.RawByte(':')
	m.DestOrDir.JsonBytes(w)
	needWriteComma = true
	if m.IsManual != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_manual")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IsManual))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BuffInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.RemainTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainTime))
		needWriteComma = true
	}
	if m.OverlayCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("overlay_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OverlayCount))
		needWriteComma = true
	}
	if m.CasterId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("caster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.CasterId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_AttrValues) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.FixValue != 0 {
		w.RawByte('"')
		w.RawString("fix_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FixValue))
		needWriteComma = true
	}
	if m.PercentValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("percent_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PercentValue))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BuffPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjectId != "" {
		w.RawByte('"')
		w.RawString("object_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjectId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buffs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buffs == nil {
		w.RawString("null")
	} else if len(m.Buffs) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuffs := len(m.Buffs)
		for k, v := range m.Buffs {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBuffs--
			if mlBuffs != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.HeroConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_attrs")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffAttrs == nil {
		w.RawString("null")
	} else if len(m.BuffAttrs) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuffAttrs := len(m.BuffAttrs)
		for k, v := range m.BuffAttrs {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBuffAttrs--
			if mlBuffAttrs != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BuffFlyDescPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buffs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buffs == nil {
		w.RawString("null")
	} else if len(m.Buffs) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Buffs {
			w.Int64(int64(v))
			if i != len(m.Buffs)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BuffTracingBulletPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.CasterId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("caster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.CasterId)
		needWriteComma = true
	}
	if m.OwnerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.BulletId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("bullet_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.BulletId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ClientAttack) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerId != "" {
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.DefenderId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DefenderId)
		needWriteComma = true
	}
	if m.AttackerHeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerHeroId))
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_SkillPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerId != "" {
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.DefenderId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DefenderId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.SkillViewIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_view_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillViewIndex))
		needWriteComma = true
	}
	if m.AttackerHeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerHeroId))
		needWriteComma = true
	}
	if m.SkillSeq != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_seq")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillSeq))
		needWriteComma = true
	}
	if m.SkillSpeed != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillSpeed))
		needWriteComma = true
	}
	if m.SkillCd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_cd")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillCd))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_DamagePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerId != "" {
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.DefenderId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DefenderId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.SkillViewIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_view_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillViewIndex))
		needWriteComma = true
	}
	if m.SkillIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillIndex))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.DamageColor != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage_color")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DamageColor))
		needWriteComma = true
	}
	if m.IsDodge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_dodge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDodge)
		needWriteComma = true
	}
	if m.IsParry {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_parry")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsParry)
		needWriteComma = true
	}
	if m.AttackerConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerConfigId))
		needWriteComma = true
	}
	if m.DefenderConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DefenderConfigId))
		needWriteComma = true
	}
	if m.IsReflect {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_reflect")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsReflect)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BuffValuePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.OwnerId != "" {
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.CasterId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("caster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.CasterId)
		needWriteComma = true
	}
	if m.Value != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value))
		needWriteComma = true
	}
	if m.ValueType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ValueType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.DamageColor != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage_color")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DamageColor))
		needWriteComma = true
	}
	if m.IsDodge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_dodge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDodge)
		needWriteComma = true
	}
	if m.IsParry {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_parry")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsParry)
		needWriteComma = true
	}
	if m.CasterConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("caster_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CasterConfigId))
		needWriteComma = true
	}
	if m.OwnerConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OwnerConfigId))
		needWriteComma = true
	}
	if m.AddType {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("add_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.AddType)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_DeadPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerId != "" {
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.DeadId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dead_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeadId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.SkillViewIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_view_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillViewIndex))
		needWriteComma = true
	}
	if m.SkillIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillIndex))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("drop")
	w.RawByte('"')
	w.RawByte(':')
	if m.Drop == nil {
		w.RawString("null")
	} else if len(m.Drop) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Drop {
			v.JsonBytes(w)
			if i != len(m.Drop)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.AttackerConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerConfigId))
		needWriteComma = true
	}
	if m.DefenderConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DefenderConfigId))
		needWriteComma = true
	}
	if m.ReviveCost != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_cost")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveCost))
		needWriteComma = true
	}
	if m.ReviveTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_DeadNotifyPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DeadId != "" {
		w.RawByte('"')
		w.RawString("dead_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeadId)
		needWriteComma = true
	}
	if m.DefenderConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DefenderConfigId))
		needWriteComma = true
	}
	if m.ReviveCost != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_cost")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveCost))
		needWriteComma = true
	}
	if m.ReviveTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_PosChange) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_TransFormNotice) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_CreateAirWallPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AirWallId != 0 {
		w.RawByte('"')
		w.RawString("air_wall_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AirWallId))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_DestroyAirWallPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AirWallId != 0 {
		w.RawByte('"')
		w.RawString("air_wall_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AirWallId))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_CurAirWallPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("air_walls")
	w.RawByte('"')
	w.RawByte(':')
	if m.AirWalls == nil {
		w.RawString("null")
	} else if len(m.AirWalls) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAirWalls := len(m.AirWalls)
		for k, v := range m.AirWalls {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAirWalls--
			if mlAirWalls != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_RevivePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.ReviveTyp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveTyp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_QueryDeadPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DeadId != "" {
		w.RawByte('"')
		w.RawString("dead_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeadId)
		needWriteComma = true
	}
	if m.ReviveCost != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_cost")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveCost))
		needWriteComma = true
	}
	if m.ReviveTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_TransFormRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ChangeHero) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ChangeHeroPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equip == nil {
		w.RawString("null")
	} else if len(m.Equip) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquip := len(m.Equip)
		for k, v := range m.Equip {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquip--
			if mlEquip != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ChangeHeroSelfPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.RemainCd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_cd")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainCd))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.Directly != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("directly")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Directly))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ReviveHeroPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ExitBattle) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_ExitBattlePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_AIStatus) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsAi {
		w.RawByte('"')
		w.RawString("is_ai")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAi)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_SyncNicknameChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_HeroesChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HeroIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroIndex))
		needWriteComma = true
	}
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ChangeType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("change_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChangeType))
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AutoSoulSkill != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_soul_skill")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AutoSoulSkill))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_UserTitleChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_UserLevelChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_GetRlBattleRoomsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_GetRlBattleRoomsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rl_rooms")
	w.RawByte('"')
	w.RawByte(':')
	if m.RlRooms == nil {
		w.RawString("null")
	} else if len(m.RlRooms) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RlRooms {
			v.JsonBytes(w)
			if i != len(m.RlRooms)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CurIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurIdx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_RlDataPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DungeonId != 0 {
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rl_rooms")
	w.RawByte('"')
	w.RawByte(':')
	if m.RlRooms == nil {
		w.RawString("null")
	} else if len(m.RlRooms) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RlRooms {
			v.JsonBytes(w)
			if i != len(m.RlRooms)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CurRoomIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_room_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurRoomIdx))
		needWriteComma = true
	}
	if m.StartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("outer_reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.OuterReward == nil {
		w.RawString("null")
	} else if len(m.OuterReward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.OuterReward {
			v.JsonBytes(w)
			if i != len(m.OuterReward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("inner_artifact")
	w.RawByte('"')
	w.RawByte(':')
	if m.InnerArtifact == nil {
		w.RawString("null")
	} else if len(m.InnerArtifact) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.InnerArtifact {
			w.Int64(int64(v))
			if i != len(m.InnerArtifact)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsBlockAction {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_block_action")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsBlockAction)
		needWriteComma = true
	}
	if m.OnBridge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("on_bridge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.OnBridge)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("air_walls")
	w.RawByte('"')
	w.RawByte(':')
	if m.AirWalls == nil {
		w.RawString("null")
	} else if len(m.AirWalls) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAirWalls := len(m.AirWalls)
		for k, v := range m.AirWalls {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAirWalls--
			if mlAirWalls != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.UseTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("use_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UseTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BlockPlayerActionPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ServerFrame != 0 {
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_UnblockPlayerActionPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ServerFrame != 0 {
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_RlRoomSettlePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("outer_reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.OuterReward == nil {
		w.RawString("null")
	} else if len(m.OuterReward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.OuterReward {
			v.JsonBytes(w)
			if i != len(m.OuterReward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("optional_artifact")
	w.RawByte('"')
	w.RawByte(':')
	if m.OptionalArtifact == nil {
		w.RawString("null")
	} else if len(m.OptionalArtifact) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.OptionalArtifact {
			w.Int64(int64(v))
			if i != len(m.OptionalArtifact)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.RoomIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomIdx))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_RlSelectArtifactRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Idx != 0 {
		w.RawByte('"')
		w.RawString("idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Idx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_RlSelectArtifactResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Idx != 0 {
		w.RawByte('"')
		w.RawString("idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Idx))
		needWriteComma = true
	}
	if m.ArtifactId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("artifact_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ArtifactId))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BossSchemeInitPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.BossId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.BossId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BossSchemePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleIds == nil {
		w.RawString("null")
	} else if len(m.RoleIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleIds {
			w.String(v)
			if i != len(m.RoleIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if math.Abs(float64(m.PassTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pass_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.PassTime))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("points")
	w.RawByte('"')
	w.RawByte(':')
	if m.Points == nil {
		w.RawString("null")
	} else if len(m.Points) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Points {
			v.JsonBytes(w)
			if i != len(m.Points)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Idx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Idx))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BossSchemeClickPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_HeroUpdate) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equip == nil {
		w.RawString("null")
	} else if len(m.Equip) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquip := len(m.Equip)
		for k, v := range m.Equip {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquip--
			if mlEquip != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.SkillIds == nil {
		w.RawString("null")
	} else if len(m.SkillIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SkillIds {
			v.JsonBytes(w)
			if i != len(m.SkillIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsSkillChange {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_skill_change")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSkillChange)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buff == nil {
		w.RawString("null")
	} else if len(m.Buff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Buff {
			w.Int64(int64(v))
			if i != len(m.Buff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip_light_effect")
	w.RawByte('"')
	w.RawByte(':')
	if m.EquipLightEffect == nil {
		w.RawString("null")
	} else if len(m.EquipLightEffect) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquipLightEffect := len(m.EquipLightEffect)
		for k, v := range m.EquipLightEffect {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquipLightEffect--
			if mlEquipLightEffect != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Fashion != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fashion")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Fashion))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_HeroAttrUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ObjId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AutoSoulSkill != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_soul_skill")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AutoSoulSkill))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_HeroFashionPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.HeroConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroConfigId))
		needWriteComma = true
	}
	if m.Fashion != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fashion")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Fashion))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_TaskMoveStart) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("dest")
	w.RawByte('"')
	w.RawByte(':')
	m.Dest.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.MaxRadius)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("maxRadius")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.MaxRadius))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_TaskMoveFinish) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("dest")
	w.RawByte('"')
	w.RawByte(':')
	m.Dest.JsonBytes(w)
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_TaskMoveEnd) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_SetSelect) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.SelectId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("select_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SelectId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_SetTarget) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.TargetId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("target_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TargetId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_GuildBossDamageSync) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SelfDamage != 0 {
		w.RawByte('"')
		w.RawString("self_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SelfDamage))
		needWriteComma = true
	}
	if m.TotalDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamage))
		needWriteComma = true
	}
	if math.Abs(float64(m.RemainTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.RemainTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_MonsterFullHPPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_SetShowLog) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.IsShowLog {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_show_log")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsShowLog)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BuffAttr) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.FixValue)) > 0.000001 {
		w.RawByte('"')
		w.RawString("fix_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.FixValue))
		needWriteComma = true
	}
	if math.Abs(float64(m.PercentValue)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("percent_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.PercentValue))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ObjectInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffAttr == nil {
		w.RawString("null")
	} else if len(m.BuffAttr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuffAttr := len(m.BuffAttr)
		for k, v := range m.BuffAttr {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBuffAttr--
			if mlBuffAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ShowSkillsLogs) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("attacker")
	w.RawByte('"')
	w.RawByte(':')
	m.Attacker.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("defender")
	w.RawByte('"')
	w.RawByte(':')
	m.Defender.JsonBytes(w)
	needWriteComma = true
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.BuffId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("buff_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuffId))
		needWriteComma = true
	}
	if m.IsCri {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_cri")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsCri)
		needWriteComma = true
	}
	if m.IsDodge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_dodge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDodge)
		needWriteComma = true
	}
	if m.IsParry {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_parry")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsParry)
		needWriteComma = true
	}
	if m.LogType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("log_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LogType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("change_value")
	w.RawByte('"')
	w.RawByte(':')
	if m.ChangeValue == nil {
		w.RawString("null")
	} else if len(m.ChangeValue) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ChangeValue {
			w.Int64(int64(v))
			if i != len(m.ChangeValue)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffAttr == nil {
		w.RawString("null")
	} else if len(m.BuffAttr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuffAttr := len(m.BuffAttr)
		for k, v := range m.BuffAttr {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBuffAttr--
			if mlBuffAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("cal_buff_attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.CalBuffAttr == nil {
		w.RawString("null")
	} else if len(m.CalBuffAttr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCalBuffAttr := len(m.CalBuffAttr)
		for k, v := range m.CalBuffAttr {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Float64(float64(v))
			mlCalBuffAttr--
			if mlCalBuffAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_EdgeKillPlayer) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleId == nil {
		w.RawString("null")
	} else if len(m.RoleId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleId {
			w.String(v)
			if i != len(m.RoleId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_KeepAliveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_KeepAliveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_DrawSkillOpenPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.IsOpen {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_open")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOpen)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_DrawSKillRangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Pos == nil {
		w.RawString("null")
	} else if len(m.Pos) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Pos {
			v.JsonBytes(w)
			if i != len(m.Pos)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if math.Abs(float64(m.Length)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("length")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Length))
		needWriteComma = true
	}
	if math.Abs(float64(m.Width)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("width")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Width))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ShowFightLog) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.IsOpen {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_open")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOpen)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_SoulPwerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_SyncSkillInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SkillId != 0 {
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.SkillCd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_cd")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillCd))
		needWriteComma = true
	}
	if m.SkillCdDelta != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_cd_delta")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillCdDelta))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_SyncSkillPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skills")
	w.RawByte('"')
	w.RawByte(':')
	if m.Skills == nil {
		w.RawString("null")
	} else if len(m.Skills) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlSkills := len(m.Skills)
		for k, v := range m.Skills {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlSkills--
			if mlSkills != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BossDeadPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BossId != "" {
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.BossId)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.BossPos.JsonBytes(w)
	needWriteComma = true
	if m.KillerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("killer_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.KillerId)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ExitBossLandPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_BossRefreshPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RefreshTime != 0 {
		w.RawByte('"')
		w.RawString("refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RefreshTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ItemDropPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("drop_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.DropPos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BossHallPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.RemainSeconds)) > 0.000001 {
		w.RawByte('"')
		w.RawString("remain_seconds")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.RemainSeconds))
		needWriteComma = true
	}
	if m.IsFinish {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_finish")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsFinish)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_BossHallFinishPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsSuccess {
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	if m.HasKillItems {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("has_kill_items")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasKillItems)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("kill_items")
	w.RawByte('"')
	w.RawByte(':')
	if m.KillItems == nil {
		w.RawString("null")
	} else if len(m.KillItems) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.KillItems {
			v.JsonBytes(w)
			if i != len(m.KillItems)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HasJoinItems {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("has_join_items")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasJoinItems)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("join_items")
	w.RawByte('"')
	w.RawByte(':')
	if m.JoinItems == nil {
		w.RawString("null")
	} else if len(m.JoinItems) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.JoinItems {
			v.JsonBytes(w)
			if i != len(m.JoinItems)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Killer != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("killer")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Killer)
		needWriteComma = true
	}
	if m.IsSelfKill {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_self_kill")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSelfKill)
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_PlaneDungeonStatusPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Status != 0 {
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.IdentChange != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ident_change")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IdentChange))
		needWriteComma = true
	}
	if m.AllTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("all_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AllTime))
		needWriteComma = true
	}
	if m.UseTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("use_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UseTime))
		needWriteComma = true
	}
	if m.IdentNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ident_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IdentNum))
		needWriteComma = true
	}
	if m.WaitEnd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("wait_end")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.WaitEnd))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_ExitPlaneDungeonPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_UserAutoSoulSkillPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.AutoSouleSkill != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_soule_skill")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AutoSouleSkill))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_GM) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NSNB_GM_CreateMonsterNearby) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MonsterId != 0 {
		w.RawByte('"')
		w.RawString("monster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterId))
		needWriteComma = true
	}
	if m.Test != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("test")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Test))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB_GM_CloseConn) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != 0 {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NSNB) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB) GoString() string {
	return m.String()
}

func (m *NSNB_Vec2) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_Vec2) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_Vec2) GoString() string {
	return m.String()
}

func (m *NSNB_Ping) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_Ping) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_Ping) GoString() string {
	return m.String()
}

func (m *NSNB_Pong) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_Pong) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_Pong) GoString() string {
	return m.String()
}

func (m *NSNB_EdgeAuth) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_EdgeAuth) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_EdgeAuth) GoString() string {
	return m.String()
}

func (m *NSNB_ManyPushMsg) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ManyPushMsg) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ManyPushMsg) GoString() string {
	return m.String()
}

func (m *NSNB_AuthTCPPushToServer) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_AuthTCPPushToServer) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_AuthTCPPushToServer) GoString() string {
	return m.String()
}

func (m *NSNB_BinDataVersionPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BinDataVersionPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BinDataVersionPush) GoString() string {
	return m.String()
}

func (m *NSNB_PlayerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_PlayerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_PlayerPush) GoString() string {
	return m.String()
}

func (m *NSNB_MonsterPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_MonsterPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_MonsterPush) GoString() string {
	return m.String()
}

func (m *NSNB_MoveOutPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_MoveOutPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_MoveOutPush) GoString() string {
	return m.String()
}

func (m *NSNB_MoveSyncPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_MoveSyncPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_MoveSyncPush) GoString() string {
	return m.String()
}

func (m *NSNB_ClientMoveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ClientMoveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ClientMoveRequest) GoString() string {
	return m.String()
}

func (m *NSNB_BuffInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BuffInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BuffInfo) GoString() string {
	return m.String()
}

func (m *NSNB_AttrValues) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_AttrValues) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_AttrValues) GoString() string {
	return m.String()
}

func (m *NSNB_BuffPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BuffPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BuffPush) GoString() string {
	return m.String()
}

func (m *NSNB_BuffFlyDescPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BuffFlyDescPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BuffFlyDescPush) GoString() string {
	return m.String()
}

func (m *NSNB_BuffTracingBulletPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BuffTracingBulletPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BuffTracingBulletPush) GoString() string {
	return m.String()
}

func (m *NSNB_ClientAttack) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ClientAttack) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ClientAttack) GoString() string {
	return m.String()
}

func (m *NSNB_SkillPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SkillPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SkillPush) GoString() string {
	return m.String()
}

func (m *NSNB_DamagePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_DamagePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_DamagePush) GoString() string {
	return m.String()
}

func (m *NSNB_BuffValuePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BuffValuePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BuffValuePush) GoString() string {
	return m.String()
}

func (m *NSNB_DeadPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_DeadPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_DeadPush) GoString() string {
	return m.String()
}

func (m *NSNB_DeadNotifyPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_DeadNotifyPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_DeadNotifyPush) GoString() string {
	return m.String()
}

func (m *NSNB_PosChange) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_PosChange) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_PosChange) GoString() string {
	return m.String()
}

func (m *NSNB_TransFormNotice) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_TransFormNotice) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_TransFormNotice) GoString() string {
	return m.String()
}

func (m *NSNB_CreateAirWallPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_CreateAirWallPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_CreateAirWallPush) GoString() string {
	return m.String()
}

func (m *NSNB_DestroyAirWallPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_DestroyAirWallPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_DestroyAirWallPush) GoString() string {
	return m.String()
}

func (m *NSNB_CurAirWallPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_CurAirWallPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_CurAirWallPush) GoString() string {
	return m.String()
}

func (m *NSNB_RevivePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_RevivePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_RevivePush) GoString() string {
	return m.String()
}

func (m *NSNB_QueryDeadPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_QueryDeadPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_QueryDeadPush) GoString() string {
	return m.String()
}

func (m *NSNB_TransFormRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_TransFormRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_TransFormRequest) GoString() string {
	return m.String()
}

func (m *NSNB_ChangeHero) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ChangeHero) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ChangeHero) GoString() string {
	return m.String()
}

func (m *NSNB_ChangeHeroPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ChangeHeroPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ChangeHeroPush) GoString() string {
	return m.String()
}

func (m *NSNB_ChangeHeroSelfPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ChangeHeroSelfPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ChangeHeroSelfPush) GoString() string {
	return m.String()
}

func (m *NSNB_ReviveHeroPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ReviveHeroPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ReviveHeroPush) GoString() string {
	return m.String()
}

func (m *NSNB_ExitBattle) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ExitBattle) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ExitBattle) GoString() string {
	return m.String()
}

func (m *NSNB_ExitBattlePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ExitBattlePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ExitBattlePush) GoString() string {
	return m.String()
}

func (m *NSNB_AIStatus) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_AIStatus) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_AIStatus) GoString() string {
	return m.String()
}

func (m *NSNB_SyncNicknameChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SyncNicknameChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SyncNicknameChangePush) GoString() string {
	return m.String()
}

func (m *NSNB_HeroesChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_HeroesChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_HeroesChangePush) GoString() string {
	return m.String()
}

func (m *NSNB_UserTitleChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_UserTitleChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_UserTitleChangePush) GoString() string {
	return m.String()
}

func (m *NSNB_UserLevelChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_UserLevelChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_UserLevelChangePush) GoString() string {
	return m.String()
}

func (m *NSNB_GetRlBattleRoomsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_GetRlBattleRoomsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_GetRlBattleRoomsRequest) GoString() string {
	return m.String()
}

func (m *NSNB_GetRlBattleRoomsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_GetRlBattleRoomsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_GetRlBattleRoomsResponse) GoString() string {
	return m.String()
}

func (m *NSNB_RlDataPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_RlDataPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_RlDataPush) GoString() string {
	return m.String()
}

func (m *NSNB_BlockPlayerActionPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BlockPlayerActionPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BlockPlayerActionPush) GoString() string {
	return m.String()
}

func (m *NSNB_UnblockPlayerActionPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_UnblockPlayerActionPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_UnblockPlayerActionPush) GoString() string {
	return m.String()
}

func (m *NSNB_RlRoomSettlePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_RlRoomSettlePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_RlRoomSettlePush) GoString() string {
	return m.String()
}

func (m *NSNB_RlSelectArtifactRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_RlSelectArtifactRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_RlSelectArtifactRequest) GoString() string {
	return m.String()
}

func (m *NSNB_RlSelectArtifactResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_RlSelectArtifactResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_RlSelectArtifactResponse) GoString() string {
	return m.String()
}

func (m *NSNB_BossSchemeInitPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BossSchemeInitPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BossSchemeInitPush) GoString() string {
	return m.String()
}

func (m *NSNB_BossSchemePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BossSchemePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BossSchemePush) GoString() string {
	return m.String()
}

func (m *NSNB_BossSchemeClickPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BossSchemeClickPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BossSchemeClickPush) GoString() string {
	return m.String()
}

func (m *NSNB_HeroUpdate) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_HeroUpdate) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_HeroUpdate) GoString() string {
	return m.String()
}

func (m *NSNB_HeroAttrUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_HeroAttrUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_HeroAttrUpdatePush) GoString() string {
	return m.String()
}

func (m *NSNB_HeroFashionPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_HeroFashionPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_HeroFashionPush) GoString() string {
	return m.String()
}

func (m *NSNB_TaskMoveStart) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_TaskMoveStart) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_TaskMoveStart) GoString() string {
	return m.String()
}

func (m *NSNB_TaskMoveFinish) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_TaskMoveFinish) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_TaskMoveFinish) GoString() string {
	return m.String()
}

func (m *NSNB_TaskMoveEnd) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_TaskMoveEnd) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_TaskMoveEnd) GoString() string {
	return m.String()
}

func (m *NSNB_SetSelect) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SetSelect) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SetSelect) GoString() string {
	return m.String()
}

func (m *NSNB_SetTarget) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SetTarget) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SetTarget) GoString() string {
	return m.String()
}

func (m *NSNB_GuildBossDamageSync) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_GuildBossDamageSync) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_GuildBossDamageSync) GoString() string {
	return m.String()
}

func (m *NSNB_MonsterFullHPPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_MonsterFullHPPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_MonsterFullHPPush) GoString() string {
	return m.String()
}

func (m *NSNB_SetShowLog) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SetShowLog) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SetShowLog) GoString() string {
	return m.String()
}

func (m *NSNB_BuffAttr) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BuffAttr) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BuffAttr) GoString() string {
	return m.String()
}

func (m *NSNB_ObjectInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ObjectInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ObjectInfo) GoString() string {
	return m.String()
}

func (m *NSNB_ShowSkillsLogs) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ShowSkillsLogs) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ShowSkillsLogs) GoString() string {
	return m.String()
}

func (m *NSNB_EdgeKillPlayer) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_EdgeKillPlayer) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_EdgeKillPlayer) GoString() string {
	return m.String()
}

func (m *NSNB_KeepAliveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_KeepAliveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_KeepAliveRequest) GoString() string {
	return m.String()
}

func (m *NSNB_KeepAliveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_KeepAliveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_KeepAliveResponse) GoString() string {
	return m.String()
}

func (m *NSNB_DrawSkillOpenPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_DrawSkillOpenPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_DrawSkillOpenPush) GoString() string {
	return m.String()
}

func (m *NSNB_DrawSKillRangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_DrawSKillRangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_DrawSKillRangePush) GoString() string {
	return m.String()
}

func (m *NSNB_ShowFightLog) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ShowFightLog) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ShowFightLog) GoString() string {
	return m.String()
}

func (m *NSNB_SoulPwerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SoulPwerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SoulPwerPush) GoString() string {
	return m.String()
}

func (m *NSNB_SyncSkillInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SyncSkillInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SyncSkillInfo) GoString() string {
	return m.String()
}

func (m *NSNB_SyncSkillPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_SyncSkillPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_SyncSkillPush) GoString() string {
	return m.String()
}

func (m *NSNB_BossDeadPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BossDeadPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BossDeadPush) GoString() string {
	return m.String()
}

func (m *NSNB_ExitBossLandPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ExitBossLandPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ExitBossLandPush) GoString() string {
	return m.String()
}

func (m *NSNB_BossRefreshPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BossRefreshPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BossRefreshPush) GoString() string {
	return m.String()
}

func (m *NSNB_ItemDropPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ItemDropPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ItemDropPush) GoString() string {
	return m.String()
}

func (m *NSNB_BossHallPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BossHallPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BossHallPush) GoString() string {
	return m.String()
}

func (m *NSNB_BossHallFinishPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_BossHallFinishPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_BossHallFinishPush) GoString() string {
	return m.String()
}

func (m *NSNB_PlaneDungeonStatusPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_PlaneDungeonStatusPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_PlaneDungeonStatusPush) GoString() string {
	return m.String()
}

func (m *NSNB_ExitPlaneDungeonPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_ExitPlaneDungeonPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_ExitPlaneDungeonPush) GoString() string {
	return m.String()
}

func (m *NSNB_UserAutoSoulSkillPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_UserAutoSoulSkillPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_UserAutoSoulSkillPush) GoString() string {
	return m.String()
}

func (m *NSNB_GM) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_GM) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_GM) GoString() string {
	return m.String()
}

func (m *NSNB_GM_CreateMonsterNearby) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_GM_CreateMonsterNearby) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_GM_CreateMonsterNearby) GoString() string {
	return m.String()
}

func (m *NSNB_GM_CloseConn) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NSNB_GM_CloseConn) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NSNB_GM_CloseConn) GoString() string {
	return m.String()
}

func (m *NSNB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_Vec2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	return n
}

func (m *NSNB_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ClientTime))
	}
	return n
}

func (m *NSNB_Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ClientTime))
	}
	if m.ServerTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ServerTime))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_EdgeAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_ManyPushMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_AuthTCPPushToServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if m.ClientTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ClientTime))
	}
	if m.BinDataVersion != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BinDataVersion))
	}
	return n
}

func (m *NSNB_BinDataVersionPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BinDataVersion != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BinDataVersion))
	}
	l = len(m.ServerIp)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_PlayerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.SectName)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Level))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.HeroIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroIndex))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.CampId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.CampId))
	}
	if len(m.FriendCampIds) > 0 {
		l = 0
		for _, e := range m.FriendCampIds {
			l += sovCppBattleNew(uint64(e))
		}
		n += 1 + sovCppBattleNew(uint64(l)) + l
	}
	if m.Title != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Title))
	}
	if m.AutoSoulSkill != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AutoSoulSkill))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_MonsterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.HeroIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroIndex))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if m.CampId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.CampId))
	}
	if len(m.FriendCampIds) > 0 {
		l = 0
		for _, e := range m.FriendCampIds {
			l += sovCppBattleNew(uint64(e))
		}
		n += 1 + sovCppBattleNew(uint64(l)) + l
	}
	l = len(m.SummonedId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.SummonedName)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.SummonedType != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SummonedType))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Level))
	}
	if m.Buffs != nil {
		l = m.Buffs.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_MoveOutPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObjId) > 0 {
		for _, s := range m.ObjId {
			l = len(s)
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_MoveSyncPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.MoveDir != nil {
		l = m.MoveDir.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.CurrPos != nil {
		l = m.CurrPos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.IsStop {
		n += 2
	}
	if m.CustomSpeed != 0 {
		n += 5
	}
	if m.SpeedRate != 0 {
		n += 5
	}
	if m.MoveStatus != 0 {
		n += 1 + sovCppBattleNew(uint64(m.MoveStatus))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ClientMoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Typ))
	}
	if m.DestOrDir != nil {
		l = m.DestOrDir.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.IsManual != 0 {
		n += 1 + sovCppBattleNew(uint64(m.IsManual))
	}
	return n
}

func (m *NSNB_BuffInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Id))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if m.RemainTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.RemainTime))
	}
	if m.OverlayCount != 0 {
		n += 1 + sovCppBattleNew(uint64(m.OverlayCount))
	}
	l = len(m.CasterId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	return n
}

func (m *NSNB_AttrValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixValue != 0 {
		n += 1 + sovCppBattleNew(uint64(m.FixValue))
	}
	if m.PercentValue != 0 {
		n += 1 + sovCppBattleNew(uint64(m.PercentValue))
	}
	return n
}

func (m *NSNB_BuffPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if len(m.Buffs) > 0 {
		for k, v := range m.Buffs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattleNew(uint64(l))
			}
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + l
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.HeroConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroConfigId))
	}
	if len(m.BuffAttrs) > 0 {
		for k, v := range m.BuffAttrs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattleNew(uint64(l))
			}
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + l
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BuffFlyDescPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if len(m.Buffs) > 0 {
		l = 0
		for _, e := range m.Buffs {
			l += sovCppBattleNew(uint64(e))
		}
		n += 1 + sovCppBattleNew(uint64(l)) + l
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BuffTracingBulletPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	l = len(m.CasterId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.BulletId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ClientAttack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.DefenderId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.AttackerHeroId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AttackerHeroId))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillId))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_SkillPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.DefenderId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillId))
	}
	if m.SkillViewIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillViewIndex))
	}
	if m.AttackerHeroId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AttackerHeroId))
	}
	if m.SkillSeq != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillSeq))
	}
	if m.SkillSpeed != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillSpeed))
	}
	if m.SkillCd != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillCd))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_DamagePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.DefenderId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillId))
	}
	if m.SkillViewIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillViewIndex))
	}
	if m.SkillIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillIndex))
	}
	if m.Damage != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Damage))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.DamageColor != 0 {
		n += 1 + sovCppBattleNew(uint64(m.DamageColor))
	}
	if m.IsDodge {
		n += 2
	}
	if m.IsParry {
		n += 2
	}
	if m.AttackerConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AttackerConfigId))
	}
	if m.DefenderConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.DefenderConfigId))
	}
	if m.IsReflect {
		n += 2
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BuffValuePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.CasterId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Value))
	}
	if m.ValueType != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ValueType))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.DamageColor != 0 {
		n += 1 + sovCppBattleNew(uint64(m.DamageColor))
	}
	if m.IsDodge {
		n += 2
	}
	if m.IsParry {
		n += 2
	}
	if m.CasterConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.CasterConfigId))
	}
	if m.OwnerConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.OwnerConfigId))
	}
	if m.AddType {
		n += 2
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_DeadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.DeadId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillId))
	}
	if m.SkillViewIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillViewIndex))
	}
	if m.SkillIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillIndex))
	}
	if m.Damage != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Damage))
	}
	if len(m.Drop) > 0 {
		for _, e := range m.Drop {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.AttackerConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AttackerConfigId))
	}
	if m.DefenderConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.DefenderConfigId))
	}
	if m.ReviveCost != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ReviveCost))
	}
	if m.ReviveTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ReviveTime))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_DeadNotifyPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeadId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.DefenderConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.DefenderConfigId))
	}
	if m.ReviveCost != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ReviveCost))
	}
	if m.ReviveTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ReviveTime))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_PosChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	return n
}

func (m *NSNB_TransFormNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_CreateAirWallPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AirWallId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AirWallId))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_DestroyAirWallPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AirWallId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AirWallId))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_CurAirWallPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AirWalls) > 0 {
		for k, v := range m.AirWalls {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_RevivePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ReviveTyp != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ReviveTyp))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_QueryDeadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeadId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ReviveCost != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ReviveCost))
	}
	if m.ReviveTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ReviveTime))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_TransFormRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	return n
}

func (m *NSNB_ChangeHero) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BattleServerId))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	return n
}

func (m *NSNB_ChangeHeroPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BattleServerId))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if len(m.Equip) > 0 {
		for k, v := range m.Equip {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ChangeHeroSelfPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BattleServerId))
	}
	if m.RemainCd != 0 {
		n += 1 + sovCppBattleNew(uint64(m.RemainCd))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if m.Directly != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Directly))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ReviveHeroPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ExitBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_ExitBattlePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_AIStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAi {
		n += 2
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_SyncNicknameChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_HeroesChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.HeroIndex != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroIndex))
	}
	if m.Speed != 0 {
		n += 5
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ChangeType != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ChangeType))
	}
	if m.Title != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Title))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Level))
	}
	if m.AutoSoulSkill != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AutoSoulSkill))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_UserTitleChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Title != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Title))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_UserLevelChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Level))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_GetRlBattleRoomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_GetRlBattleRoomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RlRooms) > 0 {
		for _, e := range m.RlRooms {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.CurIdx != 0 {
		n += 1 + sovCppBattleNew(uint64(m.CurIdx))
	}
	return n
}

func (m *NSNB_RlDataPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DungeonId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.DungeonId))
	}
	if len(m.RlRooms) > 0 {
		for _, e := range m.RlRooms {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.CurRoomIdx != 0 {
		n += 1 + sovCppBattleNew(uint64(m.CurRoomIdx))
	}
	if m.StartTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.EndTime))
	}
	if len(m.OuterReward) > 0 {
		for _, e := range m.OuterReward {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if len(m.InnerArtifact) > 0 {
		l = 0
		for _, e := range m.InnerArtifact {
			l += sovCppBattleNew(uint64(e))
		}
		n += 1 + sovCppBattleNew(uint64(l)) + l
	}
	if m.IsBlockAction {
		n += 2
	}
	if m.OnBridge {
		n += 2
	}
	if len(m.AirWalls) > 0 {
		for k, v := range m.AirWalls {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.UseTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.UseTime))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BlockPlayerActionPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_UnblockPlayerActionPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_RlRoomSettlePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OuterReward) > 0 {
		for _, e := range m.OuterReward {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if len(m.OptionalArtifact) > 0 {
		l = 0
		for _, e := range m.OptionalArtifact {
			l += sovCppBattleNew(uint64(e))
		}
		n += 1 + sovCppBattleNew(uint64(l)) + l
	}
	if m.RoomIdx != 0 {
		n += 1 + sovCppBattleNew(uint64(m.RoomIdx))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_RlSelectArtifactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Idx))
	}
	return n
}

func (m *NSNB_RlSelectArtifactResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Idx))
	}
	if m.ArtifactId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ArtifactId))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BossSchemeInitPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Typ))
	}
	l = len(m.BossId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BossSchemePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for _, s := range m.RoleIds {
			l = len(s)
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.PassTime != 0 {
		n += 5
	}
	if m.Typ != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Typ))
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.Idx != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Idx))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BossSchemeClickPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Typ != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Typ))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_HeroUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if len(m.Equip) > 0 {
		for k, v := range m.Equip {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if len(m.SkillIds) > 0 {
		for _, e := range m.SkillIds {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.IsSkillChange {
		n += 2
	}
	if len(m.Buff) > 0 {
		l = 0
		for _, e := range m.Buff {
			l += sovCppBattleNew(uint64(e))
		}
		n += 1 + sovCppBattleNew(uint64(l)) + l
	}
	if len(m.EquipLightEffect) > 0 {
		for k, v := range m.EquipLightEffect {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.Fashion != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Fashion))
	}
	return n
}

func (m *NSNB_HeroAttrUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BattleServerId))
	}
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.Title != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Title))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Level))
	}
	if m.AutoSoulSkill != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AutoSoulSkill))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_HeroFashionPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BattleServerId))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.HeroConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroConfigId))
	}
	if m.Fashion != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Fashion))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_TaskMoveStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dest != nil {
		l = m.Dest.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.MaxRadius != 0 {
		n += 5
	}
	return n
}

func (m *NSNB_TaskMoveFinish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dest != nil {
		l = m.Dest.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_TaskMoveEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_SetSelect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.SelectId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_SetTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_GuildBossDamageSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfDamage != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SelfDamage))
	}
	if m.TotalDamage != 0 {
		n += 1 + sovCppBattleNew(uint64(m.TotalDamage))
	}
	if m.RemainTime != 0 {
		n += 5
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_MonsterFullHPPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_SetShowLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.IsShowLog {
		n += 2
	}
	return n
}

func (m *NSNB_BuffAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixValue != 0 {
		n += 5
	}
	if m.PercentValue != 0 {
		n += 5
	}
	return n
}

func (m *NSNB_ObjectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.HeroId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroId))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCppBattleNew(uint64(len(k))) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if len(m.BuffAttr) > 0 {
		for k, v := range m.BuffAttr {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattleNew(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCppBattleNew(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NSNB_ShowSkillsLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attacker != nil {
		l = m.Attacker.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.Defender != nil {
		l = m.Defender.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillId))
	}
	if m.BuffId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.BuffId))
	}
	if m.IsCri {
		n += 2
	}
	if m.IsDodge {
		n += 2
	}
	if m.IsParry {
		n += 2
	}
	if m.LogType != 0 {
		n += 1 + sovCppBattleNew(uint64(m.LogType))
	}
	if len(m.ChangeValue) > 0 {
		l = 0
		for _, e := range m.ChangeValue {
			l += sovCppBattleNew(uint64(e))
		}
		n += 2 + sovCppBattleNew(uint64(l)) + l
	}
	if len(m.BuffAttr) > 0 {
		for k, v := range m.BuffAttr {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattleNew(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCppBattleNew(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if len(m.CalBuffAttr) > 0 {
		for k, v := range m.CalBuffAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCppBattleNew(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 2 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NSNB_EdgeKillPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		for _, s := range m.RoleId {
			l = len(s)
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	return n
}

func (m *NSNB_KeepAliveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_KeepAliveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_DrawSkillOpenPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.IsOpen {
		n += 2
	}
	return n
}

func (m *NSNB_DrawSKillRangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pos) > 0 {
		for _, e := range m.Pos {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.Length != 0 {
		n += 5
	}
	if m.Width != 0 {
		n += 5
	}
	if m.Typ != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Typ))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ShowFightLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.IsOpen {
		n += 2
	}
	return n
}

func (m *NSNB_SoulPwerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.HeroId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroId))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + 1 + sovCppBattleNew(uint64(v))
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_SyncSkillInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkillId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillId))
	}
	if m.Status != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Status))
	}
	if m.SkillCd != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillCd))
	}
	if m.SkillCdDelta != 0 {
		n += 1 + sovCppBattleNew(uint64(m.SkillCdDelta))
	}
	return n
}

func (m *NSNB_SyncSkillPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.HeroId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.HeroId))
	}
	if len(m.Skills) > 0 {
		for k, v := range m.Skills {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattleNew(uint64(l))
			}
			mapEntrySize := 1 + sovCppBattleNew(uint64(k)) + l
			n += mapEntrySize + 1 + sovCppBattleNew(uint64(mapEntrySize))
		}
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BossDeadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BossId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.ConfigId))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.BossPos != nil {
		l = m.BossPos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	l = len(m.KillerId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ExitBossLandPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_BossRefreshPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefreshTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.RefreshTime))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ItemDropPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.DropPos != nil {
		l = m.DropPos.Size()
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BossHallPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainSeconds != 0 {
		n += 5
	}
	if m.IsFinish {
		n += 2
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_BossHallFinishPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.HasKillItems {
		n += 2
	}
	if len(m.KillItems) > 0 {
		for _, e := range m.KillItems {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	if m.HasJoinItems {
		n += 2
	}
	if len(m.JoinItems) > 0 {
		for _, e := range m.JoinItems {
			l = e.Size()
			n += 1 + l + sovCppBattleNew(uint64(l))
		}
	}
	l = len(m.Killer)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.IsSelfKill {
		n += 2
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_PlaneDungeonStatusPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Status))
	}
	if m.IdentChange != 0 {
		n += 1 + sovCppBattleNew(uint64(m.IdentChange))
	}
	if m.AllTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AllTime))
	}
	if m.UseTime != 0 {
		n += 1 + sovCppBattleNew(uint64(m.UseTime))
	}
	if m.IdentNum != 0 {
		n += 1 + sovCppBattleNew(uint64(m.IdentNum))
	}
	if m.WaitEnd != 0 {
		n += 1 + sovCppBattleNew(uint64(m.WaitEnd))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_ExitPlaneDungeonPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_UserAutoSoulSkillPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattleNew(uint64(l))
	}
	if m.AutoSouleSkill != 0 {
		n += 1 + sovCppBattleNew(uint64(m.AutoSouleSkill))
	}
	if m.ServerFrame != 0 {
		n += 2 + sovCppBattleNew(uint64(m.ServerFrame))
	}
	return n
}

func (m *NSNB_GM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NSNB_GM_CreateMonsterNearby) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonsterId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.MonsterId))
	}
	if m.Test != 0 {
		n += 1 + sovCppBattleNew(uint64(m.Test))
	}
	return n
}

func (m *NSNB_GM_CloseConn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovCppBattleNew(uint64(m.RoleId))
	}
	return n
}

func sovCppBattleNew(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCppBattleNew(x uint64) (n int) {
	return sovCppBattleNew(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NSNB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSNB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSNB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_Vec2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vec2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vec2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_EdgeAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ManyPushMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManyPushMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManyPushMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_AuthTCPPushToServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthTCPPushToServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthTCPPushToServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinDataVersion", wireType)
			}
			m.BinDataVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BinDataVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BinDataVersionPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinDataVersionPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinDataVersionPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinDataVersion", wireType)
			}
			m.BinDataVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BinDataVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_PlayerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &NSNB_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &NSNB_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampId", wireType)
			}
			m.CampId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FriendCampIds = append(m.FriendCampIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FriendCampIds) == 0 {
					m.FriendCampIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FriendCampIds = append(m.FriendCampIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendCampIds", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSoulSkill", wireType)
			}
			m.AutoSoulSkill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoSoulSkill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_MonsterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &NSNB_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &NSNB_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampId", wireType)
			}
			m.CampId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FriendCampIds = append(m.FriendCampIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FriendCampIds) == 0 {
					m.FriendCampIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FriendCampIds = append(m.FriendCampIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendCampIds", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummonedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SummonedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummonedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SummonedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummonedType", wireType)
			}
			m.SummonedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SummonedType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffs == nil {
				m.Buffs = &NSNB_BuffPush{}
			}
			if err := m.Buffs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_MoveOutPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveOutPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveOutPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = append(m.ObjId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_MoveSyncPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveSyncPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveSyncPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveDir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoveDir == nil {
				m.MoveDir = &NSNB_Vec2{}
			}
			if err := m.MoveDir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &NSNB_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrPos == nil {
				m.CurrPos = &NSNB_Vec2{}
			}
			if err := m.CurrPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStop = bool(v != 0)
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CustomSpeed = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SpeedRate = float32(math.Float32frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveStatus", wireType)
			}
			m.MoveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoveStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ClientMoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestOrDir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestOrDir == nil {
				m.DestOrDir = &NSNB_Vec2{}
			}
			if err := m.DestOrDir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManual", wireType)
			}
			m.IsManual = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsManual |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BuffInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlayCount", wireType)
			}
			m.OverlayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverlayCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CasterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CasterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_AttrValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttrValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttrValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixValue", wireType)
			}
			m.FixValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentValue", wireType)
			}
			m.PercentValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BuffPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffs == nil {
				m.Buffs = make(map[int64]*NSNB_BuffInfo)
			}
			var mapkey int64
			var mapvalue *NSNB_BuffInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NSNB_BuffInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Buffs[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroConfigId", wireType)
			}
			m.HeroConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuffAttrs == nil {
				m.BuffAttrs = make(map[int64]*NSNB_AttrValues)
			}
			var mapkey int64
			var mapvalue *NSNB_AttrValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NSNB_AttrValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuffAttrs[mapkey] = mapvalue
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BuffFlyDescPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffFlyDescPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffFlyDescPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Buffs = append(m.Buffs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Buffs) == 0 {
					m.Buffs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Buffs = append(m.Buffs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BuffTracingBulletPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffTracingBulletPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffTracingBulletPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CasterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CasterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BulletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ClientAttack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientAttack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientAttack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerHeroId", wireType)
			}
			m.AttackerHeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerHeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SkillPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillViewIndex", wireType)
			}
			m.SkillViewIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillViewIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerHeroId", wireType)
			}
			m.AttackerHeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerHeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillSeq", wireType)
			}
			m.SkillSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillSpeed", wireType)
			}
			m.SkillSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillSpeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillCd", wireType)
			}
			m.SkillCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillCd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_DamagePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamagePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamagePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillViewIndex", wireType)
			}
			m.SkillViewIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillViewIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillIndex", wireType)
			}
			m.SkillIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageColor", wireType)
			}
			m.DamageColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageColor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDodge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDodge = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsParry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsParry = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerConfigId", wireType)
			}
			m.AttackerConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderConfigId", wireType)
			}
			m.DefenderConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReflect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReflect = bool(v != 0)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BuffValuePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffValuePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffValuePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CasterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CasterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageColor", wireType)
			}
			m.DamageColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageColor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDodge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDodge = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsParry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsParry = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CasterConfigId", wireType)
			}
			m.CasterConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CasterConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerConfigId", wireType)
			}
			m.OwnerConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddType = bool(v != 0)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_DeadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillViewIndex", wireType)
			}
			m.SkillViewIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillViewIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillIndex", wireType)
			}
			m.SkillIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drop = append(m.Drop, &models.Item{})
			if err := m.Drop[len(m.Drop)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerConfigId", wireType)
			}
			m.AttackerConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderConfigId", wireType)
			}
			m.DefenderConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveCost", wireType)
			}
			m.ReviveCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveTime", wireType)
			}
			m.ReviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_DeadNotifyPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeadNotifyPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeadNotifyPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderConfigId", wireType)
			}
			m.DefenderConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveCost", wireType)
			}
			m.ReviveCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveTime", wireType)
			}
			m.ReviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_PosChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PosChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PosChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &NSNB_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &NSNB_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_TransFormNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransFormNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransFormNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &NSNB_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &NSNB_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_CreateAirWallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAirWallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAirWallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirWallId", wireType)
			}
			m.AirWallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirWallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_DestroyAirWallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyAirWallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyAirWallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirWallId", wireType)
			}
			m.AirWallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirWallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_CurAirWallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurAirWallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurAirWallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirWalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AirWalls == nil {
				m.AirWalls = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AirWalls[mapkey] = mapvalue
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_RevivePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevivePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevivePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveTyp", wireType)
			}
			m.ReviveTyp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveTyp |= ReviveTyp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &NSNB_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_QueryDeadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveCost", wireType)
			}
			m.ReviveCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveTime", wireType)
			}
			m.ReviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_TransFormRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransFormRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransFormRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &NSNB_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &NSNB_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ChangeHero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ChangeHeroPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHeroPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHeroPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equip == nil {
				m.Equip = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Equip[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ChangeHeroSelfPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHeroSelfPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHeroSelfPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainCd", wireType)
			}
			m.RemainCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainCd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directly", wireType)
			}
			m.Directly = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Directly |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ReviveHeroPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviveHeroPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviveHeroPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ExitBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ExitBattlePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitBattlePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitBattlePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_AIStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AIStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AIStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAi = bool(v != 0)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SyncNicknameChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncNicknameChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncNicknameChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_HeroesChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroesChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroesChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSoulSkill", wireType)
			}
			m.AutoSoulSkill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoSoulSkill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_UserTitleChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_UserLevelChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLevelChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLevelChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_GetRlBattleRoomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRlBattleRoomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRlBattleRoomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_GetRlBattleRoomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRlBattleRoomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRlBattleRoomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RlRooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RlRooms = append(m.RlRooms, &models.RlBattleRoom{})
			if err := m.RlRooms[len(m.RlRooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurIdx", wireType)
			}
			m.CurIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_RlDataPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RlDataPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RlDataPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RlRooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RlRooms = append(m.RlRooms, &models.RlBattleRoom{})
			if err := m.RlRooms[len(m.RlRooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurRoomIdx", wireType)
			}
			m.CurRoomIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurRoomIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OuterReward = append(m.OuterReward, &models.Item{})
			if err := m.OuterReward[len(m.OuterReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InnerArtifact = append(m.InnerArtifact, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.InnerArtifact) == 0 {
					m.InnerArtifact = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InnerArtifact = append(m.InnerArtifact, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerArtifact", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlockAction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlockAction = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnBridge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnBridge = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirWalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AirWalls == nil {
				m.AirWalls = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AirWalls[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTime", wireType)
			}
			m.UseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BlockPlayerActionPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPlayerActionPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPlayerActionPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_UnblockPlayerActionPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnblockPlayerActionPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnblockPlayerActionPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_RlRoomSettlePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RlRoomSettlePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RlRoomSettlePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OuterReward = append(m.OuterReward, &models.Item{})
			if err := m.OuterReward[len(m.OuterReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OptionalArtifact = append(m.OptionalArtifact, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OptionalArtifact) == 0 {
					m.OptionalArtifact = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OptionalArtifact = append(m.OptionalArtifact, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalArtifact", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIdx", wireType)
			}
			m.RoomIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_RlSelectArtifactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RlSelectArtifactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RlSelectArtifactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_RlSelectArtifactResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RlSelectArtifactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RlSelectArtifactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactId", wireType)
			}
			m.ArtifactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArtifactId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BossSchemeInitPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossSchemeInitPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossSchemeInitPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BossSchemePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossSchemePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossSchemePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIds = append(m.RoleIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PassTime = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &NSNB_Vec2{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BossSchemeClickPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossSchemeClickPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossSchemeClickPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= ClickTyp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_HeroUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equip == nil {
				m.Equip = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Equip[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillIds = append(m.SkillIds, &models.HeroSkillAndStone{})
			if err := m.SkillIds[len(m.SkillIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSkillChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSkillChange = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Buff = append(m.Buff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Buff) == 0 {
					m.Buff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Buff = append(m.Buff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipLightEffect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipLightEffect == nil {
				m.EquipLightEffect = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EquipLightEffect[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fashion", wireType)
			}
			m.Fashion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fashion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_HeroAttrUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroAttrUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroAttrUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &NSNB_HeroUpdate{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSoulSkill", wireType)
			}
			m.AutoSoulSkill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoSoulSkill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_HeroFashionPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroFashionPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroFashionPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroConfigId", wireType)
			}
			m.HeroConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fashion", wireType)
			}
			m.Fashion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fashion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_TaskMoveStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMoveStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMoveStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dest == nil {
				m.Dest = &NSNB_Vec2{}
			}
			if err := m.Dest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRadius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxRadius = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_TaskMoveFinish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMoveFinish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMoveFinish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dest == nil {
				m.Dest = &NSNB_Vec2{}
			}
			if err := m.Dest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_TaskMoveEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMoveEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMoveEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SetSelect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSelect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSelect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SetTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_GuildBossDamageSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossDamageSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossDamageSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDamage", wireType)
			}
			m.SelfDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamage", wireType)
			}
			m.TotalDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RemainTime = float32(math.Float32frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_MonsterFullHPPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterFullHPPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterFullHPPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SetShowLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetShowLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetShowLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowLog = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BuffAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FixValue = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PercentValue = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ObjectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuffAttr == nil {
				m.BuffAttr = make(map[string]*NSNB_BuffAttr)
			}
			var mapkey string
			var mapvalue *NSNB_BuffAttr
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NSNB_BuffAttr{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuffAttr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ShowSkillsLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowSkillsLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowSkillsLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attacker == nil {
				m.Attacker = &NSNB_ObjectInfo{}
			}
			if err := m.Attacker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Defender == nil {
				m.Defender = &NSNB_ObjectInfo{}
			}
			if err := m.Defender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCri", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCri = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDodge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDodge = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsParry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsParry = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			m.LogType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChangeValue = append(m.ChangeValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattleNew
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChangeValue) == 0 {
					m.ChangeValue = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChangeValue = append(m.ChangeValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeValue", wireType)
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuffAttr == nil {
				m.BuffAttr = make(map[string]*NSNB_BuffAttr)
			}
			var mapkey string
			var mapvalue *NSNB_BuffAttr
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NSNB_BuffAttr{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuffAttr[mapkey] = mapvalue
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalBuffAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CalBuffAttr == nil {
				m.CalBuffAttr = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CalBuffAttr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_EdgeKillPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeKillPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeKillPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = append(m.RoleId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_KeepAliveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepAliveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepAliveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_KeepAliveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepAliveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepAliveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_DrawSkillOpenPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawSkillOpenPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawSkillOpenPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_DrawSKillRangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawSKillRangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawSKillRangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pos = append(m.Pos, &NSNB_Vec2{})
			if err := m.Pos[len(m.Pos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Length = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Width = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ShowFightLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowFightLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowFightLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SoulPwerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoulPwerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoulPwerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SyncSkillInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncSkillInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncSkillInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillCd", wireType)
			}
			m.SkillCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillCd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillCdDelta", wireType)
			}
			m.SkillCdDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillCdDelta |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_SyncSkillPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncSkillPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncSkillPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skills == nil {
				m.Skills = make(map[int64]*NSNB_SyncSkillInfo)
			}
			var mapkey int64
			var mapvalue *NSNB_SyncSkillInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattleNew
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattleNew
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NSNB_SyncSkillInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattleNew(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattleNew
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Skills[mapkey] = mapvalue
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BossDeadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossDeadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossDeadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossPos == nil {
				m.BossPos = &models.Vec2{}
			}
			if err := m.BossPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ExitBossLandPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitBossLandPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitBossLandPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BossRefreshPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossRefreshPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossRefreshPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ItemDropPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDropPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDropPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropPos == nil {
				m.DropPos = &models.Vec2{}
			}
			if err := m.DropPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BossHallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossHallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossHallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainSeconds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RemainSeconds = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinish = bool(v != 0)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_BossHallFinishPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossHallFinishPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossHallFinishPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasKillItems", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasKillItems = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillItems = append(m.KillItems, &models.Item{})
			if err := m.KillItems[len(m.KillItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasJoinItems", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasJoinItems = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinItems = append(m.JoinItems, &models.Item{})
			if err := m.JoinItems[len(m.JoinItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Killer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelfKill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelfKill = bool(v != 0)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_PlaneDungeonStatusPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaneDungeonStatusPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaneDungeonStatusPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentChange", wireType)
			}
			m.IdentChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdentChange |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllTime", wireType)
			}
			m.AllTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTime", wireType)
			}
			m.UseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentNum", wireType)
			}
			m.IdentNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdentNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitEnd", wireType)
			}
			m.WaitEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_ExitPlaneDungeonPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitPlaneDungeonPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitPlaneDungeonPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_UserAutoSoulSkillPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAutoSoulSkillPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAutoSoulSkillPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSouleSkill", wireType)
			}
			m.AutoSouleSkill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoSouleSkill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_GM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_GM_CreateMonsterNearby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMonsterNearby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMonsterNearby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterId", wireType)
			}
			m.MonsterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			m.Test = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Test |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSNB_GM_CloseConn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseConn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseConn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattleNew(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattleNew
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCppBattleNew(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCppBattleNew
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppBattleNew
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCppBattleNew
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCppBattleNew
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCppBattleNew
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCppBattleNew        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCppBattleNew          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCppBattleNew = fmt.Errorf("proto: unexpected end of group")
)
