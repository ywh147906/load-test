// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/racingrank-server/racing-rank.proto

package racingrank_service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RacingRankService struct {
}

func (m *RacingRankService) Reset()      { *m = RacingRankService{} }
func (*RacingRankService) ProtoMessage() {}
func (*RacingRankService) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd66ba03797fe00c, []int{0}
}
func (m *RacingRankService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRankService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRankService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRankService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRankService.Merge(m, src)
}
func (m *RacingRankService) XXX_Size() int {
	return m.Size()
}
func (m *RacingRankService) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRankService.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRankService proto.InternalMessageInfo

func (*RacingRankService) XXX_MessageName() string {
	return "racingrank_service.RacingRankService"
}

//----------------------以下协议仅服务端之间调用----------------------//
// 检查定时任务是否存在
type RacingRankService_CronTaskCheckRequest struct {
	EndTime int64 `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *RacingRankService_CronTaskCheckRequest) Reset() {
	*m = RacingRankService_CronTaskCheckRequest{}
}
func (*RacingRankService_CronTaskCheckRequest) ProtoMessage() {}
func (*RacingRankService_CronTaskCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd66ba03797fe00c, []int{0, 0}
}
func (m *RacingRankService_CronTaskCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRankService_CronTaskCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRankService_CronTaskCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRankService_CronTaskCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRankService_CronTaskCheckRequest.Merge(m, src)
}
func (m *RacingRankService_CronTaskCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *RacingRankService_CronTaskCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRankService_CronTaskCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRankService_CronTaskCheckRequest proto.InternalMessageInfo

func (m *RacingRankService_CronTaskCheckRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (*RacingRankService_CronTaskCheckRequest) XXX_MessageName() string {
	return "racingrank_service.RacingRankService.CronTaskCheckRequest"
}

type RacingRankService_CronTaskCheckResponse struct {
}

func (m *RacingRankService_CronTaskCheckResponse) Reset() {
	*m = RacingRankService_CronTaskCheckResponse{}
}
func (*RacingRankService_CronTaskCheckResponse) ProtoMessage() {}
func (*RacingRankService_CronTaskCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd66ba03797fe00c, []int{0, 1}
}
func (m *RacingRankService_CronTaskCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRankService_CronTaskCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRankService_CronTaskCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRankService_CronTaskCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRankService_CronTaskCheckResponse.Merge(m, src)
}
func (m *RacingRankService_CronTaskCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *RacingRankService_CronTaskCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRankService_CronTaskCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRankService_CronTaskCheckResponse proto.InternalMessageInfo

func (*RacingRankService_CronTaskCheckResponse) XXX_MessageName() string {
	return "racingrank_service.RacingRankService.CronTaskCheckResponse"
}
func init() {
	proto.RegisterType((*RacingRankService)(nil), "racingrank_service.RacingRankService")
	proto.RegisterType((*RacingRankService_CronTaskCheckRequest)(nil), "racingrank_service.RacingRankService.CronTaskCheckRequest")
	proto.RegisterType((*RacingRankService_CronTaskCheckResponse)(nil), "racingrank_service.RacingRankService.CronTaskCheckResponse")
}

func init() {
	proto.RegisterFile("proto/racingrank-server/racing-rank.proto", fileDescriptor_cd66ba03797fe00c)
}

var fileDescriptor_cd66ba03797fe00c = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4a, 0x4c, 0xce, 0xcc, 0x4b, 0x2f, 0x4a, 0xcc, 0xcb, 0xd6, 0x2d, 0x4e, 0x2d,
	0x2a, 0x4b, 0x2d, 0x82, 0x8a, 0xe8, 0x82, 0x84, 0xf4, 0xc0, 0x6a, 0x84, 0x84, 0x10, 0x8a, 0xe2,
	0x41, 0x8a, 0x32, 0x93, 0x53, 0x95, 0xe2, 0xb9, 0x04, 0x83, 0xc0, 0xa2, 0x41, 0x89, 0x79, 0xd9,
	0xc1, 0x10, 0x41, 0x29, 0x43, 0x2e, 0x11, 0xe7, 0xa2, 0xfc, 0xbc, 0x90, 0xc4, 0xe2, 0x6c, 0xe7,
	0x8c, 0xd4, 0xe4, 0xec, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x49, 0x2e, 0x8e, 0xd4,
	0xbc, 0x94, 0xf8, 0x92, 0xcc, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0xf6, 0xd4,
	0xbc, 0x94, 0x90, 0xcc, 0xdc, 0x54, 0x29, 0x71, 0x2e, 0x51, 0x34, 0x2d, 0xc5, 0x05, 0xf9, 0x79,
	0xc5, 0xa9, 0x4e, 0x91, 0x37, 0x1e, 0xca, 0x31, 0xac, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c,
	0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91,
	0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x27, 0x1e, 0xcb, 0x31, 0x5e, 0x78, 0x2c, 0xc7, 0x70, 0xe3,
	0xb1, 0x1c, 0x43, 0x94, 0x76, 0x72, 0x7e, 0x66, 0x1e, 0xcc, 0x07, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9,
	0x79, 0xfa, 0xe8, 0x1e, 0x84, 0xb9, 0x3d, 0x89, 0x0d, 0x2c, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x0a, 0x44, 0xa2, 0x53, 0x03, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRankService.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRankService_CronTaskCheckRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRankService_CronTaskCheckResponse.Get().(proto.Message)
	})
}

var poolRacingRankService = &sync.Pool{New: func() interface{} { return &RacingRankService{} }}

func (m *RacingRankService) ReleasePool() { m.Reset(); poolRacingRankService.Put(m); m = nil }

var poolRacingRankService_CronTaskCheckRequest = &sync.Pool{New: func() interface{} { return &RacingRankService_CronTaskCheckRequest{} }}

func (m *RacingRankService_CronTaskCheckRequest) ReleasePool() {
	m.Reset()
	poolRacingRankService_CronTaskCheckRequest.Put(m)
	m = nil
}

var poolRacingRankService_CronTaskCheckResponse = &sync.Pool{New: func() interface{} { return &RacingRankService_CronTaskCheckResponse{} }}

func (m *RacingRankService_CronTaskCheckResponse) ReleasePool() {
	m.Reset()
	poolRacingRankService_CronTaskCheckResponse.Put(m)
	m = nil
}
func (this *RacingRankService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRankService)
	if !ok {
		that2, ok := that.(RacingRankService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RacingRankService_CronTaskCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRankService_CronTaskCheckRequest)
	if !ok {
		that2, ok := that.(RacingRankService_CronTaskCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	return true
}
func (this *RacingRankService_CronTaskCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRankService_CronTaskCheckResponse)
	if !ok {
		that2, ok := that.(RacingRankService_CronTaskCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *RacingRankService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRankService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRankService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RacingRankService_CronTaskCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRankService_CronTaskCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRankService_CronTaskCheckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RacingRankService_CronTaskCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRankService_CronTaskCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRankService_CronTaskCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRacingRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRacingRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RacingRankService) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RacingRankService_CronTaskCheckRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EndTime != 0 {
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRankService_CronTaskCheckResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RacingRankService) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRankService) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRankService) GoString() string {
	return m.String()
}

func (m *RacingRankService_CronTaskCheckRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRankService_CronTaskCheckRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRankService_CronTaskCheckRequest) GoString() string {
	return m.String()
}

func (m *RacingRankService_CronTaskCheckResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRankService_CronTaskCheckResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRankService_CronTaskCheckResponse) GoString() string {
	return m.String()
}

func (m *RacingRankService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RacingRankService_CronTaskCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovRacingRank(uint64(m.EndTime))
	}
	return n
}

func (m *RacingRankService_CronTaskCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRacingRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRacingRank(x uint64) (n int) {
	return sovRacingRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RacingRankService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RacingRankService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RacingRankService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRankService_CronTaskCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronTaskCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronTaskCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRankService_CronTaskCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronTaskCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronTaskCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRacingRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRacingRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRacingRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRacingRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRacingRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRacingRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRacingRank = fmt.Errorf("proto: unexpected end of group")
)
