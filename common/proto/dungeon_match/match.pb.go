// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dungeon-match-server/match.proto

package dungeon_match

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DungeonMatchErrorCode int32

const (
	DungeonMatchErrorCode_ErrRoomNotExist        DungeonMatchErrorCode = 0
	DungeonMatchErrorCode_ErrRoomFull            DungeonMatchErrorCode = 1
	DungeonMatchErrorCode_ErrNotOwner            DungeonMatchErrorCode = 2
	DungeonMatchErrorCode_ErrOwnerCantLeave      DungeonMatchErrorCode = 3
	DungeonMatchErrorCode_ErrNotIn               DungeonMatchErrorCode = 4
	DungeonMatchErrorCode_ErrOnlyCanJoinOneRoom  DungeonMatchErrorCode = 5
	DungeonMatchErrorCode_ErrTarNotInThisRoom    DungeonMatchErrorCode = 6
	DungeonMatchErrorCode_ErrDungeonNotExist     DungeonMatchErrorCode = 7
	DungeonMatchErrorCode_ErrBeenInvited         DungeonMatchErrorCode = 8
	DungeonMatchErrorCode_ErrOnlyOwnerCanStart   DungeonMatchErrorCode = 9
	DungeonMatchErrorCode_ErrOnlyOwnerCanInvite  DungeonMatchErrorCode = 10
	DungeonMatchErrorCode_ErrDungeonNotStart     DungeonMatchErrorCode = 11
	DungeonMatchErrorCode_ErrDungeonAlreadyStart DungeonMatchErrorCode = 12
)

var DungeonMatchErrorCode_name = map[int32]string{
	0:  "ErrRoomNotExist",
	1:  "ErrRoomFull",
	2:  "ErrNotOwner",
	3:  "ErrOwnerCantLeave",
	4:  "ErrNotIn",
	5:  "ErrOnlyCanJoinOneRoom",
	6:  "ErrTarNotInThisRoom",
	7:  "ErrDungeonNotExist",
	8:  "ErrBeenInvited",
	9:  "ErrOnlyOwnerCanStart",
	10: "ErrOnlyOwnerCanInvite",
	11: "ErrDungeonNotStart",
	12: "ErrDungeonAlreadyStart",
}

var DungeonMatchErrorCode_value = map[string]int32{
	"ErrRoomNotExist":        0,
	"ErrRoomFull":            1,
	"ErrNotOwner":            2,
	"ErrOwnerCantLeave":      3,
	"ErrNotIn":               4,
	"ErrOnlyCanJoinOneRoom":  5,
	"ErrTarNotInThisRoom":    6,
	"ErrDungeonNotExist":     7,
	"ErrBeenInvited":         8,
	"ErrOnlyOwnerCanStart":   9,
	"ErrOnlyOwnerCanInvite":  10,
	"ErrDungeonNotStart":     11,
	"ErrDungeonAlreadyStart": 12,
}

func (DungeonMatchErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0}
}

type ConfirmTyp int32

const (
	ConfirmTyp_ConfirmTypReject ConfirmTyp = 0
	ConfirmTyp_ConfirmTypAuto   ConfirmTyp = 1
	ConfirmTyp_ConfirmTypIn     ConfirmTyp = 2
)

var ConfirmTyp_name = map[int32]string{
	0: "ConfirmTypReject",
	1: "ConfirmTypAuto",
	2: "ConfirmTypIn",
}

var ConfirmTyp_value = map[string]int32{
	"ConfirmTypReject": 0,
	"ConfirmTypAuto":   1,
	"ConfirmTypIn":     2,
}

func (ConfirmTyp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{1}
}

type DungeonMatch struct {
}

func (m *DungeonMatch) Reset()      { *m = DungeonMatch{} }
func (*DungeonMatch) ProtoMessage() {}
func (*DungeonMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0}
}
func (m *DungeonMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch.Merge(m, src)
}
func (m *DungeonMatch) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch proto.InternalMessageInfo

func (*DungeonMatch) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch"
}

// 匹配离线玩家
type DungeonMatch_MatchOfflineRequest struct {
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *DungeonMatch_MatchOfflineRequest) Reset()      { *m = DungeonMatch_MatchOfflineRequest{} }
func (*DungeonMatch_MatchOfflineRequest) ProtoMessage() {}
func (*DungeonMatch_MatchOfflineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 0}
}
func (m *DungeonMatch_MatchOfflineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_MatchOfflineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_MatchOfflineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_MatchOfflineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_MatchOfflineRequest.Merge(m, src)
}
func (m *DungeonMatch_MatchOfflineRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_MatchOfflineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_MatchOfflineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_MatchOfflineRequest proto.InternalMessageInfo

func (m *DungeonMatch_MatchOfflineRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (*DungeonMatch_MatchOfflineRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.MatchOfflineRequest"
}

type DungeonMatch_MatchOfflineResponse struct {
}

func (m *DungeonMatch_MatchOfflineResponse) Reset()      { *m = DungeonMatch_MatchOfflineResponse{} }
func (*DungeonMatch_MatchOfflineResponse) ProtoMessage() {}
func (*DungeonMatch_MatchOfflineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 1}
}
func (m *DungeonMatch_MatchOfflineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_MatchOfflineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_MatchOfflineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_MatchOfflineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_MatchOfflineResponse.Merge(m, src)
}
func (m *DungeonMatch_MatchOfflineResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_MatchOfflineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_MatchOfflineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_MatchOfflineResponse proto.InternalMessageInfo

func (*DungeonMatch_MatchOfflineResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.MatchOfflineResponse"
}

// 获取各副本房间数
type DungeonMatch_GetRoomCntRequest struct {
}

func (m *DungeonMatch_GetRoomCntRequest) Reset()      { *m = DungeonMatch_GetRoomCntRequest{} }
func (*DungeonMatch_GetRoomCntRequest) ProtoMessage() {}
func (*DungeonMatch_GetRoomCntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 2}
}
func (m *DungeonMatch_GetRoomCntRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetRoomCntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetRoomCntRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetRoomCntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetRoomCntRequest.Merge(m, src)
}
func (m *DungeonMatch_GetRoomCntRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetRoomCntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetRoomCntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetRoomCntRequest proto.InternalMessageInfo

func (*DungeonMatch_GetRoomCntRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetRoomCntRequest"
}

type DungeonMatch_GetRoomCntResponse struct {
	RoomCnt []int64 `protobuf:"varint,1,rep,packed,name=room_cnt,json=roomCnt,proto3" json:"room_cnt,omitempty"`
}

func (m *DungeonMatch_GetRoomCntResponse) Reset()      { *m = DungeonMatch_GetRoomCntResponse{} }
func (*DungeonMatch_GetRoomCntResponse) ProtoMessage() {}
func (*DungeonMatch_GetRoomCntResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 3}
}
func (m *DungeonMatch_GetRoomCntResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetRoomCntResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetRoomCntResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetRoomCntResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetRoomCntResponse.Merge(m, src)
}
func (m *DungeonMatch_GetRoomCntResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetRoomCntResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetRoomCntResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetRoomCntResponse proto.InternalMessageInfo

func (m *DungeonMatch_GetRoomCntResponse) GetRoomCnt() []int64 {
	if m != nil {
		return m.RoomCnt
	}
	return nil
}

func (*DungeonMatch_GetRoomCntResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetRoomCntResponse"
}

// 创建房间
type DungeonMatch_CreateRoomRequest struct {
	DungeonId int64 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (m *DungeonMatch_CreateRoomRequest) Reset()      { *m = DungeonMatch_CreateRoomRequest{} }
func (*DungeonMatch_CreateRoomRequest) ProtoMessage() {}
func (*DungeonMatch_CreateRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 4}
}
func (m *DungeonMatch_CreateRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_CreateRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_CreateRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_CreateRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_CreateRoomRequest.Merge(m, src)
}
func (m *DungeonMatch_CreateRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_CreateRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_CreateRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_CreateRoomRequest proto.InternalMessageInfo

func (m *DungeonMatch_CreateRoomRequest) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (*DungeonMatch_CreateRoomRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.CreateRoomRequest"
}

type DungeonMatch_CreateRoomResponse struct {
	Room *models.Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *DungeonMatch_CreateRoomResponse) Reset()      { *m = DungeonMatch_CreateRoomResponse{} }
func (*DungeonMatch_CreateRoomResponse) ProtoMessage() {}
func (*DungeonMatch_CreateRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 5}
}
func (m *DungeonMatch_CreateRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_CreateRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_CreateRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_CreateRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_CreateRoomResponse.Merge(m, src)
}
func (m *DungeonMatch_CreateRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_CreateRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_CreateRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_CreateRoomResponse proto.InternalMessageInfo

func (m *DungeonMatch_CreateRoomResponse) GetRoom() *models.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*DungeonMatch_CreateRoomResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.CreateRoomResponse"
}

// 获取当前房间
type DungeonMatch_GetCurrRoomRequest struct {
}

func (m *DungeonMatch_GetCurrRoomRequest) Reset()      { *m = DungeonMatch_GetCurrRoomRequest{} }
func (*DungeonMatch_GetCurrRoomRequest) ProtoMessage() {}
func (*DungeonMatch_GetCurrRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 6}
}
func (m *DungeonMatch_GetCurrRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetCurrRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetCurrRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetCurrRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetCurrRoomRequest.Merge(m, src)
}
func (m *DungeonMatch_GetCurrRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetCurrRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetCurrRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetCurrRoomRequest proto.InternalMessageInfo

func (*DungeonMatch_GetCurrRoomRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetCurrRoomRequest"
}

type DungeonMatch_GetCurrRoomResponse struct {
	Room *models.Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *DungeonMatch_GetCurrRoomResponse) Reset()      { *m = DungeonMatch_GetCurrRoomResponse{} }
func (*DungeonMatch_GetCurrRoomResponse) ProtoMessage() {}
func (*DungeonMatch_GetCurrRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 7}
}
func (m *DungeonMatch_GetCurrRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetCurrRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetCurrRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetCurrRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetCurrRoomResponse.Merge(m, src)
}
func (m *DungeonMatch_GetCurrRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetCurrRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetCurrRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetCurrRoomResponse proto.InternalMessageInfo

func (m *DungeonMatch_GetCurrRoomResponse) GetRoom() *models.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*DungeonMatch_GetCurrRoomResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetCurrRoomResponse"
}

// 加入某个房间
type DungeonMatch_JoinRoomRequest struct {
	RoomId    int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	DungeonId int64 `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (m *DungeonMatch_JoinRoomRequest) Reset()      { *m = DungeonMatch_JoinRoomRequest{} }
func (*DungeonMatch_JoinRoomRequest) ProtoMessage() {}
func (*DungeonMatch_JoinRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 8}
}
func (m *DungeonMatch_JoinRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_JoinRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_JoinRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_JoinRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_JoinRoomRequest.Merge(m, src)
}
func (m *DungeonMatch_JoinRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_JoinRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_JoinRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_JoinRoomRequest proto.InternalMessageInfo

func (m *DungeonMatch_JoinRoomRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *DungeonMatch_JoinRoomRequest) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (*DungeonMatch_JoinRoomRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.JoinRoomRequest"
}

type DungeonMatch_JoinRoomResponse struct {
	Room *models.Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *DungeonMatch_JoinRoomResponse) Reset()      { *m = DungeonMatch_JoinRoomResponse{} }
func (*DungeonMatch_JoinRoomResponse) ProtoMessage() {}
func (*DungeonMatch_JoinRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 9}
}
func (m *DungeonMatch_JoinRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_JoinRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_JoinRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_JoinRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_JoinRoomResponse.Merge(m, src)
}
func (m *DungeonMatch_JoinRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_JoinRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_JoinRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_JoinRoomResponse proto.InternalMessageInfo

func (m *DungeonMatch_JoinRoomResponse) GetRoom() *models.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*DungeonMatch_JoinRoomResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.JoinRoomResponse"
}

// 离开某个房间
type DungeonMatch_LeaveRoomRequest struct {
	RoomId    int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	DungeonId int64 `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (m *DungeonMatch_LeaveRoomRequest) Reset()      { *m = DungeonMatch_LeaveRoomRequest{} }
func (*DungeonMatch_LeaveRoomRequest) ProtoMessage() {}
func (*DungeonMatch_LeaveRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 10}
}
func (m *DungeonMatch_LeaveRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_LeaveRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_LeaveRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_LeaveRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_LeaveRoomRequest.Merge(m, src)
}
func (m *DungeonMatch_LeaveRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_LeaveRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_LeaveRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_LeaveRoomRequest proto.InternalMessageInfo

func (m *DungeonMatch_LeaveRoomRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *DungeonMatch_LeaveRoomRequest) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (*DungeonMatch_LeaveRoomRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.LeaveRoomRequest"
}

type DungeonMatch_LeaveRoomResponse struct {
}

func (m *DungeonMatch_LeaveRoomResponse) Reset()      { *m = DungeonMatch_LeaveRoomResponse{} }
func (*DungeonMatch_LeaveRoomResponse) ProtoMessage() {}
func (*DungeonMatch_LeaveRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 11}
}
func (m *DungeonMatch_LeaveRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_LeaveRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_LeaveRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_LeaveRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_LeaveRoomResponse.Merge(m, src)
}
func (m *DungeonMatch_LeaveRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_LeaveRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_LeaveRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_LeaveRoomResponse proto.InternalMessageInfo

func (*DungeonMatch_LeaveRoomResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.LeaveRoomResponse"
}

// 获取某个玩家的房间
type DungeonMatch_GetRoleRoomRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *DungeonMatch_GetRoleRoomRequest) Reset()      { *m = DungeonMatch_GetRoleRoomRequest{} }
func (*DungeonMatch_GetRoleRoomRequest) ProtoMessage() {}
func (*DungeonMatch_GetRoleRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 12}
}
func (m *DungeonMatch_GetRoleRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetRoleRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetRoleRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetRoleRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetRoleRoomRequest.Merge(m, src)
}
func (m *DungeonMatch_GetRoleRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetRoleRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetRoleRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetRoleRoomRequest proto.InternalMessageInfo

func (m *DungeonMatch_GetRoleRoomRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*DungeonMatch_GetRoleRoomRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetRoleRoomRequest"
}

type DungeonMatch_GetRoleRoomResponse struct {
	Room *models.Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *DungeonMatch_GetRoleRoomResponse) Reset()      { *m = DungeonMatch_GetRoleRoomResponse{} }
func (*DungeonMatch_GetRoleRoomResponse) ProtoMessage() {}
func (*DungeonMatch_GetRoleRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 13}
}
func (m *DungeonMatch_GetRoleRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetRoleRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetRoleRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetRoleRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetRoleRoomResponse.Merge(m, src)
}
func (m *DungeonMatch_GetRoleRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetRoleRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetRoleRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetRoleRoomResponse proto.InternalMessageInfo

func (m *DungeonMatch_GetRoleRoomResponse) GetRoom() *models.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*DungeonMatch_GetRoleRoomResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetRoleRoomResponse"
}

// 解散房间
type DungeonMatch_DismissRoomRequest struct {
}

func (m *DungeonMatch_DismissRoomRequest) Reset()      { *m = DungeonMatch_DismissRoomRequest{} }
func (*DungeonMatch_DismissRoomRequest) ProtoMessage() {}
func (*DungeonMatch_DismissRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 14}
}
func (m *DungeonMatch_DismissRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_DismissRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_DismissRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_DismissRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_DismissRoomRequest.Merge(m, src)
}
func (m *DungeonMatch_DismissRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_DismissRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_DismissRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_DismissRoomRequest proto.InternalMessageInfo

func (*DungeonMatch_DismissRoomRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.DismissRoomRequest"
}

type DungeonMatch_DismissRoomResponse struct {
}

func (m *DungeonMatch_DismissRoomResponse) Reset()      { *m = DungeonMatch_DismissRoomResponse{} }
func (*DungeonMatch_DismissRoomResponse) ProtoMessage() {}
func (*DungeonMatch_DismissRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 15}
}
func (m *DungeonMatch_DismissRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_DismissRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_DismissRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_DismissRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_DismissRoomResponse.Merge(m, src)
}
func (m *DungeonMatch_DismissRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_DismissRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_DismissRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_DismissRoomResponse proto.InternalMessageInfo

func (*DungeonMatch_DismissRoomResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.DismissRoomResponse"
}

// 解散房间推送
type DungeonMatch_DismissEvent struct {
}

func (m *DungeonMatch_DismissEvent) Reset()      { *m = DungeonMatch_DismissEvent{} }
func (*DungeonMatch_DismissEvent) ProtoMessage() {}
func (*DungeonMatch_DismissEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 16}
}
func (m *DungeonMatch_DismissEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_DismissEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_DismissEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_DismissEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_DismissEvent.Merge(m, src)
}
func (m *DungeonMatch_DismissEvent) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_DismissEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_DismissEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_DismissEvent proto.InternalMessageInfo

func (*DungeonMatch_DismissEvent) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.DismissEvent"
}

// 设置房间配置
type DungeonMatch_SetOptionRequest struct {
	Option *models.RoomOpt `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
}

func (m *DungeonMatch_SetOptionRequest) Reset()      { *m = DungeonMatch_SetOptionRequest{} }
func (*DungeonMatch_SetOptionRequest) ProtoMessage() {}
func (*DungeonMatch_SetOptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 17}
}
func (m *DungeonMatch_SetOptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_SetOptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_SetOptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_SetOptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_SetOptionRequest.Merge(m, src)
}
func (m *DungeonMatch_SetOptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_SetOptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_SetOptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_SetOptionRequest proto.InternalMessageInfo

func (m *DungeonMatch_SetOptionRequest) GetOption() *models.RoomOpt {
	if m != nil {
		return m.Option
	}
	return nil
}

func (*DungeonMatch_SetOptionRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.SetOptionRequest"
}

type DungeonMatch_SetOptionResponse struct {
}

func (m *DungeonMatch_SetOptionResponse) Reset()      { *m = DungeonMatch_SetOptionResponse{} }
func (*DungeonMatch_SetOptionResponse) ProtoMessage() {}
func (*DungeonMatch_SetOptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 18}
}
func (m *DungeonMatch_SetOptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_SetOptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_SetOptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_SetOptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_SetOptionResponse.Merge(m, src)
}
func (m *DungeonMatch_SetOptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_SetOptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_SetOptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_SetOptionResponse proto.InternalMessageInfo

func (*DungeonMatch_SetOptionResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.SetOptionResponse"
}

// 随机获取某地图的房间
type DungeonMatch_GetRandomRoomRequest struct {
	DungeonId int64 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	Num       int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *DungeonMatch_GetRandomRoomRequest) Reset()      { *m = DungeonMatch_GetRandomRoomRequest{} }
func (*DungeonMatch_GetRandomRoomRequest) ProtoMessage() {}
func (*DungeonMatch_GetRandomRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 19}
}
func (m *DungeonMatch_GetRandomRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetRandomRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetRandomRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetRandomRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetRandomRoomRequest.Merge(m, src)
}
func (m *DungeonMatch_GetRandomRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetRandomRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetRandomRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetRandomRoomRequest proto.InternalMessageInfo

func (m *DungeonMatch_GetRandomRoomRequest) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *DungeonMatch_GetRandomRoomRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*DungeonMatch_GetRandomRoomRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetRandomRoomRequest"
}

type DungeonMatch_GetRandomRoomResponse struct {
	Rooms []*models.Room `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (m *DungeonMatch_GetRandomRoomResponse) Reset()      { *m = DungeonMatch_GetRandomRoomResponse{} }
func (*DungeonMatch_GetRandomRoomResponse) ProtoMessage() {}
func (*DungeonMatch_GetRandomRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 20}
}
func (m *DungeonMatch_GetRandomRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_GetRandomRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_GetRandomRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_GetRandomRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_GetRandomRoomResponse.Merge(m, src)
}
func (m *DungeonMatch_GetRandomRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_GetRandomRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_GetRandomRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_GetRandomRoomResponse proto.InternalMessageInfo

func (m *DungeonMatch_GetRandomRoomResponse) GetRooms() []*models.Room {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (*DungeonMatch_GetRandomRoomResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.GetRandomRoomResponse"
}

// 邀请某玩家
type DungeonMatch_InviteRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *DungeonMatch_InviteRequest) Reset()      { *m = DungeonMatch_InviteRequest{} }
func (*DungeonMatch_InviteRequest) ProtoMessage() {}
func (*DungeonMatch_InviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 21}
}
func (m *DungeonMatch_InviteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_InviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_InviteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_InviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_InviteRequest.Merge(m, src)
}
func (m *DungeonMatch_InviteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_InviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_InviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_InviteRequest proto.InternalMessageInfo

func (m *DungeonMatch_InviteRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*DungeonMatch_InviteRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.InviteRequest"
}

type DungeonMatch_InviteResponse struct {
}

func (m *DungeonMatch_InviteResponse) Reset()      { *m = DungeonMatch_InviteResponse{} }
func (*DungeonMatch_InviteResponse) ProtoMessage() {}
func (*DungeonMatch_InviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 22}
}
func (m *DungeonMatch_InviteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_InviteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_InviteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_InviteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_InviteResponse.Merge(m, src)
}
func (m *DungeonMatch_InviteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_InviteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_InviteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_InviteResponse proto.InternalMessageInfo

func (*DungeonMatch_InviteResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.InviteResponse"
}

// 在线ack
type DungeonMatch_InviteOnlineAckRequest struct {
}

func (m *DungeonMatch_InviteOnlineAckRequest) Reset()      { *m = DungeonMatch_InviteOnlineAckRequest{} }
func (*DungeonMatch_InviteOnlineAckRequest) ProtoMessage() {}
func (*DungeonMatch_InviteOnlineAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 23}
}
func (m *DungeonMatch_InviteOnlineAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_InviteOnlineAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_InviteOnlineAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_InviteOnlineAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_InviteOnlineAckRequest.Merge(m, src)
}
func (m *DungeonMatch_InviteOnlineAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_InviteOnlineAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_InviteOnlineAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_InviteOnlineAckRequest proto.InternalMessageInfo

func (*DungeonMatch_InviteOnlineAckRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.InviteOnlineAckRequest"
}

type DungeonMatch_InviteOnlineAckResponse struct {
}

func (m *DungeonMatch_InviteOnlineAckResponse) Reset()      { *m = DungeonMatch_InviteOnlineAckResponse{} }
func (*DungeonMatch_InviteOnlineAckResponse) ProtoMessage() {}
func (*DungeonMatch_InviteOnlineAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 24}
}
func (m *DungeonMatch_InviteOnlineAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_InviteOnlineAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_InviteOnlineAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_InviteOnlineAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_InviteOnlineAckResponse.Merge(m, src)
}
func (m *DungeonMatch_InviteOnlineAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_InviteOnlineAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_InviteOnlineAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_InviteOnlineAckResponse proto.InternalMessageInfo

func (*DungeonMatch_InviteOnlineAckResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.InviteOnlineAckResponse"
}

// 接受或拒绝邀请
type DungeonMatch_ConfirmInviteRequest struct {
	ConfirmTyp ConfirmTyp `protobuf:"varint,1,opt,name=confirm_typ,json=confirmTyp,proto3,enum=dungeon_match.ConfirmTyp" json:"confirm_typ,omitempty"`
}

func (m *DungeonMatch_ConfirmInviteRequest) Reset()      { *m = DungeonMatch_ConfirmInviteRequest{} }
func (*DungeonMatch_ConfirmInviteRequest) ProtoMessage() {}
func (*DungeonMatch_ConfirmInviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 25}
}
func (m *DungeonMatch_ConfirmInviteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_ConfirmInviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_ConfirmInviteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_ConfirmInviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_ConfirmInviteRequest.Merge(m, src)
}
func (m *DungeonMatch_ConfirmInviteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_ConfirmInviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_ConfirmInviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_ConfirmInviteRequest proto.InternalMessageInfo

func (m *DungeonMatch_ConfirmInviteRequest) GetConfirmTyp() ConfirmTyp {
	if m != nil {
		return m.ConfirmTyp
	}
	return ConfirmTyp_ConfirmTypReject
}

func (*DungeonMatch_ConfirmInviteRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.ConfirmInviteRequest"
}

type DungeonMatch_ConfirmInviteResponse struct {
	Room *models.Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *DungeonMatch_ConfirmInviteResponse) Reset()      { *m = DungeonMatch_ConfirmInviteResponse{} }
func (*DungeonMatch_ConfirmInviteResponse) ProtoMessage() {}
func (*DungeonMatch_ConfirmInviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 26}
}
func (m *DungeonMatch_ConfirmInviteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_ConfirmInviteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_ConfirmInviteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_ConfirmInviteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_ConfirmInviteResponse.Merge(m, src)
}
func (m *DungeonMatch_ConfirmInviteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_ConfirmInviteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_ConfirmInviteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_ConfirmInviteResponse proto.InternalMessageInfo

func (m *DungeonMatch_ConfirmInviteResponse) GetRoom() *models.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*DungeonMatch_ConfirmInviteResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.ConfirmInviteResponse"
}

// 进入战斗
type DungeonMatch_StartBattleRequest struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *DungeonMatch_StartBattleRequest) Reset()      { *m = DungeonMatch_StartBattleRequest{} }
func (*DungeonMatch_StartBattleRequest) ProtoMessage() {}
func (*DungeonMatch_StartBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 27}
}
func (m *DungeonMatch_StartBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_StartBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_StartBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_StartBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_StartBattleRequest.Merge(m, src)
}
func (m *DungeonMatch_StartBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_StartBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_StartBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_StartBattleRequest proto.InternalMessageInfo

func (m *DungeonMatch_StartBattleRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*DungeonMatch_StartBattleRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.StartBattleRequest"
}

type DungeonMatch_StartBattleResponse struct {
}

func (m *DungeonMatch_StartBattleResponse) Reset()      { *m = DungeonMatch_StartBattleResponse{} }
func (*DungeonMatch_StartBattleResponse) ProtoMessage() {}
func (*DungeonMatch_StartBattleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 28}
}
func (m *DungeonMatch_StartBattleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_StartBattleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_StartBattleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_StartBattleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_StartBattleResponse.Merge(m, src)
}
func (m *DungeonMatch_StartBattleResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_StartBattleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_StartBattleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_StartBattleResponse proto.InternalMessageInfo

func (*DungeonMatch_StartBattleResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.StartBattleResponse"
}

// 离线重连获取战斗信息
type DungeonMatch_ReGetBattleRequest struct {
}

func (m *DungeonMatch_ReGetBattleRequest) Reset()      { *m = DungeonMatch_ReGetBattleRequest{} }
func (*DungeonMatch_ReGetBattleRequest) ProtoMessage() {}
func (*DungeonMatch_ReGetBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 29}
}
func (m *DungeonMatch_ReGetBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_ReGetBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_ReGetBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_ReGetBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_ReGetBattleRequest.Merge(m, src)
}
func (m *DungeonMatch_ReGetBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_ReGetBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_ReGetBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_ReGetBattleRequest proto.InternalMessageInfo

func (*DungeonMatch_ReGetBattleRequest) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.ReGetBattleRequest"
}

type DungeonMatch_ReGetBattleResponse struct {
	RoomId   int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId int64 `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId    int64 `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *DungeonMatch_ReGetBattleResponse) Reset()      { *m = DungeonMatch_ReGetBattleResponse{} }
func (*DungeonMatch_ReGetBattleResponse) ProtoMessage() {}
func (*DungeonMatch_ReGetBattleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 30}
}
func (m *DungeonMatch_ReGetBattleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_ReGetBattleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_ReGetBattleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_ReGetBattleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_ReGetBattleResponse.Merge(m, src)
}
func (m *DungeonMatch_ReGetBattleResponse) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_ReGetBattleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_ReGetBattleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_ReGetBattleResponse proto.InternalMessageInfo

func (m *DungeonMatch_ReGetBattleResponse) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *DungeonMatch_ReGetBattleResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *DungeonMatch_ReGetBattleResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*DungeonMatch_ReGetBattleResponse) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.ReGetBattleResponse"
}

type DungeonMatch_RoomChangePush struct {
	Room *models.Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *DungeonMatch_RoomChangePush) Reset()      { *m = DungeonMatch_RoomChangePush{} }
func (*DungeonMatch_RoomChangePush) ProtoMessage() {}
func (*DungeonMatch_RoomChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 31}
}
func (m *DungeonMatch_RoomChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_RoomChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_RoomChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_RoomChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_RoomChangePush.Merge(m, src)
}
func (m *DungeonMatch_RoomChangePush) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_RoomChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_RoomChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_RoomChangePush proto.InternalMessageInfo

func (m *DungeonMatch_RoomChangePush) GetRoom() *models.Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*DungeonMatch_RoomChangePush) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.RoomChangePush"
}

type DungeonMatch_RoomClosePush struct {
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *DungeonMatch_RoomClosePush) Reset()      { *m = DungeonMatch_RoomClosePush{} }
func (*DungeonMatch_RoomClosePush) ProtoMessage() {}
func (*DungeonMatch_RoomClosePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 32}
}
func (m *DungeonMatch_RoomClosePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_RoomClosePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_RoomClosePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_RoomClosePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_RoomClosePush.Merge(m, src)
}
func (m *DungeonMatch_RoomClosePush) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_RoomClosePush) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_RoomClosePush.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_RoomClosePush proto.InternalMessageInfo

func (m *DungeonMatch_RoomClosePush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (*DungeonMatch_RoomClosePush) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.RoomClosePush"
}

type DungeonMatch_InvitePush struct {
	RoleId    string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RoomId    int64  `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	DungeonId int64  `protobuf:"varint,3,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	NickName  string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
}

func (m *DungeonMatch_InvitePush) Reset()      { *m = DungeonMatch_InvitePush{} }
func (*DungeonMatch_InvitePush) ProtoMessage() {}
func (*DungeonMatch_InvitePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 33}
}
func (m *DungeonMatch_InvitePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_InvitePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_InvitePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_InvitePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_InvitePush.Merge(m, src)
}
func (m *DungeonMatch_InvitePush) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_InvitePush) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_InvitePush.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_InvitePush proto.InternalMessageInfo

func (m *DungeonMatch_InvitePush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *DungeonMatch_InvitePush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *DungeonMatch_InvitePush) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *DungeonMatch_InvitePush) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (*DungeonMatch_InvitePush) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.InvitePush"
}

type DungeonMatch_DungeonStartPush struct {
	RoomId   int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId int64 `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId    int64 `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *DungeonMatch_DungeonStartPush) Reset()      { *m = DungeonMatch_DungeonStartPush{} }
func (*DungeonMatch_DungeonStartPush) ProtoMessage() {}
func (*DungeonMatch_DungeonStartPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 34}
}
func (m *DungeonMatch_DungeonStartPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_DungeonStartPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_DungeonStartPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_DungeonStartPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_DungeonStartPush.Merge(m, src)
}
func (m *DungeonMatch_DungeonStartPush) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_DungeonStartPush) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_DungeonStartPush.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_DungeonStartPush proto.InternalMessageInfo

func (m *DungeonMatch_DungeonStartPush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *DungeonMatch_DungeonStartPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *DungeonMatch_DungeonStartPush) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*DungeonMatch_DungeonStartPush) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.DungeonStartPush"
}

type DungeonMatch_DungeonFinishPush struct {
	RoomId    int64           `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId  int64           `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Rewards   map[int64]int64 `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HasReward bool            `protobuf:"varint,4,opt,name=has_reward,json=hasReward,proto3" json:"has_reward,omitempty"`
}

func (m *DungeonMatch_DungeonFinishPush) Reset()      { *m = DungeonMatch_DungeonFinishPush{} }
func (*DungeonMatch_DungeonFinishPush) ProtoMessage() {}
func (*DungeonMatch_DungeonFinishPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 35}
}
func (m *DungeonMatch_DungeonFinishPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_DungeonFinishPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_DungeonFinishPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_DungeonFinishPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_DungeonFinishPush.Merge(m, src)
}
func (m *DungeonMatch_DungeonFinishPush) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_DungeonFinishPush) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_DungeonFinishPush.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_DungeonFinishPush proto.InternalMessageInfo

func (m *DungeonMatch_DungeonFinishPush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *DungeonMatch_DungeonFinishPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *DungeonMatch_DungeonFinishPush) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *DungeonMatch_DungeonFinishPush) GetHasReward() bool {
	if m != nil {
		return m.HasReward
	}
	return false
}

func (*DungeonMatch_DungeonFinishPush) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.DungeonFinishPush"
}

// 战斗结束回调
type DungeonMatch_BattleFinishAckPush struct {
	RoomId    string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	DungeonId int64  `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	HasReward bool   `protobuf:"varint,3,opt,name=has_reward,json=hasReward,proto3" json:"has_reward,omitempty"`
}

func (m *DungeonMatch_BattleFinishAckPush) Reset()      { *m = DungeonMatch_BattleFinishAckPush{} }
func (*DungeonMatch_BattleFinishAckPush) ProtoMessage() {}
func (*DungeonMatch_BattleFinishAckPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_49cd5069533da88d, []int{0, 36}
}
func (m *DungeonMatch_BattleFinishAckPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonMatch_BattleFinishAckPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonMatch_BattleFinishAckPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonMatch_BattleFinishAckPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonMatch_BattleFinishAckPush.Merge(m, src)
}
func (m *DungeonMatch_BattleFinishAckPush) XXX_Size() int {
	return m.Size()
}
func (m *DungeonMatch_BattleFinishAckPush) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonMatch_BattleFinishAckPush.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonMatch_BattleFinishAckPush proto.InternalMessageInfo

func (m *DungeonMatch_BattleFinishAckPush) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *DungeonMatch_BattleFinishAckPush) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *DungeonMatch_BattleFinishAckPush) GetHasReward() bool {
	if m != nil {
		return m.HasReward
	}
	return false
}

func (*DungeonMatch_BattleFinishAckPush) XXX_MessageName() string {
	return "dungeon_match.DungeonMatch.BattleFinishAckPush"
}
func init() {
	proto.RegisterEnum("dungeon_match.DungeonMatchErrorCode", DungeonMatchErrorCode_name, DungeonMatchErrorCode_value)
	proto.RegisterEnum("dungeon_match.ConfirmTyp", ConfirmTyp_name, ConfirmTyp_value)
	proto.RegisterType((*DungeonMatch)(nil), "dungeon_match.DungeonMatch")
	proto.RegisterType((*DungeonMatch_MatchOfflineRequest)(nil), "dungeon_match.DungeonMatch.MatchOfflineRequest")
	proto.RegisterType((*DungeonMatch_MatchOfflineResponse)(nil), "dungeon_match.DungeonMatch.MatchOfflineResponse")
	proto.RegisterType((*DungeonMatch_GetRoomCntRequest)(nil), "dungeon_match.DungeonMatch.GetRoomCntRequest")
	proto.RegisterType((*DungeonMatch_GetRoomCntResponse)(nil), "dungeon_match.DungeonMatch.GetRoomCntResponse")
	proto.RegisterType((*DungeonMatch_CreateRoomRequest)(nil), "dungeon_match.DungeonMatch.CreateRoomRequest")
	proto.RegisterType((*DungeonMatch_CreateRoomResponse)(nil), "dungeon_match.DungeonMatch.CreateRoomResponse")
	proto.RegisterType((*DungeonMatch_GetCurrRoomRequest)(nil), "dungeon_match.DungeonMatch.GetCurrRoomRequest")
	proto.RegisterType((*DungeonMatch_GetCurrRoomResponse)(nil), "dungeon_match.DungeonMatch.GetCurrRoomResponse")
	proto.RegisterType((*DungeonMatch_JoinRoomRequest)(nil), "dungeon_match.DungeonMatch.JoinRoomRequest")
	proto.RegisterType((*DungeonMatch_JoinRoomResponse)(nil), "dungeon_match.DungeonMatch.JoinRoomResponse")
	proto.RegisterType((*DungeonMatch_LeaveRoomRequest)(nil), "dungeon_match.DungeonMatch.LeaveRoomRequest")
	proto.RegisterType((*DungeonMatch_LeaveRoomResponse)(nil), "dungeon_match.DungeonMatch.LeaveRoomResponse")
	proto.RegisterType((*DungeonMatch_GetRoleRoomRequest)(nil), "dungeon_match.DungeonMatch.GetRoleRoomRequest")
	proto.RegisterType((*DungeonMatch_GetRoleRoomResponse)(nil), "dungeon_match.DungeonMatch.GetRoleRoomResponse")
	proto.RegisterType((*DungeonMatch_DismissRoomRequest)(nil), "dungeon_match.DungeonMatch.DismissRoomRequest")
	proto.RegisterType((*DungeonMatch_DismissRoomResponse)(nil), "dungeon_match.DungeonMatch.DismissRoomResponse")
	proto.RegisterType((*DungeonMatch_DismissEvent)(nil), "dungeon_match.DungeonMatch.DismissEvent")
	proto.RegisterType((*DungeonMatch_SetOptionRequest)(nil), "dungeon_match.DungeonMatch.SetOptionRequest")
	proto.RegisterType((*DungeonMatch_SetOptionResponse)(nil), "dungeon_match.DungeonMatch.SetOptionResponse")
	proto.RegisterType((*DungeonMatch_GetRandomRoomRequest)(nil), "dungeon_match.DungeonMatch.GetRandomRoomRequest")
	proto.RegisterType((*DungeonMatch_GetRandomRoomResponse)(nil), "dungeon_match.DungeonMatch.GetRandomRoomResponse")
	proto.RegisterType((*DungeonMatch_InviteRequest)(nil), "dungeon_match.DungeonMatch.InviteRequest")
	proto.RegisterType((*DungeonMatch_InviteResponse)(nil), "dungeon_match.DungeonMatch.InviteResponse")
	proto.RegisterType((*DungeonMatch_InviteOnlineAckRequest)(nil), "dungeon_match.DungeonMatch.InviteOnlineAckRequest")
	proto.RegisterType((*DungeonMatch_InviteOnlineAckResponse)(nil), "dungeon_match.DungeonMatch.InviteOnlineAckResponse")
	proto.RegisterType((*DungeonMatch_ConfirmInviteRequest)(nil), "dungeon_match.DungeonMatch.ConfirmInviteRequest")
	proto.RegisterType((*DungeonMatch_ConfirmInviteResponse)(nil), "dungeon_match.DungeonMatch.ConfirmInviteResponse")
	proto.RegisterType((*DungeonMatch_StartBattleRequest)(nil), "dungeon_match.DungeonMatch.StartBattleRequest")
	proto.RegisterType((*DungeonMatch_StartBattleResponse)(nil), "dungeon_match.DungeonMatch.StartBattleResponse")
	proto.RegisterType((*DungeonMatch_ReGetBattleRequest)(nil), "dungeon_match.DungeonMatch.ReGetBattleRequest")
	proto.RegisterType((*DungeonMatch_ReGetBattleResponse)(nil), "dungeon_match.DungeonMatch.ReGetBattleResponse")
	proto.RegisterType((*DungeonMatch_RoomChangePush)(nil), "dungeon_match.DungeonMatch.RoomChangePush")
	proto.RegisterType((*DungeonMatch_RoomClosePush)(nil), "dungeon_match.DungeonMatch.RoomClosePush")
	proto.RegisterType((*DungeonMatch_InvitePush)(nil), "dungeon_match.DungeonMatch.InvitePush")
	proto.RegisterType((*DungeonMatch_DungeonStartPush)(nil), "dungeon_match.DungeonMatch.DungeonStartPush")
	proto.RegisterType((*DungeonMatch_DungeonFinishPush)(nil), "dungeon_match.DungeonMatch.DungeonFinishPush")
	proto.RegisterMapType((map[int64]int64)(nil), "dungeon_match.DungeonMatch.DungeonFinishPush.RewardsEntry")
	proto.RegisterType((*DungeonMatch_BattleFinishAckPush)(nil), "dungeon_match.DungeonMatch.BattleFinishAckPush")
}

func init() {
	proto.RegisterFile("proto/dungeon-match-server/match.proto", fileDescriptor_49cd5069533da88d)
}

var fileDescriptor_49cd5069533da88d = []byte{
	// 1339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6c, 0x13, 0xd7,
	0x16, 0xb6, 0x63, 0x12, 0xe2, 0x13, 0xe3, 0x4c, 0xae, 0xed, 0x64, 0xb8, 0x11, 0x56, 0x1e, 0xef,
	0x89, 0x97, 0x87, 0x14, 0xe7, 0x29, 0xad, 0x4a, 0x1b, 0xa4, 0x56, 0xc1, 0x18, 0x6a, 0xd4, 0x92,
	0xca, 0x64, 0xd5, 0x8d, 0x35, 0xf1, 0x5c, 0xf0, 0x34, 0x9e, 0x3b, 0xee, 0xcc, 0x38, 0x34, 0x5d,
	0x45, 0x45, 0x6d, 0x83, 0x5b, 0x0a, 0x8b, 0xaa, 0x50, 0x29, 0x0b, 0xa8, 0x8a, 0x9a, 0xd2, 0xd2,
	0x48, 0x51, 0x4d, 0x22, 0x28, 0x62, 0xcb, 0x92, 0x25, 0xcb, 0x36, 0xf1, 0x18, 0xb3, 0xeb, 0xba,
	0xab, 0x6a, 0xee, 0xbd, 0x13, 0x8f, 0xcd, 0x4f, 0xd3, 0x9f, 0xdd, 0xdc, 0x73, 0xcf, 0xf7, 0x7d,
	0xe7, 0x7c, 0xf7, 0x6f, 0xe0, 0x40, 0xd9, 0x34, 0x6c, 0x63, 0x5c, 0xad, 0xd0, 0x33, 0xc4, 0xa0,
	0x63, 0xba, 0x62, 0x17, 0x8a, 0x63, 0x16, 0x31, 0xe7, 0x89, 0x39, 0xce, 0x06, 0x29, 0x96, 0x80,
	0xf6, 0x88, 0x8c, 0x3c, 0x0b, 0xe2, 0x21, 0x0e, 0xd3, 0x0d, 0x95, 0x94, 0xac, 0xf1, 0x59, 0xc5,
	0x22, 0x3c, 0x0f, 0xcb, 0x6d, 0x13, 0x3e, 0x06, 0x3c, 0xd8, 0x01, 0x39, 0xc3, 0xe3, 0xfb, 0x6f,
	0x4a, 0x10, 0x39, 0xca, 0xc9, 0xdf, 0x64, 0xdc, 0x29, 0x88, 0xb1, 0x8f, 0xe9, 0xd3, 0xa7, 0x4b,
	0x1a, 0x25, 0x39, 0xf2, 0x6e, 0x85, 0x58, 0x36, 0x1a, 0x82, 0xdd, 0xa6, 0x61, 0xe8, 0x79, 0x4d,
	0x95, 0x83, 0x23, 0xc1, 0xd1, 0x50, 0xae, 0xc7, 0x1d, 0x66, 0x55, 0x3c, 0x08, 0xf1, 0xf6, 0x7c,
	0xab, 0x6c, 0x50, 0x8b, 0xe0, 0x18, 0x0c, 0x1c, 0x27, 0x76, 0xce, 0x30, 0xf4, 0x34, 0xb5, 0x05,
	0x0b, 0x1e, 0x07, 0xe4, 0x0f, 0xf2, 0x54, 0xb4, 0x17, 0x7a, 0x19, 0x77, 0x81, 0xda, 0x72, 0x70,
	0x24, 0x34, 0x1a, 0xca, 0x31, 0xad, 0x34, 0xb5, 0xf1, 0x04, 0x0c, 0xa4, 0x4d, 0xa2, 0xd8, 0xc4,
	0xc5, 0x78, 0xb5, 0xec, 0x03, 0xf0, 0xfc, 0xd8, 0x2e, 0x27, 0x2c, 0x22, 0x59, 0x15, 0xbf, 0x04,
	0xc8, 0x8f, 0x11, 0x22, 0x23, 0xb0, 0xcb, 0x25, 0x65, 0xe9, 0x7d, 0x13, 0x91, 0x14, 0x77, 0x22,
	0xc5, 0x72, 0xd8, 0x0c, 0x8e, 0xb3, 0xe2, 0xd2, 0x15, 0xd3, 0xf4, 0x89, 0xe1, 0x43, 0x10, 0x6b,
	0x8b, 0xee, 0x98, 0x2e, 0x0b, 0xfd, 0x27, 0x0c, 0x8d, 0xfa, 0x0b, 0x7f, 0x96, 0x89, 0x1d, 0x1d,
	0x75, 0x75, 0x76, 0xf4, 0x22, 0x48, 0x2d, 0xaa, 0x1d, 0x17, 0x70, 0x02, 0xa4, 0x37, 0x88, 0x32,
	0x4f, 0xfe, 0x89, 0x0a, 0x62, 0x30, 0xe0, 0xe3, 0x12, 0x4b, 0x3c, 0x26, 0x56, 0xb3, 0xf4, 0xa4,
	0x44, 0x89, 0x78, 0x12, 0x61, 0x57, 0xa2, 0x44, 0xb2, 0xaa, 0x70, 0xb2, 0x95, 0xfe, 0x67, 0x16,
	0xe6, 0xa8, 0x66, 0xe9, 0x9a, 0x65, 0xf9, 0x17, 0x26, 0x01, 0xb1, 0xb6, 0xa8, 0x28, 0x2a, 0x0a,
	0x11, 0x11, 0xce, 0xcc, 0x13, 0x6a, 0xe3, 0xc3, 0x20, 0x9d, 0x22, 0xf6, 0x74, 0xd9, 0xd6, 0x0c,
	0xea, 0x95, 0xf8, 0x5f, 0xe8, 0x31, 0x58, 0x40, 0x88, 0xf6, 0xfb, 0x45, 0xa7, 0xcb, 0x76, 0x4e,
	0x4c, 0xbb, 0x6d, 0xfb, 0xc0, 0x42, 0xe1, 0x38, 0xc4, 0xdd, 0x3e, 0x14, 0xaa, 0x1a, 0xfa, 0xce,
	0xb7, 0x25, 0x92, 0x20, 0x44, 0x2b, 0xba, 0xb0, 0xd6, 0xfd, 0xc4, 0x87, 0x21, 0xd1, 0x41, 0x24,
	0x2c, 0xd9, 0x0f, 0xdd, 0x6e, 0xe3, 0x16, 0x3b, 0x0d, 0x9d, 0x9e, 0xf0, 0x29, 0x3c, 0x0a, 0x7b,
	0xb2, 0x74, 0x5e, 0xb3, 0xc9, 0x1f, 0xfa, 0x2e, 0x41, 0xd4, 0xcb, 0x14, 0x1d, 0xc8, 0x30, 0xc8,
	0x23, 0xd3, 0xd4, 0x3d, 0xb3, 0x53, 0x85, 0x39, 0xcf, 0xd4, 0xbd, 0x30, 0xf4, 0xc4, 0x8c, 0x00,
	0xe5, 0x20, 0x9e, 0x36, 0xe8, 0x69, 0xcd, 0xd4, 0xdb, 0x75, 0x27, 0xa1, 0xaf, 0xc0, 0xe3, 0x79,
	0x7b, 0xa1, 0xcc, 0xb4, 0xa3, 0x13, 0x7b, 0x53, 0x6d, 0x37, 0x56, 0x4a, 0x20, 0x67, 0x16, 0xca,
	0x39, 0x28, 0x6c, 0x7f, 0xe3, 0x57, 0x20, 0xd1, 0xc1, 0xb9, 0xe3, 0x4d, 0xf1, 0x2a, 0xa0, 0x53,
	0xb6, 0x62, 0xda, 0x47, 0x14, 0xdb, 0x2e, 0x6d, 0x17, 0x33, 0x0a, 0xd2, 0x2c, 0x0b, 0xe4, 0xf9,
	0x2d, 0xda, 0x5a, 0x89, 0x28, 0x8f, 0x9f, 0x62, 0xe1, 0xac, 0xea, 0x6e, 0x9f, 0x36, 0xbc, 0xe8,
	0x32, 0x0e, 0x28, 0x47, 0x8e, 0x93, 0x76, 0x5a, 0x3c, 0x0b, 0xb1, 0xb6, 0xa8, 0xa8, 0xf2, 0x99,
	0xa7, 0x69, 0x18, 0xc2, 0xa2, 0x8c, 0xed, 0xc3, 0xd4, 0xcb, 0x03, 0x59, 0x15, 0x25, 0xa0, 0x47,
	0x57, 0xca, 0xee, 0x4c, 0x88, 0xcd, 0x74, 0xeb, 0x4a, 0x39, 0xab, 0xe2, 0x09, 0x88, 0xb2, 0x8b,
	0xb1, 0xa8, 0xd0, 0x33, 0xe4, 0xad, 0x8a, 0x55, 0xdc, 0x81, 0x09, 0xa3, 0xb0, 0x87, 0x61, 0x4a,
	0x86, 0xc5, 0x21, 0xcf, 0xbc, 0xa6, 0xdf, 0x07, 0xe0, 0x16, 0xb7, 0xd2, 0x9e, 0xb2, 0x57, 0xfc,
	0xf8, 0xae, 0xe7, 0xdc, 0x0f, 0xa1, 0xce, 0xcd, 0x3d, 0x0c, 0x61, 0xaa, 0x15, 0xe6, 0xf2, 0x54,
	0xd1, 0x89, 0xbc, 0x8b, 0x51, 0xf6, 0xba, 0x81, 0x93, 0x8a, 0x4e, 0x70, 0x1e, 0x24, 0xf1, 0xc4,
	0x30, 0xc7, 0x9f, 0x5b, 0xe8, 0x5f, 0xb2, 0xee, 0xb7, 0x20, 0x0c, 0x08, 0x85, 0x63, 0x1a, 0xd5,
	0xac, 0xe2, 0xdf, 0x90, 0x98, 0x81, 0xdd, 0x26, 0x39, 0xab, 0x98, 0xaa, 0x25, 0x87, 0xd8, 0xe9,
	0x9b, 0xec, 0xd8, 0xca, 0xfe, 0xd7, 0x32, 0xf5, 0x84, 0x6a, 0x2a, 0xc7, 0xc1, 0x19, 0x6a, 0x9b,
	0x0b, 0x39, 0x8f, 0xca, 0xb5, 0xaf, 0xa8, 0x58, 0x79, 0x3e, 0x64, 0x06, 0xf5, 0xe6, 0xc2, 0x45,
	0xc5, 0xe2, 0xd9, 0x78, 0x12, 0x22, 0x7e, 0x9c, 0x7b, 0x57, 0xcc, 0x91, 0x05, 0x51, 0xb6, 0xfb,
	0x89, 0xe2, 0xd0, 0x3d, 0xaf, 0x94, 0x2a, 0x44, 0xd4, 0xcb, 0x07, 0x93, 0x5d, 0x2f, 0x07, 0x71,
	0x09, 0x62, 0x7c, 0x5b, 0xf2, 0x22, 0xa6, 0x0a, 0x73, 0x4f, 0xeb, 0x3e, 0xbc, 0xc3, 0x9b, 0xbe,
	0xa3, 0xd2, 0x50, 0x47, 0xa5, 0x07, 0xd7, 0xba, 0x21, 0xe1, 0x77, 0x20, 0x63, 0x9a, 0x86, 0x99,
	0x36, 0x54, 0x82, 0x0e, 0x42, 0x7f, 0x86, 0x3f, 0x92, 0x27, 0x0d, 0x3b, 0xf3, 0x9e, 0x66, 0xd9,
	0x52, 0x00, 0x27, 0xaa, 0x35, 0x79, 0x00, 0xf5, 0x37, 0x96, 0xee, 0x3d, 0xbe, 0xfc, 0x63, 0x7d,
	0xe3, 0x82, 0x73, 0xf3, 0x8a, 0xb3, 0xbc, 0x82, 0xfe, 0x0d, 0x7d, 0x22, 0xf7, 0x58, 0xa5, 0x54,
	0x92, 0x82, 0x18, 0x55, 0x6b, 0x72, 0x14, 0x45, 0x78, 0x9e, 0xb3, 0xbe, 0xd6, 0xb8, 0x73, 0x0d,
	0x1d, 0x60, 0x49, 0x27, 0x0d, 0x7b, 0xfa, 0x2c, 0x25, 0xa6, 0xd4, 0xe5, 0x91, 0xd5, 0xef, 0x5e,
	0xad, 0x6f, 0x5c, 0x68, 0x5c, 0x59, 0x6d, 0x2c, 0xdd, 0xab, 0x6f, 0xdc, 0x41, 0xe3, 0x30, 0x90,
	0x31, 0x4d, 0x96, 0x94, 0x56, 0xa8, 0xcd, 0xde, 0x29, 0x29, 0x84, 0xe5, 0x6a, 0x4d, 0x8e, 0x23,
	0xc4, 0x93, 0xea, 0x1b, 0x17, 0x9a, 0xe7, 0xee, 0x3e, 0x5e, 0x5c, 0x74, 0x3e, 0xbe, 0x8d, 0xfe,
	0x07, 0xbd, 0x9c, 0x38, 0x4b, 0xa5, 0x5d, 0x78, 0xb8, 0x5a, 0x93, 0x87, 0x50, 0x82, 0xb3, 0x3a,
	0xcb, 0x2b, 0xcd, 0x7b, 0x5f, 0xd6, 0x37, 0x6e, 0xf0, 0x4a, 0xd0, 0x6b, 0x90, 0x70, 0xb9, 0x69,
	0x69, 0x21, 0xad, 0x50, 0xf7, 0x0d, 0x9e, 0xa6, 0xec, 0xf5, 0x92, 0xba, 0xf1, 0x7f, 0xaa, 0x35,
	0x79, 0x04, 0x25, 0x9d, 0x4b, 0x9f, 0x36, 0x2e, 0xdf, 0x72, 0x2e, 0xde, 0x68, 0x9e, 0xbb, 0xeb,
	0x54, 0xaf, 0x3a, 0x1f, 0x5e, 0xaf, 0x6f, 0x2c, 0xb6, 0x08, 0x0e, 0x41, 0x2c, 0x63, 0x9a, 0x33,
	0x0a, 0x97, 0x9b, 0x29, 0x6a, 0xec, 0xb5, 0x92, 0x7a, 0x70, 0xb2, 0x5a, 0x93, 0x31, 0x92, 0x9b,
	0xab, 0xd7, 0x1f, 0x7d, 0xf6, 0xad, 0xf3, 0xc3, 0x2d, 0x2e, 0xde, 0xb8, 0xf9, 0xb5, 0x00, 0x8e,
	0x01, 0xca, 0x98, 0xa6, 0xb0, 0x7a, 0xdb, 0xd1, 0xdd, 0x9e, 0x09, 0xce, 0xf9, 0xd5, 0xc6, 0xf2,
	0xf7, 0x2d, 0x47, 0x27, 0x20, 0x9a, 0x31, 0xcd, 0x23, 0x84, 0x50, 0x7e, 0xcc, 0x55, 0xa9, 0xd7,
	0x2f, 0xf1, 0xf9, 0x4a, 0x63, 0x69, 0xdd, 0x59, 0x5f, 0x7b, 0x74, 0xe7, 0x62, 0xf3, 0xab, 0xef,
	0x1e, 0x7f, 0xb0, 0xd8, 0x5c, 0x5d, 0x47, 0x87, 0x21, 0x2e, 0x9a, 0xf3, 0xcc, 0x63, 0xe7, 0x53,
	0x0a, 0xe3, 0x7f, 0x55, 0x6b, 0xf2, 0x3e, 0x34, 0xec, 0x5c, 0xbc, 0xd1, 0x58, 0x3e, 0xcf, 0x1d,
	0x74, 0xdb, 0xfb, 0x69, 0xd1, 0xf9, 0xe6, 0x93, 0xc6, 0xd2, 0x95, 0xc6, 0x17, 0x97, 0x7d, 0xce,
	0x78, 0x60, 0x2e, 0x2c, 0x81, 0xe7, 0xcc, 0x76, 0x2f, 0x1d, 0x34, 0x42, 0xfd, 0xff, 0x1d, 0x0d,
	0x72, 0xed, 0x3e, 0x6f, 0xdd, 0x78, 0x83, 0x8d, 0xb5, 0x6b, 0x8d, 0xe5, 0xf3, 0x5c, 0x18, 0x1d,
	0x82, 0xc1, 0x16, 0x62, 0xaa, 0x64, 0x12, 0x45, 0x5d, 0xe0, 0xa8, 0x88, 0xb7, 0x8a, 0x1c, 0xc5,
	0x1b, 0xe5, 0xa8, 0xfa, 0xed, 0x8f, 0x0e, 0xbe, 0x0e, 0xd0, 0x7a, 0x80, 0x50, 0x1c, 0x24, 0xdf,
	0x73, 0x44, 0xde, 0x21, 0x05, 0x5b, 0x0a, 0x20, 0x04, 0xd1, 0x56, 0x74, 0xaa, 0x62, 0x1b, 0x52,
	0x10, 0x49, 0x10, 0x69, 0xc5, 0xb2, 0x54, 0xea, 0x3a, 0x32, 0xf3, 0xf0, 0x97, 0x64, 0x60, 0x65,
	0x33, 0x19, 0xbc, 0xbf, 0x99, 0x0c, 0x3e, 0xd8, 0x4c, 0x06, 0x7f, 0xde, 0x4c, 0x06, 0x9b, 0x9b,
	0xc9, 0xc0, 0xaf, 0x9b, 0xc9, 0xe0, 0xa5, 0xad, 0x64, 0xe0, 0xfe, 0x56, 0x32, 0xf8, 0x60, 0x2b,
	0x19, 0x78, 0xb8, 0x95, 0x0c, 0xbc, 0x7d, 0xa0, 0x60, 0x68, 0xd4, 0xfb, 0x9f, 0x2f, 0x18, 0xba,
	0x6e, 0xd0, 0xf1, 0xb6, 0x3f, 0x7e, 0x7e, 0xa5, 0xcc, 0xf6, 0xb0, 0xe0, 0x0b, 0xbf, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x17, 0xf5, 0xf6, 0x1a, 0x0f, 0x0c, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_MatchOfflineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_MatchOfflineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetRoomCntRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetRoomCntResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_CreateRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_CreateRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetCurrRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetCurrRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_JoinRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_JoinRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_LeaveRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_LeaveRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetRoleRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetRoleRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_DismissRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_DismissRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_DismissEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_SetOptionRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_SetOptionResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetRandomRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_GetRandomRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_InviteRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_InviteResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_InviteOnlineAckRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_InviteOnlineAckResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_ConfirmInviteRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_ConfirmInviteResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_StartBattleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_StartBattleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_ReGetBattleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_ReGetBattleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_RoomChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_RoomClosePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_InvitePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_DungeonStartPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_DungeonFinishPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonMatch_BattleFinishAckPush.Get().(proto.Message)
	})
}

var poolDungeonMatch = &sync.Pool{New: func() interface{} { return &DungeonMatch{} }}

func (m *DungeonMatch) ReleasePool() { m.Reset(); poolDungeonMatch.Put(m); m = nil }

var poolDungeonMatch_MatchOfflineRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_MatchOfflineRequest{} }}

func (m *DungeonMatch_MatchOfflineRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_MatchOfflineRequest.Put(m)
	m = nil
}

var poolDungeonMatch_MatchOfflineResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_MatchOfflineResponse{} }}

func (m *DungeonMatch_MatchOfflineResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_MatchOfflineResponse.Put(m)
	m = nil
}

var poolDungeonMatch_GetRoomCntRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetRoomCntRequest{} }}

func (m *DungeonMatch_GetRoomCntRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetRoomCntRequest.Put(m)
	m = nil
}

var poolDungeonMatch_GetRoomCntResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetRoomCntResponse{} }}

func (m *DungeonMatch_GetRoomCntResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetRoomCntResponse.Put(m)
	m = nil
}

var poolDungeonMatch_CreateRoomRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_CreateRoomRequest{} }}

func (m *DungeonMatch_CreateRoomRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_CreateRoomRequest.Put(m)
	m = nil
}

var poolDungeonMatch_CreateRoomResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_CreateRoomResponse{} }}

func (m *DungeonMatch_CreateRoomResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_CreateRoomResponse.Put(m)
	m = nil
}

var poolDungeonMatch_GetCurrRoomRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetCurrRoomRequest{} }}

func (m *DungeonMatch_GetCurrRoomRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetCurrRoomRequest.Put(m)
	m = nil
}

var poolDungeonMatch_GetCurrRoomResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetCurrRoomResponse{} }}

func (m *DungeonMatch_GetCurrRoomResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetCurrRoomResponse.Put(m)
	m = nil
}

var poolDungeonMatch_JoinRoomRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_JoinRoomRequest{} }}

func (m *DungeonMatch_JoinRoomRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_JoinRoomRequest.Put(m)
	m = nil
}

var poolDungeonMatch_JoinRoomResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_JoinRoomResponse{} }}

func (m *DungeonMatch_JoinRoomResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_JoinRoomResponse.Put(m)
	m = nil
}

var poolDungeonMatch_LeaveRoomRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_LeaveRoomRequest{} }}

func (m *DungeonMatch_LeaveRoomRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_LeaveRoomRequest.Put(m)
	m = nil
}

var poolDungeonMatch_LeaveRoomResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_LeaveRoomResponse{} }}

func (m *DungeonMatch_LeaveRoomResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_LeaveRoomResponse.Put(m)
	m = nil
}

var poolDungeonMatch_GetRoleRoomRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetRoleRoomRequest{} }}

func (m *DungeonMatch_GetRoleRoomRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetRoleRoomRequest.Put(m)
	m = nil
}

var poolDungeonMatch_GetRoleRoomResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetRoleRoomResponse{} }}

func (m *DungeonMatch_GetRoleRoomResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetRoleRoomResponse.Put(m)
	m = nil
}

var poolDungeonMatch_DismissRoomRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_DismissRoomRequest{} }}

func (m *DungeonMatch_DismissRoomRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_DismissRoomRequest.Put(m)
	m = nil
}

var poolDungeonMatch_DismissRoomResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_DismissRoomResponse{} }}

func (m *DungeonMatch_DismissRoomResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_DismissRoomResponse.Put(m)
	m = nil
}

var poolDungeonMatch_DismissEvent = &sync.Pool{New: func() interface{} { return &DungeonMatch_DismissEvent{} }}

func (m *DungeonMatch_DismissEvent) ReleasePool() {
	m.Reset()
	poolDungeonMatch_DismissEvent.Put(m)
	m = nil
}

var poolDungeonMatch_SetOptionRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_SetOptionRequest{} }}

func (m *DungeonMatch_SetOptionRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_SetOptionRequest.Put(m)
	m = nil
}

var poolDungeonMatch_SetOptionResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_SetOptionResponse{} }}

func (m *DungeonMatch_SetOptionResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_SetOptionResponse.Put(m)
	m = nil
}

var poolDungeonMatch_GetRandomRoomRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetRandomRoomRequest{} }}

func (m *DungeonMatch_GetRandomRoomRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetRandomRoomRequest.Put(m)
	m = nil
}

var poolDungeonMatch_GetRandomRoomResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_GetRandomRoomResponse{} }}

func (m *DungeonMatch_GetRandomRoomResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_GetRandomRoomResponse.Put(m)
	m = nil
}

var poolDungeonMatch_InviteRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_InviteRequest{} }}

func (m *DungeonMatch_InviteRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_InviteRequest.Put(m)
	m = nil
}

var poolDungeonMatch_InviteResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_InviteResponse{} }}

func (m *DungeonMatch_InviteResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_InviteResponse.Put(m)
	m = nil
}

var poolDungeonMatch_InviteOnlineAckRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_InviteOnlineAckRequest{} }}

func (m *DungeonMatch_InviteOnlineAckRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_InviteOnlineAckRequest.Put(m)
	m = nil
}

var poolDungeonMatch_InviteOnlineAckResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_InviteOnlineAckResponse{} }}

func (m *DungeonMatch_InviteOnlineAckResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_InviteOnlineAckResponse.Put(m)
	m = nil
}

var poolDungeonMatch_ConfirmInviteRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_ConfirmInviteRequest{} }}

func (m *DungeonMatch_ConfirmInviteRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_ConfirmInviteRequest.Put(m)
	m = nil
}

var poolDungeonMatch_ConfirmInviteResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_ConfirmInviteResponse{} }}

func (m *DungeonMatch_ConfirmInviteResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_ConfirmInviteResponse.Put(m)
	m = nil
}

var poolDungeonMatch_StartBattleRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_StartBattleRequest{} }}

func (m *DungeonMatch_StartBattleRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_StartBattleRequest.Put(m)
	m = nil
}

var poolDungeonMatch_StartBattleResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_StartBattleResponse{} }}

func (m *DungeonMatch_StartBattleResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_StartBattleResponse.Put(m)
	m = nil
}

var poolDungeonMatch_ReGetBattleRequest = &sync.Pool{New: func() interface{} { return &DungeonMatch_ReGetBattleRequest{} }}

func (m *DungeonMatch_ReGetBattleRequest) ReleasePool() {
	m.Reset()
	poolDungeonMatch_ReGetBattleRequest.Put(m)
	m = nil
}

var poolDungeonMatch_ReGetBattleResponse = &sync.Pool{New: func() interface{} { return &DungeonMatch_ReGetBattleResponse{} }}

func (m *DungeonMatch_ReGetBattleResponse) ReleasePool() {
	m.Reset()
	poolDungeonMatch_ReGetBattleResponse.Put(m)
	m = nil
}

var poolDungeonMatch_RoomChangePush = &sync.Pool{New: func() interface{} { return &DungeonMatch_RoomChangePush{} }}

func (m *DungeonMatch_RoomChangePush) ReleasePool() {
	m.Reset()
	poolDungeonMatch_RoomChangePush.Put(m)
	m = nil
}

var poolDungeonMatch_RoomClosePush = &sync.Pool{New: func() interface{} { return &DungeonMatch_RoomClosePush{} }}

func (m *DungeonMatch_RoomClosePush) ReleasePool() {
	m.Reset()
	poolDungeonMatch_RoomClosePush.Put(m)
	m = nil
}

var poolDungeonMatch_InvitePush = &sync.Pool{New: func() interface{} { return &DungeonMatch_InvitePush{} }}

func (m *DungeonMatch_InvitePush) ReleasePool() {
	m.Reset()
	poolDungeonMatch_InvitePush.Put(m)
	m = nil
}

var poolDungeonMatch_DungeonStartPush = &sync.Pool{New: func() interface{} { return &DungeonMatch_DungeonStartPush{} }}

func (m *DungeonMatch_DungeonStartPush) ReleasePool() {
	m.Reset()
	poolDungeonMatch_DungeonStartPush.Put(m)
	m = nil
}

var poolDungeonMatch_DungeonFinishPush = &sync.Pool{New: func() interface{} { return &DungeonMatch_DungeonFinishPush{} }}

func (m *DungeonMatch_DungeonFinishPush) ReleasePool() {
	m.Reset()
	poolDungeonMatch_DungeonFinishPush.Put(m)
	m = nil
}

var poolDungeonMatch_BattleFinishAckPush = &sync.Pool{New: func() interface{} { return &DungeonMatch_BattleFinishAckPush{} }}

func (m *DungeonMatch_BattleFinishAckPush) ReleasePool() {
	m.Reset()
	poolDungeonMatch_BattleFinishAckPush.Put(m)
	m = nil
}
func (x DungeonMatchErrorCode) String() string {
	s, ok := DungeonMatchErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ConfirmTyp) String() string {
	s, ok := ConfirmTyp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DungeonMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch)
	if !ok {
		that2, ok := that.(DungeonMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_MatchOfflineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_MatchOfflineRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_MatchOfflineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	return true
}
func (this *DungeonMatch_MatchOfflineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_MatchOfflineResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_MatchOfflineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_GetRoomCntRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetRoomCntRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_GetRoomCntRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_GetRoomCntResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetRoomCntResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_GetRoomCntResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoomCnt) != len(that1.RoomCnt) {
		return false
	}
	for i := range this.RoomCnt {
		if this.RoomCnt[i] != that1.RoomCnt[i] {
			return false
		}
	}
	return true
}
func (this *DungeonMatch_CreateRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_CreateRoomRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_CreateRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	return true
}
func (this *DungeonMatch_CreateRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_CreateRoomResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_CreateRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *DungeonMatch_GetCurrRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetCurrRoomRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_GetCurrRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_GetCurrRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetCurrRoomResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_GetCurrRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *DungeonMatch_JoinRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_JoinRoomRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_JoinRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	return true
}
func (this *DungeonMatch_JoinRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_JoinRoomResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_JoinRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *DungeonMatch_LeaveRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_LeaveRoomRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_LeaveRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	return true
}
func (this *DungeonMatch_LeaveRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_LeaveRoomResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_LeaveRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_GetRoleRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetRoleRoomRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_GetRoleRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *DungeonMatch_GetRoleRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetRoleRoomResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_GetRoleRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *DungeonMatch_DismissRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_DismissRoomRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_DismissRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_DismissRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_DismissRoomResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_DismissRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_DismissEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_DismissEvent)
	if !ok {
		that2, ok := that.(DungeonMatch_DismissEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_SetOptionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_SetOptionRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_SetOptionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Option.Equal(that1.Option) {
		return false
	}
	return true
}
func (this *DungeonMatch_SetOptionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_SetOptionResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_SetOptionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_GetRandomRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetRandomRoomRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_GetRandomRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *DungeonMatch_GetRandomRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_GetRandomRoomResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_GetRandomRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return false
		}
	}
	return true
}
func (this *DungeonMatch_InviteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_InviteRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_InviteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *DungeonMatch_InviteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_InviteResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_InviteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_InviteOnlineAckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_InviteOnlineAckRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_InviteOnlineAckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_InviteOnlineAckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_InviteOnlineAckResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_InviteOnlineAckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_ConfirmInviteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_ConfirmInviteRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_ConfirmInviteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfirmTyp != that1.ConfirmTyp {
		return false
	}
	return true
}
func (this *DungeonMatch_ConfirmInviteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_ConfirmInviteResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_ConfirmInviteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *DungeonMatch_StartBattleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_StartBattleRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_StartBattleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *DungeonMatch_StartBattleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_StartBattleResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_StartBattleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_ReGetBattleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_ReGetBattleRequest)
	if !ok {
		that2, ok := that.(DungeonMatch_ReGetBattleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DungeonMatch_ReGetBattleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_ReGetBattleResponse)
	if !ok {
		that2, ok := that.(DungeonMatch_ReGetBattleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *DungeonMatch_RoomChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_RoomChangePush)
	if !ok {
		that2, ok := that.(DungeonMatch_RoomChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *DungeonMatch_RoomClosePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_RoomClosePush)
	if !ok {
		that2, ok := that.(DungeonMatch_RoomClosePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	return true
}
func (this *DungeonMatch_InvitePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_InvitePush)
	if !ok {
		that2, ok := that.(DungeonMatch_InvitePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	return true
}
func (this *DungeonMatch_DungeonStartPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_DungeonStartPush)
	if !ok {
		that2, ok := that.(DungeonMatch_DungeonStartPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *DungeonMatch_DungeonFinishPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_DungeonFinishPush)
	if !ok {
		that2, ok := that.(DungeonMatch_DungeonFinishPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	if this.HasReward != that1.HasReward {
		return false
	}
	return true
}
func (this *DungeonMatch_BattleFinishAckPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonMatch_BattleFinishAckPush)
	if !ok {
		that2, ok := that.(DungeonMatch_BattleFinishAckPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	if this.HasReward != that1.HasReward {
		return false
	}
	return true
}
func (m *DungeonMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_MatchOfflineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_MatchOfflineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_MatchOfflineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_MatchOfflineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_MatchOfflineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_MatchOfflineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetRoomCntRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetRoomCntRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetRoomCntRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetRoomCntResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetRoomCntResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetRoomCntResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoomCnt) > 0 {
		dAtA2 := make([]byte, len(m.RoomCnt)*10)
		var j1 int
		for _, num1 := range m.RoomCnt {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMatch(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_CreateRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_CreateRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_CreateRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DungeonId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_CreateRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_CreateRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_CreateRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetCurrRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetCurrRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetCurrRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetCurrRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetCurrRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetCurrRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_JoinRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_JoinRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_JoinRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DungeonId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_JoinRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_JoinRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_JoinRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_LeaveRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_LeaveRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_LeaveRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DungeonId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_LeaveRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_LeaveRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_LeaveRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetRoleRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetRoleRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetRoleRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetRoleRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetRoleRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetRoleRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_DismissRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_DismissRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_DismissRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_DismissRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_DismissRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_DismissRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_DismissEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_DismissEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_DismissEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_SetOptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_SetOptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_SetOptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Option != nil {
		{
			size, err := m.Option.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_SetOptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_SetOptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_SetOptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetRandomRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetRandomRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetRandomRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.DungeonId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_GetRandomRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_GetRandomRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_GetRandomRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_InviteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_InviteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_InviteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_InviteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_InviteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_InviteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_InviteOnlineAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_InviteOnlineAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_InviteOnlineAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_InviteOnlineAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_InviteOnlineAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_InviteOnlineAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_ConfirmInviteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_ConfirmInviteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_ConfirmInviteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfirmTyp != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.ConfirmTyp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_ConfirmInviteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_ConfirmInviteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_ConfirmInviteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_StartBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_StartBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_StartBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_StartBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_StartBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_StartBattleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_ReGetBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_ReGetBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_ReGetBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_ReGetBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_ReGetBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_ReGetBattleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_RoomChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_RoomChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_RoomChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_RoomClosePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_RoomClosePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_RoomClosePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_InvitePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_InvitePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_InvitePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x22
	}
	if m.DungeonId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_DungeonStartPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_DungeonStartPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_DungeonStartPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_DungeonFinishPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_DungeonFinishPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_DungeonFinishPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasReward {
		i--
		if m.HasReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintMatch(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMatch(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMatch(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BattleId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DungeonMatch_BattleFinishAckPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonMatch_BattleFinishAckPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonMatch_BattleFinishAckPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasReward {
		i--
		if m.HasReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.DungeonId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *DungeonMatch) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_MatchOfflineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_MatchOfflineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_GetRoomCntRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_GetRoomCntResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room_cnt")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoomCnt == nil {
		w.RawString("null")
	} else if len(m.RoomCnt) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoomCnt {
			w.Int64(int64(v))
			if i != len(m.RoomCnt)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_CreateRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DungeonId != 0 {
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_CreateRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_GetCurrRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_GetCurrRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_JoinRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.DungeonId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_JoinRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_LeaveRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.DungeonId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_LeaveRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_GetRoleRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_GetRoleRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_DismissRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_DismissRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_DismissEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_SetOptionRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("option")
	w.RawByte('"')
	w.RawByte(':')
	m.Option.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_SetOptionResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_GetRandomRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DungeonId != 0 {
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	if m.Num != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_GetRandomRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rooms")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rooms == nil {
		w.RawString("null")
	} else if len(m.Rooms) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Rooms {
			v.JsonBytes(w)
			if i != len(m.Rooms)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_InviteRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_InviteResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_InviteOnlineAckRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_InviteOnlineAckResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_ConfirmInviteRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfirmTyp != 0 {
		w.RawByte('"')
		w.RawString("confirm_typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfirmTyp))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_ConfirmInviteResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_StartBattleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_StartBattleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_ReGetBattleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *DungeonMatch_ReGetBattleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_RoomChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_RoomClosePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_InvitePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.DungeonId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_DungeonStartPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_DungeonFinishPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.HasReward {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("has_reward")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasReward)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch_BattleFinishAckPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != "" {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoomId)
		needWriteComma = true
	}
	if m.DungeonId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	if m.HasReward {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("has_reward")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasReward)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonMatch) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch) GoString() string {
	return m.String()
}

func (m *DungeonMatch_MatchOfflineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_MatchOfflineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_MatchOfflineRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_MatchOfflineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_MatchOfflineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_MatchOfflineResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetRoomCntRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetRoomCntRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetRoomCntRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetRoomCntResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetRoomCntResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetRoomCntResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_CreateRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_CreateRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_CreateRoomRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_CreateRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_CreateRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_CreateRoomResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetCurrRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetCurrRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetCurrRoomRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetCurrRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetCurrRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetCurrRoomResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_JoinRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_JoinRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_JoinRoomRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_JoinRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_JoinRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_JoinRoomResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_LeaveRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_LeaveRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_LeaveRoomRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_LeaveRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_LeaveRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_LeaveRoomResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetRoleRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetRoleRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetRoleRoomRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetRoleRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetRoleRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetRoleRoomResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_DismissRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_DismissRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_DismissRoomRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_DismissRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_DismissRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_DismissRoomResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_DismissEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_DismissEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_DismissEvent) GoString() string {
	return m.String()
}

func (m *DungeonMatch_SetOptionRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_SetOptionRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_SetOptionRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_SetOptionResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_SetOptionResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_SetOptionResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetRandomRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetRandomRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetRandomRoomRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_GetRandomRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_GetRandomRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_GetRandomRoomResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_InviteRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_InviteRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_InviteRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_InviteResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_InviteResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_InviteResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_InviteOnlineAckRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_InviteOnlineAckRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_InviteOnlineAckRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_InviteOnlineAckResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_InviteOnlineAckResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_InviteOnlineAckResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_ConfirmInviteRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_ConfirmInviteRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_ConfirmInviteRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_ConfirmInviteResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_ConfirmInviteResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_ConfirmInviteResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_StartBattleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_StartBattleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_StartBattleRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_StartBattleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_StartBattleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_StartBattleResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_ReGetBattleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_ReGetBattleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_ReGetBattleRequest) GoString() string {
	return m.String()
}

func (m *DungeonMatch_ReGetBattleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_ReGetBattleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_ReGetBattleResponse) GoString() string {
	return m.String()
}

func (m *DungeonMatch_RoomChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_RoomChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_RoomChangePush) GoString() string {
	return m.String()
}

func (m *DungeonMatch_RoomClosePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_RoomClosePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_RoomClosePush) GoString() string {
	return m.String()
}

func (m *DungeonMatch_InvitePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_InvitePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_InvitePush) GoString() string {
	return m.String()
}

func (m *DungeonMatch_DungeonStartPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_DungeonStartPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_DungeonStartPush) GoString() string {
	return m.String()
}

func (m *DungeonMatch_DungeonFinishPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_DungeonFinishPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_DungeonFinishPush) GoString() string {
	return m.String()
}

func (m *DungeonMatch_BattleFinishAckPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonMatch_BattleFinishAckPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonMatch_BattleFinishAckPush) GoString() string {
	return m.String()
}

func (m *DungeonMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_MatchOfflineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	return n
}

func (m *DungeonMatch_MatchOfflineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_GetRoomCntRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_GetRoomCntResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomCnt) > 0 {
		l = 0
		for _, e := range m.RoomCnt {
			l += sovMatch(uint64(e))
		}
		n += 1 + sovMatch(uint64(l)) + l
	}
	return n
}

func (m *DungeonMatch_CreateRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DungeonId != 0 {
		n += 1 + sovMatch(uint64(m.DungeonId))
	}
	return n
}

func (m *DungeonMatch_CreateRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_GetCurrRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_GetCurrRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_JoinRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.DungeonId != 0 {
		n += 1 + sovMatch(uint64(m.DungeonId))
	}
	return n
}

func (m *DungeonMatch_JoinRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_LeaveRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.DungeonId != 0 {
		n += 1 + sovMatch(uint64(m.DungeonId))
	}
	return n
}

func (m *DungeonMatch_LeaveRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_GetRoleRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_GetRoleRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_DismissRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_DismissRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_DismissEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_SetOptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Option != nil {
		l = m.Option.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_SetOptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_GetRandomRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DungeonId != 0 {
		n += 1 + sovMatch(uint64(m.DungeonId))
	}
	if m.Num != 0 {
		n += 1 + sovMatch(uint64(m.Num))
	}
	return n
}

func (m *DungeonMatch_GetRandomRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	return n
}

func (m *DungeonMatch_InviteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_InviteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_InviteOnlineAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_InviteOnlineAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_ConfirmInviteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfirmTyp != 0 {
		n += 1 + sovMatch(uint64(m.ConfirmTyp))
	}
	return n
}

func (m *DungeonMatch_ConfirmInviteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_StartBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovMatch(uint64(m.BattleServerId))
	}
	return n
}

func (m *DungeonMatch_StartBattleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_ReGetBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DungeonMatch_ReGetBattleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.BattleId != 0 {
		n += 1 + sovMatch(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovMatch(uint64(m.MapId))
	}
	return n
}

func (m *DungeonMatch_RoomChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_RoomClosePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	return n
}

func (m *DungeonMatch_InvitePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.DungeonId != 0 {
		n += 1 + sovMatch(uint64(m.DungeonId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *DungeonMatch_DungeonStartPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.BattleId != 0 {
		n += 1 + sovMatch(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovMatch(uint64(m.MapId))
	}
	return n
}

func (m *DungeonMatch_DungeonFinishPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.BattleId != 0 {
		n += 1 + sovMatch(uint64(m.BattleId))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMatch(uint64(k)) + 1 + sovMatch(uint64(v))
			n += mapEntrySize + 1 + sovMatch(uint64(mapEntrySize))
		}
	}
	if m.HasReward {
		n += 2
	}
	return n
}

func (m *DungeonMatch_BattleFinishAckPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.DungeonId != 0 {
		n += 1 + sovMatch(uint64(m.DungeonId))
	}
	if m.HasReward {
		n += 2
	}
	return n
}

func sovMatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DungeonMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DungeonMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DungeonMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_MatchOfflineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchOfflineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchOfflineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_MatchOfflineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchOfflineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchOfflineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetRoomCntRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomCntRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomCntRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetRoomCntResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomCntResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomCntResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomCnt = append(m.RoomCnt, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomCnt) == 0 {
					m.RoomCnt = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomCnt = append(m.RoomCnt, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomCnt", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_CreateRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_CreateRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetCurrRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetCurrRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_JoinRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_JoinRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_LeaveRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_LeaveRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetRoleRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetRoleRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_DismissRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_DismissRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_DismissEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_SetOptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Option == nil {
				m.Option = &models.RoomOpt{}
			}
			if err := m.Option.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_SetOptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetRandomRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_GetRandomRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &models.Room{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_InviteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_InviteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_InviteOnlineAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteOnlineAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteOnlineAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_InviteOnlineAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteOnlineAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteOnlineAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_ConfirmInviteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmInviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmInviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmTyp", wireType)
			}
			m.ConfirmTyp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmTyp |= ConfirmTyp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_ConfirmInviteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmInviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmInviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_StartBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_StartBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_ReGetBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReGetBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReGetBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_ReGetBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReGetBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReGetBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_RoomChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_RoomClosePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomClosePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomClosePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_InvitePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_DungeonStartPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DungeonStartPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DungeonStartPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_DungeonFinishPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DungeonFinishPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DungeonFinishPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMatch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMatch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasReward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonMatch_BattleFinishAckPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleFinishAckPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleFinishAckPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasReward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatch = fmt.Errorf("proto: unexpected end of group")
)
