// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/role-state-read-server/state_r_only.proto

package role_state_read

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ToClientType int32

const (
	ToClientType_Some ToClientType = 0
	ToClientType_All  ToClientType = 1
)

var ToClientType_name = map[int32]string{
	0: "Some",
	1: "All",
}

var ToClientType_value = map[string]int32{
	"Some": 0,
	"All":  1,
}

func (ToClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0}
}

type RoleStateROnly struct {
}

func (m *RoleStateROnly) Reset()      { *m = RoleStateROnly{} }
func (*RoleStateROnly) ProtoMessage() {}
func (*RoleStateROnly) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0}
}
func (m *RoleStateROnly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly.Merge(m, src)
}
func (m *RoleStateROnly) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly proto.InternalMessageInfo

func (*RoleStateROnly) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly"
}

type RoleStateROnly_GetRoleStateRequest struct {
	RoleIds []string `protobuf:"bytes,1,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (m *RoleStateROnly_GetRoleStateRequest) Reset()      { *m = RoleStateROnly_GetRoleStateRequest{} }
func (*RoleStateROnly_GetRoleStateRequest) ProtoMessage() {}
func (*RoleStateROnly_GetRoleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0, 0}
}
func (m *RoleStateROnly_GetRoleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly_GetRoleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly_GetRoleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly_GetRoleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly_GetRoleStateRequest.Merge(m, src)
}
func (m *RoleStateROnly_GetRoleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly_GetRoleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly_GetRoleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly_GetRoleStateRequest proto.InternalMessageInfo

func (m *RoleStateROnly_GetRoleStateRequest) GetRoleIds() []string {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

func (*RoleStateROnly_GetRoleStateRequest) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly.GetRoleStateRequest"
}

type RoleStateROnly_GetRoleStateResponse struct {
	State []*RoleStateROnly_RoleState `protobuf:"bytes,1,rep,name=state,proto3" json:"state,omitempty"`
}

func (m *RoleStateROnly_GetRoleStateResponse) Reset()      { *m = RoleStateROnly_GetRoleStateResponse{} }
func (*RoleStateROnly_GetRoleStateResponse) ProtoMessage() {}
func (*RoleStateROnly_GetRoleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0, 1}
}
func (m *RoleStateROnly_GetRoleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly_GetRoleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly_GetRoleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly_GetRoleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly_GetRoleStateResponse.Merge(m, src)
}
func (m *RoleStateROnly_GetRoleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly_GetRoleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly_GetRoleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly_GetRoleStateResponse proto.InternalMessageInfo

func (m *RoleStateROnly_GetRoleStateResponse) GetState() []*RoleStateROnly_RoleState {
	if m != nil {
		return m.State
	}
	return nil
}

func (*RoleStateROnly_GetRoleStateResponse) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly.GetRoleStateResponse"
}

type RoleStateROnly_RoleState struct {
	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ServerId int64  `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	GateId   int64  `protobuf:"varint,3,opt,name=gate_id,json=gateId,proto3" json:"gate_id,omitempty"`
}

func (m *RoleStateROnly_RoleState) Reset()      { *m = RoleStateROnly_RoleState{} }
func (*RoleStateROnly_RoleState) ProtoMessage() {}
func (*RoleStateROnly_RoleState) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0, 2}
}
func (m *RoleStateROnly_RoleState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly_RoleState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly_RoleState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly_RoleState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly_RoleState.Merge(m, src)
}
func (m *RoleStateROnly_RoleState) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly_RoleState) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly_RoleState.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly_RoleState proto.InternalMessageInfo

func (m *RoleStateROnly_RoleState) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoleStateROnly_RoleState) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *RoleStateROnly_RoleState) GetGateId() int64 {
	if m != nil {
		return m.GateId
	}
	return 0
}

func (*RoleStateROnly_RoleState) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly.RoleState"
}

type RoleStateROnly_PushToClient struct {
	Roles    []string     `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	Messages []*types.Any `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Type     ToClientType `protobuf:"varint,3,opt,name=type,proto3,enum=role_state_read.ToClientType" json:"type,omitempty"`
}

func (m *RoleStateROnly_PushToClient) Reset()      { *m = RoleStateROnly_PushToClient{} }
func (*RoleStateROnly_PushToClient) ProtoMessage() {}
func (*RoleStateROnly_PushToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0, 3}
}
func (m *RoleStateROnly_PushToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly_PushToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly_PushToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly_PushToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly_PushToClient.Merge(m, src)
}
func (m *RoleStateROnly_PushToClient) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly_PushToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly_PushToClient.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly_PushToClient proto.InternalMessageInfo

func (m *RoleStateROnly_PushToClient) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *RoleStateROnly_PushToClient) GetMessages() []*types.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *RoleStateROnly_PushToClient) GetType() ToClientType {
	if m != nil {
		return m.Type
	}
	return ToClientType_Some
}

func (*RoleStateROnly_PushToClient) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly.PushToClient"
}

type RoleStateROnly_PushManyToClient struct {
	Pcs []*RoleStateROnly_PushToClient `protobuf:"bytes,1,rep,name=pcs,proto3" json:"pcs,omitempty"`
}

func (m *RoleStateROnly_PushManyToClient) Reset()      { *m = RoleStateROnly_PushManyToClient{} }
func (*RoleStateROnly_PushManyToClient) ProtoMessage() {}
func (*RoleStateROnly_PushManyToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0, 4}
}
func (m *RoleStateROnly_PushManyToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly_PushManyToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly_PushManyToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly_PushManyToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly_PushManyToClient.Merge(m, src)
}
func (m *RoleStateROnly_PushManyToClient) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly_PushManyToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly_PushManyToClient.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly_PushManyToClient proto.InternalMessageInfo

func (m *RoleStateROnly_PushManyToClient) GetPcs() []*RoleStateROnly_PushToClient {
	if m != nil {
		return m.Pcs
	}
	return nil
}

func (*RoleStateROnly_PushManyToClient) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly.PushManyToClient"
}

type RoleStateROnly_PushToAllClient struct {
	Messages []*types.Any `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *RoleStateROnly_PushToAllClient) Reset()      { *m = RoleStateROnly_PushToAllClient{} }
func (*RoleStateROnly_PushToAllClient) ProtoMessage() {}
func (*RoleStateROnly_PushToAllClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0, 5}
}
func (m *RoleStateROnly_PushToAllClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly_PushToAllClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly_PushToAllClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly_PushToAllClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly_PushToAllClient.Merge(m, src)
}
func (m *RoleStateROnly_PushToAllClient) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly_PushToAllClient) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly_PushToAllClient.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly_PushToAllClient proto.InternalMessageInfo

func (m *RoleStateROnly_PushToAllClient) GetMessages() []*types.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (*RoleStateROnly_PushToAllClient) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly.PushToAllClient"
}

type RoleStateROnly_CacheSlot struct {
	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoleStateROnly_CacheSlot) Reset()      { *m = RoleStateROnly_CacheSlot{} }
func (*RoleStateROnly_CacheSlot) ProtoMessage() {}
func (*RoleStateROnly_CacheSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_feead28137ef17e6, []int{0, 6}
}
func (m *RoleStateROnly_CacheSlot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleStateROnly_CacheSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleStateROnly_CacheSlot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleStateROnly_CacheSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleStateROnly_CacheSlot.Merge(m, src)
}
func (m *RoleStateROnly_CacheSlot) XXX_Size() int {
	return m.Size()
}
func (m *RoleStateROnly_CacheSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleStateROnly_CacheSlot.DiscardUnknown(m)
}

var xxx_messageInfo_RoleStateROnly_CacheSlot proto.InternalMessageInfo

func (m *RoleStateROnly_CacheSlot) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*RoleStateROnly_CacheSlot) XXX_MessageName() string {
	return "role_state_read.RoleStateROnly.CacheSlot"
}
func init() {
	proto.RegisterEnum("role_state_read.ToClientType", ToClientType_name, ToClientType_value)
	proto.RegisterType((*RoleStateROnly)(nil), "role_state_read.RoleStateROnly")
	proto.RegisterType((*RoleStateROnly_GetRoleStateRequest)(nil), "role_state_read.RoleStateROnly.GetRoleStateRequest")
	proto.RegisterType((*RoleStateROnly_GetRoleStateResponse)(nil), "role_state_read.RoleStateROnly.GetRoleStateResponse")
	proto.RegisterType((*RoleStateROnly_RoleState)(nil), "role_state_read.RoleStateROnly.RoleState")
	proto.RegisterType((*RoleStateROnly_PushToClient)(nil), "role_state_read.RoleStateROnly.PushToClient")
	proto.RegisterType((*RoleStateROnly_PushManyToClient)(nil), "role_state_read.RoleStateROnly.PushManyToClient")
	proto.RegisterType((*RoleStateROnly_PushToAllClient)(nil), "role_state_read.RoleStateROnly.PushToAllClient")
	proto.RegisterType((*RoleStateROnly_CacheSlot)(nil), "role_state_read.RoleStateROnly.CacheSlot")
	proto.RegisterMapType((map[string]string)(nil), "role_state_read.RoleStateROnly.CacheSlot.DataEntry")
}

func init() {
	proto.RegisterFile("proto/role-state-read-server/state_r_only.proto", fileDescriptor_feead28137ef17e6)
}

var fileDescriptor_feead28137ef17e6 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xf5, 0xc4, 0xf9, 0xf3, 0xfd, 0xaa, 0x36, 0x9a, 0x2f, 0x12, 0xa9, 0x11, 0xa3, 0xc0, 0x2a,
	0x20, 0xe2, 0x94, 0x76, 0x01, 0x62, 0x01, 0x0a, 0x01, 0x55, 0x59, 0x20, 0xd0, 0xa4, 0x02, 0xa9,
	0x9b, 0x68, 0x1a, 0x0f, 0x69, 0xc4, 0xc4, 0x13, 0x3c, 0x93, 0x4a, 0x7e, 0x04, 0x16, 0x48, 0x3c,
	0x06, 0x0b, 0x1e, 0xa4, 0xcb, 0x2e, 0xbb, 0x04, 0x67, 0xc3, 0x92, 0x47, 0x40, 0x33, 0x76, 0x82,
	0x0b, 0x8b, 0xb2, 0xf3, 0x3d, 0x73, 0xee, 0xbd, 0xe7, 0x9c, 0x2b, 0x43, 0x6f, 0x11, 0x4b, 0x2d,
	0x7b, 0xb1, 0x14, 0xbc, 0xab, 0x34, 0xd3, 0xbc, 0x1b, 0x73, 0x16, 0x76, 0x15, 0x8f, 0xcf, 0x78,
	0xdc, 0xb3, 0xc8, 0x38, 0x1e, 0xcb, 0x48, 0x24, 0x81, 0x65, 0xe2, 0x1d, 0x43, 0x1d, 0xe7, 0x0f,
	0x9c, 0x85, 0xfe, 0xee, 0x54, 0xca, 0xa9, 0xe0, 0xd9, 0xa0, 0x93, 0xe5, 0xbb, 0x1e, 0x8b, 0x72,
	0xee, 0x9d, 0xaf, 0x15, 0xd8, 0xa6, 0x52, 0xf0, 0x91, 0x61, 0xd3, 0x57, 0x91, 0x48, 0xfc, 0x3d,
	0xf8, 0xff, 0x90, 0xeb, 0xdf, 0x20, 0xff, 0xb0, 0xe4, 0x4a, 0xe3, 0x5d, 0xa8, 0xdb, 0xb9, 0xb3,
	0x50, 0xb5, 0x50, 0xdb, 0xed, 0x78, 0xb4, 0x66, 0xea, 0x61, 0xa8, 0xfc, 0xb7, 0xd0, 0xbc, 0xda,
	0xa1, 0x16, 0x32, 0x52, 0x1c, 0x3f, 0x85, 0x8a, 0x55, 0x61, 0xf9, 0xff, 0xed, 0xdf, 0x0d, 0xfe,
	0x10, 0x16, 0x5c, 0xdd, 0x5c, 0x28, 0xb3, 0x3e, 0xff, 0x18, 0xbc, 0x0d, 0x86, 0x6f, 0x40, 0x2d,
	0x17, 0xd0, 0x42, 0x6d, 0xd4, 0xf1, 0x68, 0x35, 0xdb, 0x8f, 0x6f, 0x82, 0x97, 0x85, 0x61, 0x9e,
	0x4a, 0x6d, 0xd4, 0x71, 0x69, 0x3d, 0x03, 0x86, 0xa1, 0xe9, 0x9a, 0x9a, 0x7d, 0xb3, 0xb0, 0xe5,
	0xda, 0xa7, 0xaa, 0x29, 0x87, 0xa1, 0xff, 0x11, 0xc1, 0xd6, 0xeb, 0xa5, 0x3a, 0x3d, 0x92, 0x03,
	0x31, 0xe3, 0x91, 0xc6, 0x4d, 0xa8, 0x98, 0x81, 0x6b, 0x77, 0x59, 0x81, 0xf7, 0xa0, 0x3e, 0xe7,
	0x4a, 0xb1, 0x29, 0x57, 0xad, 0x92, 0xb5, 0xd1, 0x0c, 0xb2, 0x38, 0x83, 0x75, 0x9c, 0x41, 0x3f,
	0x4a, 0xe8, 0x86, 0x85, 0x1f, 0x40, 0x59, 0x27, 0x0b, 0x6e, 0xd7, 0x6d, 0xef, 0xdf, 0xfa, 0xcb,
	0xf4, 0x7a, 0xe1, 0x51, 0xb2, 0xe0, 0xd4, 0x52, 0x7d, 0x0a, 0x0d, 0x23, 0xe5, 0x25, 0x8b, 0x92,
	0x8d, 0x9c, 0x27, 0xe0, 0x2e, 0x26, 0x2a, 0x8f, 0xee, 0xfe, 0x75, 0xd1, 0x15, 0x9d, 0x50, 0xd3,
	0xe8, 0x0f, 0x60, 0x27, 0x03, 0xfb, 0x42, 0xe4, 0x23, 0x8b, 0x5e, 0xd0, 0xbf, 0x78, 0xf1, 0x3f,
	0x21, 0xf0, 0x06, 0x6c, 0x72, 0xca, 0x47, 0x42, 0x6a, 0x7c, 0x08, 0xe5, 0x90, 0x69, 0x96, 0xf7,
	0x1e, 0x5c, 0xa7, 0x69, 0xd3, 0x18, 0x3c, 0x67, 0x9a, 0xbd, 0x88, 0x74, 0x9c, 0x50, 0x3b, 0xc0,
	0x7f, 0x08, 0xde, 0x06, 0xc2, 0x0d, 0x70, 0xdf, 0xf3, 0x24, 0xbf, 0xa9, 0xf9, 0x34, 0x97, 0x38,
	0x63, 0x62, 0xc9, 0xed, 0x31, 0x3d, 0x9a, 0x15, 0x8f, 0x4b, 0x8f, 0xd0, 0xbd, 0xdb, 0xb0, 0x55,
	0x8c, 0x0f, 0xd7, 0xa1, 0x3c, 0x92, 0x73, 0xde, 0x70, 0x70, 0x0d, 0xdc, 0xbe, 0x10, 0x0d, 0xf4,
	0xec, 0xcd, 0xe5, 0x77, 0xe2, 0x7c, 0x49, 0x09, 0x3a, 0x4f, 0x09, 0xba, 0x48, 0x09, 0xfa, 0x96,
	0x12, 0xf4, 0x23, 0x25, 0xce, 0xcf, 0x94, 0xa0, 0xcf, 0x2b, 0xe2, 0x9c, 0xaf, 0x08, 0xba, 0x58,
	0x11, 0xe7, 0x72, 0x45, 0x9c, 0xe3, 0xce, 0x44, 0xce, 0xa2, 0xf5, 0xbf, 0x34, 0x91, 0xf3, 0xb9,
	0x8c, 0x0a, 0xff, 0x5b, 0xc1, 0xdc, 0x49, 0xd5, 0xc2, 0x07, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x3c, 0x91, 0xc1, 0xcd, 0x8f, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly_GetRoleStateRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly_GetRoleStateResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly_RoleState.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly_PushToClient.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly_PushManyToClient.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly_PushToAllClient.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleStateROnly_CacheSlot.Get().(proto.Message)
	})
}

var poolRoleStateROnly = &sync.Pool{New: func() interface{} { return &RoleStateROnly{} }}

func (m *RoleStateROnly) ReleasePool() { m.Reset(); poolRoleStateROnly.Put(m); m = nil }

var poolRoleStateROnly_GetRoleStateRequest = &sync.Pool{New: func() interface{} { return &RoleStateROnly_GetRoleStateRequest{} }}

func (m *RoleStateROnly_GetRoleStateRequest) ReleasePool() {
	m.Reset()
	poolRoleStateROnly_GetRoleStateRequest.Put(m)
	m = nil
}

var poolRoleStateROnly_GetRoleStateResponse = &sync.Pool{New: func() interface{} { return &RoleStateROnly_GetRoleStateResponse{} }}

func (m *RoleStateROnly_GetRoleStateResponse) ReleasePool() {
	m.Reset()
	poolRoleStateROnly_GetRoleStateResponse.Put(m)
	m = nil
}

var poolRoleStateROnly_RoleState = &sync.Pool{New: func() interface{} { return &RoleStateROnly_RoleState{} }}

func (m *RoleStateROnly_RoleState) ReleasePool() {
	m.Reset()
	poolRoleStateROnly_RoleState.Put(m)
	m = nil
}

var poolRoleStateROnly_PushToClient = &sync.Pool{New: func() interface{} { return &RoleStateROnly_PushToClient{} }}

func (m *RoleStateROnly_PushToClient) ReleasePool() {
	m.Reset()
	poolRoleStateROnly_PushToClient.Put(m)
	m = nil
}

var poolRoleStateROnly_PushManyToClient = &sync.Pool{New: func() interface{} { return &RoleStateROnly_PushManyToClient{} }}

func (m *RoleStateROnly_PushManyToClient) ReleasePool() {
	m.Reset()
	poolRoleStateROnly_PushManyToClient.Put(m)
	m = nil
}

var poolRoleStateROnly_PushToAllClient = &sync.Pool{New: func() interface{} { return &RoleStateROnly_PushToAllClient{} }}

func (m *RoleStateROnly_PushToAllClient) ReleasePool() {
	m.Reset()
	poolRoleStateROnly_PushToAllClient.Put(m)
	m = nil
}

var poolRoleStateROnly_CacheSlot = &sync.Pool{New: func() interface{} { return &RoleStateROnly_CacheSlot{} }}

func (m *RoleStateROnly_CacheSlot) ReleasePool() {
	m.Reset()
	poolRoleStateROnly_CacheSlot.Put(m)
	m = nil
}
func (x ToClientType) String() string {
	s, ok := ToClientType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RoleStateROnly) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly)
	if !ok {
		that2, ok := that.(RoleStateROnly)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoleStateROnly_GetRoleStateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly_GetRoleStateRequest)
	if !ok {
		that2, ok := that.(RoleStateROnly_GetRoleStateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoleIds) != len(that1.RoleIds) {
		return false
	}
	for i := range this.RoleIds {
		if this.RoleIds[i] != that1.RoleIds[i] {
			return false
		}
	}
	return true
}
func (this *RoleStateROnly_GetRoleStateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly_GetRoleStateResponse)
	if !ok {
		that2, ok := that.(RoleStateROnly_GetRoleStateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.State) != len(that1.State) {
		return false
	}
	for i := range this.State {
		if !this.State[i].Equal(that1.State[i]) {
			return false
		}
	}
	return true
}
func (this *RoleStateROnly_RoleState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly_RoleState)
	if !ok {
		that2, ok := that.(RoleStateROnly_RoleState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.GateId != that1.GateId {
		return false
	}
	return true
}
func (this *RoleStateROnly_PushToClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly_PushToClient)
	if !ok {
		that2, ok := that.(RoleStateROnly_PushToClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *RoleStateROnly_PushManyToClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly_PushManyToClient)
	if !ok {
		that2, ok := that.(RoleStateROnly_PushManyToClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pcs) != len(that1.Pcs) {
		return false
	}
	for i := range this.Pcs {
		if !this.Pcs[i].Equal(that1.Pcs[i]) {
			return false
		}
	}
	return true
}
func (this *RoleStateROnly_PushToAllClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly_PushToAllClient)
	if !ok {
		that2, ok := that.(RoleStateROnly_PushToAllClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *RoleStateROnly_CacheSlot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleStateROnly_CacheSlot)
	if !ok {
		that2, ok := that.(RoleStateROnly_CacheSlot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (m *RoleStateROnly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoleStateROnly_GetRoleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly_GetRoleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly_GetRoleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for iNdEx := len(m.RoleIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleIds[iNdEx])
			copy(dAtA[i:], m.RoleIds[iNdEx])
			i = encodeVarintStateROnly(dAtA, i, uint64(len(m.RoleIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoleStateROnly_GetRoleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly_GetRoleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly_GetRoleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.State[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateROnly(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoleStateROnly_RoleState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly_RoleState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly_RoleState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GateId != 0 {
		i = encodeVarintStateROnly(dAtA, i, uint64(m.GateId))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerId != 0 {
		i = encodeVarintStateROnly(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintStateROnly(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleStateROnly_PushToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly_PushToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly_PushToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintStateROnly(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateROnly(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintStateROnly(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoleStateROnly_PushManyToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly_PushManyToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly_PushManyToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pcs) > 0 {
		for iNdEx := len(m.Pcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateROnly(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoleStateROnly_PushToAllClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly_PushToAllClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly_PushToAllClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateROnly(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoleStateROnly_CacheSlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStateROnly_CacheSlot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleStateROnly_CacheSlot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintStateROnly(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStateROnly(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStateROnly(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateROnly(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateROnly(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RoleStateROnly) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoleStateROnly_GetRoleStateRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleIds == nil {
		w.RawString("null")
	} else if len(m.RoleIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleIds {
			w.String(v)
			if i != len(m.RoleIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleStateROnly_GetRoleStateResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("state")
	w.RawByte('"')
	w.RawByte(':')
	if m.State == nil {
		w.RawString("null")
	} else if len(m.State) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.State {
			v.JsonBytes(w)
			if i != len(m.State)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleStateROnly_RoleState) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.GateId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("gate_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GateId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleStateROnly_PushToClient) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			w.String(v)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("messages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Messages == nil {
		w.RawString("null")
	} else if len(m.Messages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Messages {
			(*coin_server_common_proto_jsonany.Any)(v).JsonBytes(w)
			if i != len(m.Messages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleStateROnly_PushManyToClient) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pcs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Pcs == nil {
		w.RawString("null")
	} else if len(m.Pcs) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Pcs {
			v.JsonBytes(w)
			if i != len(m.Pcs)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleStateROnly_PushToAllClient) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("messages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Messages == nil {
		w.RawString("null")
	} else if len(m.Messages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Messages {
			(*coin_server_common_proto_jsonany.Any)(v).JsonBytes(w)
			if i != len(m.Messages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleStateROnly_CacheSlot) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	if m.Data == nil {
		w.RawString("null")
	} else if len(m.Data) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlData := len(m.Data)
		for k, v := range m.Data {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.String(v)
			mlData--
			if mlData != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleStateROnly) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly) GoString() string {
	return m.String()
}

func (m *RoleStateROnly_GetRoleStateRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly_GetRoleStateRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly_GetRoleStateRequest) GoString() string {
	return m.String()
}

func (m *RoleStateROnly_GetRoleStateResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly_GetRoleStateResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly_GetRoleStateResponse) GoString() string {
	return m.String()
}

func (m *RoleStateROnly_RoleState) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly_RoleState) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly_RoleState) GoString() string {
	return m.String()
}

func (m *RoleStateROnly_PushToClient) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly_PushToClient) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly_PushToClient) GoString() string {
	return m.String()
}

func (m *RoleStateROnly_PushManyToClient) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly_PushManyToClient) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly_PushManyToClient) GoString() string {
	return m.String()
}

func (m *RoleStateROnly_PushToAllClient) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly_PushToAllClient) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly_PushToAllClient) GoString() string {
	return m.String()
}

func (m *RoleStateROnly_CacheSlot) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleStateROnly_CacheSlot) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleStateROnly_CacheSlot) GoString() string {
	return m.String()
}

func (m *RoleStateROnly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoleStateROnly_GetRoleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for _, s := range m.RoleIds {
			l = len(s)
			n += 1 + l + sovStateROnly(uint64(l))
		}
	}
	return n
}

func (m *RoleStateROnly_GetRoleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 1 + l + sovStateROnly(uint64(l))
		}
	}
	return n
}

func (m *RoleStateROnly_RoleState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovStateROnly(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovStateROnly(uint64(m.ServerId))
	}
	if m.GateId != 0 {
		n += 1 + sovStateROnly(uint64(m.GateId))
	}
	return n
}

func (m *RoleStateROnly_PushToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovStateROnly(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovStateROnly(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovStateROnly(uint64(m.Type))
	}
	return n
}

func (m *RoleStateROnly_PushManyToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pcs) > 0 {
		for _, e := range m.Pcs {
			l = e.Size()
			n += 1 + l + sovStateROnly(uint64(l))
		}
	}
	return n
}

func (m *RoleStateROnly_PushToAllClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovStateROnly(uint64(l))
		}
	}
	return n
}

func (m *RoleStateROnly_CacheSlot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStateROnly(uint64(len(k))) + 1 + len(v) + sovStateROnly(uint64(len(v)))
			n += mapEntrySize + 1 + sovStateROnly(uint64(mapEntrySize))
		}
	}
	return n
}

func sovStateROnly(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateROnly(x uint64) (n int) {
	return sovStateROnly(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoleStateROnly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleStateROnly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleStateROnly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStateROnly_GetRoleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIds = append(m.RoleIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStateROnly_GetRoleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, &RoleStateROnly_RoleState{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStateROnly_RoleState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateId", wireType)
			}
			m.GateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStateROnly_PushToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ToClientType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStateROnly_PushManyToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushManyToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushManyToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pcs = append(m.Pcs, &RoleStateROnly_PushToClient{})
			if err := m.Pcs[len(m.Pcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStateROnly_PushToAllClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushToAllClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushToAllClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStateROnly_CacheSlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheSlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheSlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateROnly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateROnly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStateROnly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStateROnly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStateROnly
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStateROnly
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStateROnly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthStateROnly
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthStateROnly
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStateROnly(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStateROnly
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateROnly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateROnly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateROnly(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateROnly
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateROnly
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateROnly
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateROnly
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateROnly
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateROnly        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateROnly          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateROnly = fmt.Errorf("proto: unexpected end of group")
)
