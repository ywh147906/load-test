// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/roguelike-match-server/match.proto

package roguelike_match

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoguelikeMatchErrorCode int32

const (
	RoguelikeMatchErrorCode_ErrRLRoomNotExist        RoguelikeMatchErrorCode = 0
	RoguelikeMatchErrorCode_ErrRLRoomFull            RoguelikeMatchErrorCode = 1
	RoguelikeMatchErrorCode_ErrRLNotOwner            RoguelikeMatchErrorCode = 2
	RoguelikeMatchErrorCode_ErrRLNotIn               RoguelikeMatchErrorCode = 3
	RoguelikeMatchErrorCode_ErrRLOnlyCanJoinOneRoom  RoguelikeMatchErrorCode = 4
	RoguelikeMatchErrorCode_ErrRLTarNotInThisRoom    RoguelikeMatchErrorCode = 5
	RoguelikeMatchErrorCode_ErrRoguelikeNotExist     RoguelikeMatchErrorCode = 6
	RoguelikeMatchErrorCode_ErrRLBeenInvited         RoguelikeMatchErrorCode = 7
	RoguelikeMatchErrorCode_ErrRLOnlyOwnerCanStart   RoguelikeMatchErrorCode = 8
	RoguelikeMatchErrorCode_ErrRLOnlyOwnerCanInvite  RoguelikeMatchErrorCode = 9
	RoguelikeMatchErrorCode_ErrRoguelikeNotStart     RoguelikeMatchErrorCode = 10
	RoguelikeMatchErrorCode_ErrRoguelikeAlreadyStart RoguelikeMatchErrorCode = 11
	RoguelikeMatchErrorCode_ErrRLNotChooseHero       RoguelikeMatchErrorCode = 12
	RoguelikeMatchErrorCode_ErrRLNotAllReady         RoguelikeMatchErrorCode = 13
	RoguelikeMatchErrorCode_ErrRLNotEnoughJoinCnt    RoguelikeMatchErrorCode = 14
	RoguelikeMatchErrorCode_ErrRLNotEnoughPart       RoguelikeMatchErrorCode = 15
	RoguelikeMatchErrorCode_ErrRLAlreadyOwner        RoguelikeMatchErrorCode = 16
	RoguelikeMatchErrorCode_ErrRLRobotCantBeOwner    RoguelikeMatchErrorCode = 17
	RoguelikeMatchErrorCode_ErrRLDungeonNotToday     RoguelikeMatchErrorCode = 18
	RoguelikeMatchErrorCode_ErrRLDungeonNotOpen      RoguelikeMatchErrorCode = 19
	RoguelikeMatchErrorCode_ErrRLCombatNotEnough     RoguelikeMatchErrorCode = 20
)

var RoguelikeMatchErrorCode_name = map[int32]string{
	0:  "ErrRLRoomNotExist",
	1:  "ErrRLRoomFull",
	2:  "ErrRLNotOwner",
	3:  "ErrRLNotIn",
	4:  "ErrRLOnlyCanJoinOneRoom",
	5:  "ErrRLTarNotInThisRoom",
	6:  "ErrRoguelikeNotExist",
	7:  "ErrRLBeenInvited",
	8:  "ErrRLOnlyOwnerCanStart",
	9:  "ErrRLOnlyOwnerCanInvite",
	10: "ErrRoguelikeNotStart",
	11: "ErrRoguelikeAlreadyStart",
	12: "ErrRLNotChooseHero",
	13: "ErrRLNotAllReady",
	14: "ErrRLNotEnoughJoinCnt",
	15: "ErrRLNotEnoughPart",
	16: "ErrRLAlreadyOwner",
	17: "ErrRLRobotCantBeOwner",
	18: "ErrRLDungeonNotToday",
	19: "ErrRLDungeonNotOpen",
	20: "ErrRLCombatNotEnough",
}

var RoguelikeMatchErrorCode_value = map[string]int32{
	"ErrRLRoomNotExist":        0,
	"ErrRLRoomFull":            1,
	"ErrRLNotOwner":            2,
	"ErrRLNotIn":               3,
	"ErrRLOnlyCanJoinOneRoom":  4,
	"ErrRLTarNotInThisRoom":    5,
	"ErrRoguelikeNotExist":     6,
	"ErrRLBeenInvited":         7,
	"ErrRLOnlyOwnerCanStart":   8,
	"ErrRLOnlyOwnerCanInvite":  9,
	"ErrRoguelikeNotStart":     10,
	"ErrRoguelikeAlreadyStart": 11,
	"ErrRLNotChooseHero":       12,
	"ErrRLNotAllReady":         13,
	"ErrRLNotEnoughJoinCnt":    14,
	"ErrRLNotEnoughPart":       15,
	"ErrRLAlreadyOwner":        16,
	"ErrRLRobotCantBeOwner":    17,
	"ErrRLDungeonNotToday":     18,
	"ErrRLDungeonNotOpen":      19,
	"ErrRLCombatNotEnough":     20,
}

func (RoguelikeMatchErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0}
}

type RoguelikeMatch struct {
}

func (m *RoguelikeMatch) Reset()      { *m = RoguelikeMatch{} }
func (*RoguelikeMatch) ProtoMessage() {}
func (*RoguelikeMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0}
}
func (m *RoguelikeMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch.Merge(m, src)
}
func (m *RoguelikeMatch) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch proto.InternalMessageInfo

func (*RoguelikeMatch) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch"
}

// 匹配离线玩家（机器人）
type RoguelikeMatch_RLMatchOfflineRequest struct {
	ConfigIds []int64 `protobuf:"varint,1,rep,packed,name=config_ids,json=configIds,proto3" json:"config_ids,omitempty"`
}

func (m *RoguelikeMatch_RLMatchOfflineRequest) Reset()      { *m = RoguelikeMatch_RLMatchOfflineRequest{} }
func (*RoguelikeMatch_RLMatchOfflineRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLMatchOfflineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 0}
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLMatchOfflineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLMatchOfflineRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLMatchOfflineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLMatchOfflineRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLMatchOfflineRequest) GetConfigIds() []int64 {
	if m != nil {
		return m.ConfigIds
	}
	return nil
}

func (*RoguelikeMatch_RLMatchOfflineRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLMatchOfflineRequest"
}

type RoguelikeMatch_RLMatchOfflineResponse struct {
}

func (m *RoguelikeMatch_RLMatchOfflineResponse) Reset()      { *m = RoguelikeMatch_RLMatchOfflineResponse{} }
func (*RoguelikeMatch_RLMatchOfflineResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLMatchOfflineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 1}
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLMatchOfflineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLMatchOfflineResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLMatchOfflineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLMatchOfflineResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLMatchOfflineResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLMatchOfflineResponse"
}

// 获取今日副本大类
type RoguelikeMatch_RLGetTodayBossRequest struct {
}

func (m *RoguelikeMatch_RLGetTodayBossRequest) Reset()      { *m = RoguelikeMatch_RLGetTodayBossRequest{} }
func (*RoguelikeMatch_RLGetTodayBossRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLGetTodayBossRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 2}
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetTodayBossRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetTodayBossRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetTodayBossRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetTodayBossRequest proto.InternalMessageInfo

func (*RoguelikeMatch_RLGetTodayBossRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetTodayBossRequest"
}

type RoguelikeMatch_RLGetTodayBossResponse struct {
	DungeonDay   int64                           `protobuf:"varint,1,opt,name=dungeon_day,json=dungeonDay,proto3" json:"dungeon_day,omitempty"`
	BossSkill    map[int64]*models.BossSkillList `protobuf:"bytes,2,rep,name=boss_skill,json=bossSkill,proto3" json:"boss_skill,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MonsterSkill map[int64]*models.BossSkillList `protobuf:"bytes,3,rep,name=monster_skill,json=monsterSkill,proto3" json:"monster_skill,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JoinCnt      int64                           `protobuf:"varint,4,opt,name=join_cnt,json=joinCnt,proto3" json:"join_cnt,omitempty"`
	ExtraCnt     int64                           `protobuf:"varint,5,opt,name=extra_cnt,json=extraCnt,proto3" json:"extra_cnt,omitempty"`
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) Reset()      { *m = RoguelikeMatch_RLGetTodayBossResponse{} }
func (*RoguelikeMatch_RLGetTodayBossResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLGetTodayBossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 3}
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetTodayBossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetTodayBossResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetTodayBossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetTodayBossResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLGetTodayBossResponse) GetDungeonDay() int64 {
	if m != nil {
		return m.DungeonDay
	}
	return 0
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) GetBossSkill() map[int64]*models.BossSkillList {
	if m != nil {
		return m.BossSkill
	}
	return nil
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) GetMonsterSkill() map[int64]*models.BossSkillList {
	if m != nil {
		return m.MonsterSkill
	}
	return nil
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) GetJoinCnt() int64 {
	if m != nil {
		return m.JoinCnt
	}
	return 0
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) GetExtraCnt() int64 {
	if m != nil {
		return m.ExtraCnt
	}
	return 0
}

func (*RoguelikeMatch_RLGetTodayBossResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetTodayBossResponse"
}

// 创建房间
type RoguelikeMatch_RLCreateRoomRequest struct {
	RoguelikeId int64 `protobuf:"varint,1,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
	CombatNeed  int64 `protobuf:"varint,2,opt,name=combat_need,json=combatNeed,proto3" json:"combat_need,omitempty"`
}

func (m *RoguelikeMatch_RLCreateRoomRequest) Reset()      { *m = RoguelikeMatch_RLCreateRoomRequest{} }
func (*RoguelikeMatch_RLCreateRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLCreateRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 4}
}
func (m *RoguelikeMatch_RLCreateRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLCreateRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLCreateRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLCreateRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLCreateRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLCreateRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLCreateRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLCreateRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLCreateRoomRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLCreateRoomRequest) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (m *RoguelikeMatch_RLCreateRoomRequest) GetCombatNeed() int64 {
	if m != nil {
		return m.CombatNeed
	}
	return 0
}

func (*RoguelikeMatch_RLCreateRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLCreateRoomRequest"
}

type RoguelikeMatch_RLCreateRoomResponse struct {
	Room *models.RoguelikeRoom `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *RoguelikeMatch_RLCreateRoomResponse) Reset()      { *m = RoguelikeMatch_RLCreateRoomResponse{} }
func (*RoguelikeMatch_RLCreateRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLCreateRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 5}
}
func (m *RoguelikeMatch_RLCreateRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLCreateRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLCreateRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLCreateRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLCreateRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLCreateRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLCreateRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLCreateRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLCreateRoomResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLCreateRoomResponse) GetRoom() *models.RoguelikeRoom {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*RoguelikeMatch_RLCreateRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLCreateRoomResponse"
}

// 改变入队战斗力
type RoguelikeMatch_RLChangeCombatNeedRequest struct {
	CombatNeed int64 `protobuf:"varint,1,opt,name=combat_need,json=combatNeed,proto3" json:"combat_need,omitempty"`
}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) Reset() {
	*m = RoguelikeMatch_RLChangeCombatNeedRequest{}
}
func (*RoguelikeMatch_RLChangeCombatNeedRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLChangeCombatNeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 6}
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) GetCombatNeed() int64 {
	if m != nil {
		return m.CombatNeed
	}
	return 0
}

func (*RoguelikeMatch_RLChangeCombatNeedRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLChangeCombatNeedRequest"
}

type RoguelikeMatch_RLChangeCombatNeedResponse struct {
	Room *models.RoguelikeRoom `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) Reset() {
	*m = RoguelikeMatch_RLChangeCombatNeedResponse{}
}
func (*RoguelikeMatch_RLChangeCombatNeedResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLChangeCombatNeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 7}
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLChangeCombatNeedResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) GetRoom() *models.RoguelikeRoom {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*RoguelikeMatch_RLChangeCombatNeedResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLChangeCombatNeedResponse"
}

// 获取当前房间
type RoguelikeMatch_RLGetCurrRoomRequest struct {
}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) Reset()      { *m = RoguelikeMatch_RLGetCurrRoomRequest{} }
func (*RoguelikeMatch_RLGetCurrRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLGetCurrRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 8}
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomRequest proto.InternalMessageInfo

func (*RoguelikeMatch_RLGetCurrRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetCurrRoomRequest"
}

type RoguelikeMatch_RLGetCurrRoomResponse struct {
	Room *models.RoguelikeRoom `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) Reset()      { *m = RoguelikeMatch_RLGetCurrRoomResponse{} }
func (*RoguelikeMatch_RLGetCurrRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLGetCurrRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 9}
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetCurrRoomResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLGetCurrRoomResponse) GetRoom() *models.RoguelikeRoom {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*RoguelikeMatch_RLGetCurrRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetCurrRoomResponse"
}

// 加入某个房间
type RoguelikeMatch_RLJoinRoomRequest struct {
	RoomId      int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoguelikeId int64 `protobuf:"varint,2,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
	UserFight   int64 `protobuf:"varint,3,opt,name=user_fight,json=userFight,proto3" json:"user_fight,omitempty"`
	IsPrivate   bool  `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (m *RoguelikeMatch_RLJoinRoomRequest) Reset()      { *m = RoguelikeMatch_RLJoinRoomRequest{} }
func (*RoguelikeMatch_RLJoinRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLJoinRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 10}
}
func (m *RoguelikeMatch_RLJoinRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLJoinRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLJoinRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLJoinRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLJoinRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLJoinRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLJoinRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLJoinRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLJoinRoomRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLJoinRoomRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLJoinRoomRequest) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (m *RoguelikeMatch_RLJoinRoomRequest) GetUserFight() int64 {
	if m != nil {
		return m.UserFight
	}
	return 0
}

func (m *RoguelikeMatch_RLJoinRoomRequest) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (*RoguelikeMatch_RLJoinRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLJoinRoomRequest"
}

type RoguelikeMatch_RLJoinRoomResponse struct {
	Room *models.RoguelikeRoom `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *RoguelikeMatch_RLJoinRoomResponse) Reset()      { *m = RoguelikeMatch_RLJoinRoomResponse{} }
func (*RoguelikeMatch_RLJoinRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLJoinRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 11}
}
func (m *RoguelikeMatch_RLJoinRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLJoinRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLJoinRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLJoinRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLJoinRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLJoinRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLJoinRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLJoinRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLJoinRoomResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLJoinRoomResponse) GetRoom() *models.RoguelikeRoom {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*RoguelikeMatch_RLJoinRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLJoinRoomResponse"
}

// 离开某个房间
type RoguelikeMatch_RLLeaveRoomRequest struct {
	RoomId      int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoguelikeId int64 `protobuf:"varint,2,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
}

func (m *RoguelikeMatch_RLLeaveRoomRequest) Reset()      { *m = RoguelikeMatch_RLLeaveRoomRequest{} }
func (*RoguelikeMatch_RLLeaveRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLLeaveRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 12}
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLLeaveRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLLeaveRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLLeaveRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLLeaveRoomRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLLeaveRoomRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLLeaveRoomRequest) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (*RoguelikeMatch_RLLeaveRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLLeaveRoomRequest"
}

type RoguelikeMatch_RLLeaveRoomResponse struct {
}

func (m *RoguelikeMatch_RLLeaveRoomResponse) Reset()      { *m = RoguelikeMatch_RLLeaveRoomResponse{} }
func (*RoguelikeMatch_RLLeaveRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLLeaveRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 13}
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLLeaveRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLLeaveRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLLeaveRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLLeaveRoomResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLLeaveRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLLeaveRoomResponse"
}

// 获取某个玩家的房间
type RoguelikeMatch_RLGetRoleRoomRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) Reset()      { *m = RoguelikeMatch_RLGetRoleRoomRequest{} }
func (*RoguelikeMatch_RLGetRoleRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLGetRoleRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 14}
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLGetRoleRoomRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*RoguelikeMatch_RLGetRoleRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetRoleRoomRequest"
}

type RoguelikeMatch_RLGetRoleRoomResponse struct {
	Room *models.RoguelikeRoom `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) Reset()      { *m = RoguelikeMatch_RLGetRoleRoomResponse{} }
func (*RoguelikeMatch_RLGetRoleRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLGetRoleRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 15}
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetRoleRoomResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLGetRoleRoomResponse) GetRoom() *models.RoguelikeRoom {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*RoguelikeMatch_RLGetRoleRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetRoleRoomResponse"
}

// 解散房间
type RoguelikeMatch_RLDismissRoomRequest struct {
}

func (m *RoguelikeMatch_RLDismissRoomRequest) Reset()      { *m = RoguelikeMatch_RLDismissRoomRequest{} }
func (*RoguelikeMatch_RLDismissRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLDismissRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 16}
}
func (m *RoguelikeMatch_RLDismissRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLDismissRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLDismissRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLDismissRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLDismissRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLDismissRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLDismissRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLDismissRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLDismissRoomRequest proto.InternalMessageInfo

func (*RoguelikeMatch_RLDismissRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLDismissRoomRequest"
}

type RoguelikeMatch_RLDismissRoomResponse struct {
}

func (m *RoguelikeMatch_RLDismissRoomResponse) Reset()      { *m = RoguelikeMatch_RLDismissRoomResponse{} }
func (*RoguelikeMatch_RLDismissRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLDismissRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 17}
}
func (m *RoguelikeMatch_RLDismissRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLDismissRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLDismissRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLDismissRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLDismissRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLDismissRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLDismissRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLDismissRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLDismissRoomResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLDismissRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLDismissRoomResponse"
}

// 解散房间推送
type RoguelikeMatch_RLDismissEvent struct {
}

func (m *RoguelikeMatch_RLDismissEvent) Reset()      { *m = RoguelikeMatch_RLDismissEvent{} }
func (*RoguelikeMatch_RLDismissEvent) ProtoMessage() {}
func (*RoguelikeMatch_RLDismissEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 18}
}
func (m *RoguelikeMatch_RLDismissEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLDismissEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLDismissEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLDismissEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLDismissEvent.Merge(m, src)
}
func (m *RoguelikeMatch_RLDismissEvent) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLDismissEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLDismissEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLDismissEvent proto.InternalMessageInfo

func (*RoguelikeMatch_RLDismissEvent) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLDismissEvent"
}

// 设置房间开发状态
type RoguelikeMatch_RLPubRoomRequest struct {
	IsOpen bool `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (m *RoguelikeMatch_RLPubRoomRequest) Reset()      { *m = RoguelikeMatch_RLPubRoomRequest{} }
func (*RoguelikeMatch_RLPubRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLPubRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 19}
}
func (m *RoguelikeMatch_RLPubRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLPubRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLPubRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLPubRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLPubRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLPubRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLPubRoomRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLPubRoomRequest) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (*RoguelikeMatch_RLPubRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLPubRoomRequest"
}

type RoguelikeMatch_RLPubRoomResponse struct {
}

func (m *RoguelikeMatch_RLPubRoomResponse) Reset()      { *m = RoguelikeMatch_RLPubRoomResponse{} }
func (*RoguelikeMatch_RLPubRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLPubRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 20}
}
func (m *RoguelikeMatch_RLPubRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLPubRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLPubRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLPubRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLPubRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLPubRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLPubRoomResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLPubRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLPubRoomResponse"
}

// 随机获取某地图的房间
type RoguelikeMatch_RLGetRandomRoomRequest struct {
	RoguelikeId []int64 `protobuf:"varint,1,rep,packed,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
	Num         int64   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) Reset()      { *m = RoguelikeMatch_RLGetRandomRoomRequest{} }
func (*RoguelikeMatch_RLGetRandomRoomRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLGetRandomRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 21}
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLGetRandomRoomRequest) GetRoguelikeId() []int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return nil
}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*RoguelikeMatch_RLGetRandomRoomRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetRandomRoomRequest"
}

type RoguelikeMatch_RLGetRandomRoomResponse struct {
	Rooms []*models.RoguelikeRoom `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) Reset() {
	*m = RoguelikeMatch_RLGetRandomRoomResponse{}
}
func (*RoguelikeMatch_RLGetRandomRoomResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLGetRandomRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 22}
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLGetRandomRoomResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLGetRandomRoomResponse) GetRooms() []*models.RoguelikeRoom {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (*RoguelikeMatch_RLGetRandomRoomResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLGetRandomRoomResponse"
}

// 邀请某玩家
type RoguelikeMatch_RLInviteRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *RoguelikeMatch_RLInviteRequest) Reset()      { *m = RoguelikeMatch_RLInviteRequest{} }
func (*RoguelikeMatch_RLInviteRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLInviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 23}
}
func (m *RoguelikeMatch_RLInviteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLInviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLInviteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLInviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLInviteRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLInviteRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLInviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLInviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLInviteRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLInviteRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*RoguelikeMatch_RLInviteRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLInviteRequest"
}

type RoguelikeMatch_RLInviteResponse struct {
}

func (m *RoguelikeMatch_RLInviteResponse) Reset()      { *m = RoguelikeMatch_RLInviteResponse{} }
func (*RoguelikeMatch_RLInviteResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLInviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 24}
}
func (m *RoguelikeMatch_RLInviteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLInviteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLInviteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLInviteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLInviteResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLInviteResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLInviteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLInviteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLInviteResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLInviteResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLInviteResponse"
}

// 发送房间到世界频道
type RoguelikeMatch_RLPubRoomToChatRequest struct {
}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) Reset()      { *m = RoguelikeMatch_RLPubRoomToChatRequest{} }
func (*RoguelikeMatch_RLPubRoomToChatRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLPubRoomToChatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 25}
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatRequest proto.InternalMessageInfo

func (*RoguelikeMatch_RLPubRoomToChatRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLPubRoomToChatRequest"
}

type RoguelikeMatch_RLPubRoomToChatResponse struct {
}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) Reset() {
	*m = RoguelikeMatch_RLPubRoomToChatResponse{}
}
func (*RoguelikeMatch_RLPubRoomToChatResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLPubRoomToChatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 26}
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLPubRoomToChatResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLPubRoomToChatResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLPubRoomToChatResponse"
}

// 进入战斗
type RoguelikeMatch_RLStartBattleRequest struct {
}

func (m *RoguelikeMatch_RLStartBattleRequest) Reset()      { *m = RoguelikeMatch_RLStartBattleRequest{} }
func (*RoguelikeMatch_RLStartBattleRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLStartBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 27}
}
func (m *RoguelikeMatch_RLStartBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLStartBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLStartBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLStartBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLStartBattleRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLStartBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLStartBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLStartBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLStartBattleRequest proto.InternalMessageInfo

func (*RoguelikeMatch_RLStartBattleRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLStartBattleRequest"
}

type RoguelikeMatch_RLStartBattleResponse struct {
}

func (m *RoguelikeMatch_RLStartBattleResponse) Reset()      { *m = RoguelikeMatch_RLStartBattleResponse{} }
func (*RoguelikeMatch_RLStartBattleResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLStartBattleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 28}
}
func (m *RoguelikeMatch_RLStartBattleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLStartBattleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLStartBattleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLStartBattleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLStartBattleResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLStartBattleResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLStartBattleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLStartBattleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLStartBattleResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLStartBattleResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLStartBattleResponse"
}

// 离线重连获取战斗信息
type RoguelikeMatch_RLReGetBattleRequest struct {
}

func (m *RoguelikeMatch_RLReGetBattleRequest) Reset()      { *m = RoguelikeMatch_RLReGetBattleRequest{} }
func (*RoguelikeMatch_RLReGetBattleRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLReGetBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 29}
}
func (m *RoguelikeMatch_RLReGetBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLReGetBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLReGetBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLReGetBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLReGetBattleRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLReGetBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLReGetBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLReGetBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLReGetBattleRequest proto.InternalMessageInfo

func (*RoguelikeMatch_RLReGetBattleRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLReGetBattleRequest"
}

type RoguelikeMatch_RLReGetBattleResponse struct {
	RoomId   int64                  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId int64                  `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId    int64                  `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RlRooms  []*models.RlBattleRoom `protobuf:"bytes,4,rep,name=rl_rooms,json=rlRooms,proto3" json:"rl_rooms,omitempty"`
	CurIdx   int64                  `protobuf:"varint,5,opt,name=cur_idx,json=curIdx,proto3" json:"cur_idx,omitempty"`
}

func (m *RoguelikeMatch_RLReGetBattleResponse) Reset()      { *m = RoguelikeMatch_RLReGetBattleResponse{} }
func (*RoguelikeMatch_RLReGetBattleResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLReGetBattleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 30}
}
func (m *RoguelikeMatch_RLReGetBattleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLReGetBattleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLReGetBattleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLReGetBattleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLReGetBattleResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLReGetBattleResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLReGetBattleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLReGetBattleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLReGetBattleResponse proto.InternalMessageInfo

func (m *RoguelikeMatch_RLReGetBattleResponse) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLReGetBattleResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *RoguelikeMatch_RLReGetBattleResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *RoguelikeMatch_RLReGetBattleResponse) GetRlRooms() []*models.RlBattleRoom {
	if m != nil {
		return m.RlRooms
	}
	return nil
}

func (m *RoguelikeMatch_RLReGetBattleResponse) GetCurIdx() int64 {
	if m != nil {
		return m.CurIdx
	}
	return 0
}

func (*RoguelikeMatch_RLReGetBattleResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLReGetBattleResponse"
}

// 准备
type RoguelikeMatch_RLReadyRequest struct {
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (m *RoguelikeMatch_RLReadyRequest) Reset()      { *m = RoguelikeMatch_RLReadyRequest{} }
func (*RoguelikeMatch_RLReadyRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLReadyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 31}
}
func (m *RoguelikeMatch_RLReadyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLReadyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLReadyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLReadyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLReadyRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLReadyRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLReadyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLReadyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLReadyRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLReadyRequest) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (*RoguelikeMatch_RLReadyRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLReadyRequest"
}

type RoguelikeMatch_RLReadyResponse struct {
}

func (m *RoguelikeMatch_RLReadyResponse) Reset()      { *m = RoguelikeMatch_RLReadyResponse{} }
func (*RoguelikeMatch_RLReadyResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLReadyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 32}
}
func (m *RoguelikeMatch_RLReadyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLReadyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLReadyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLReadyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLReadyResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLReadyResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLReadyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLReadyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLReadyResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLReadyResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLReadyResponse"
}

// 选择英雄
type RoguelikeMatch_RLChooseHeroRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	CardId   int64 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (m *RoguelikeMatch_RLChooseHeroRequest) Reset()      { *m = RoguelikeMatch_RLChooseHeroRequest{} }
func (*RoguelikeMatch_RLChooseHeroRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLChooseHeroRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 33}
}
func (m *RoguelikeMatch_RLChooseHeroRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLChooseHeroRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLChooseHeroRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLChooseHeroRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLChooseHeroRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLChooseHeroRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLChooseHeroRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLChooseHeroRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLChooseHeroRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLChooseHeroRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *RoguelikeMatch_RLChooseHeroRequest) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (*RoguelikeMatch_RLChooseHeroRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLChooseHeroRequest"
}

type RoguelikeMatch_RLChooseHeroResponse struct {
}

func (m *RoguelikeMatch_RLChooseHeroResponse) Reset()      { *m = RoguelikeMatch_RLChooseHeroResponse{} }
func (*RoguelikeMatch_RLChooseHeroResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLChooseHeroResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 34}
}
func (m *RoguelikeMatch_RLChooseHeroResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLChooseHeroResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLChooseHeroResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLChooseHeroResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLChooseHeroResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLChooseHeroResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLChooseHeroResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLChooseHeroResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLChooseHeroResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLChooseHeroResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLChooseHeroResponse"
}

// 踢人
type RoguelikeMatch_RLKickRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *RoguelikeMatch_RLKickRequest) Reset()      { *m = RoguelikeMatch_RLKickRequest{} }
func (*RoguelikeMatch_RLKickRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLKickRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 35}
}
func (m *RoguelikeMatch_RLKickRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLKickRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLKickRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLKickRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLKickRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLKickRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLKickRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLKickRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLKickRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLKickRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*RoguelikeMatch_RLKickRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLKickRequest"
}

type RoguelikeMatch_RLKickResponse struct {
}

func (m *RoguelikeMatch_RLKickResponse) Reset()      { *m = RoguelikeMatch_RLKickResponse{} }
func (*RoguelikeMatch_RLKickResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLKickResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 36}
}
func (m *RoguelikeMatch_RLKickResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLKickResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLKickResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLKickResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLKickResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLKickResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLKickResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLKickResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLKickResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLKickResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLKickResponse"
}

// 换队长
type RoguelikeMatch_RLChangeOwnerRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *RoguelikeMatch_RLChangeOwnerRequest) Reset()      { *m = RoguelikeMatch_RLChangeOwnerRequest{} }
func (*RoguelikeMatch_RLChangeOwnerRequest) ProtoMessage() {}
func (*RoguelikeMatch_RLChangeOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 37}
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLChangeOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLChangeOwnerRequest.Merge(m, src)
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLChangeOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLChangeOwnerRequest proto.InternalMessageInfo

func (m *RoguelikeMatch_RLChangeOwnerRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*RoguelikeMatch_RLChangeOwnerRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLChangeOwnerRequest"
}

type RoguelikeMatch_RLChangeOwnerResponse struct {
}

func (m *RoguelikeMatch_RLChangeOwnerResponse) Reset()      { *m = RoguelikeMatch_RLChangeOwnerResponse{} }
func (*RoguelikeMatch_RLChangeOwnerResponse) ProtoMessage() {}
func (*RoguelikeMatch_RLChangeOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 38}
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLChangeOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLChangeOwnerResponse.Merge(m, src)
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLChangeOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLChangeOwnerResponse proto.InternalMessageInfo

func (*RoguelikeMatch_RLChangeOwnerResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLChangeOwnerResponse"
}

type RoguelikeMatch_RLRoomChangePush struct {
	Room *models.RoguelikeRoom `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *RoguelikeMatch_RLRoomChangePush) Reset()      { *m = RoguelikeMatch_RLRoomChangePush{} }
func (*RoguelikeMatch_RLRoomChangePush) ProtoMessage() {}
func (*RoguelikeMatch_RLRoomChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 39}
}
func (m *RoguelikeMatch_RLRoomChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLRoomChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLRoomChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLRoomChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLRoomChangePush.Merge(m, src)
}
func (m *RoguelikeMatch_RLRoomChangePush) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLRoomChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLRoomChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLRoomChangePush proto.InternalMessageInfo

func (m *RoguelikeMatch_RLRoomChangePush) GetRoom() *models.RoguelikeRoom {
	if m != nil {
		return m.Room
	}
	return nil
}

func (*RoguelikeMatch_RLRoomChangePush) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLRoomChangePush"
}

type RoguelikeMatch_RLRoomClosePush struct {
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *RoguelikeMatch_RLRoomClosePush) Reset()      { *m = RoguelikeMatch_RLRoomClosePush{} }
func (*RoguelikeMatch_RLRoomClosePush) ProtoMessage() {}
func (*RoguelikeMatch_RLRoomClosePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 40}
}
func (m *RoguelikeMatch_RLRoomClosePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLRoomClosePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLRoomClosePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLRoomClosePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLRoomClosePush.Merge(m, src)
}
func (m *RoguelikeMatch_RLRoomClosePush) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLRoomClosePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLRoomClosePush.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLRoomClosePush proto.InternalMessageInfo

func (m *RoguelikeMatch_RLRoomClosePush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (*RoguelikeMatch_RLRoomClosePush) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLRoomClosePush"
}

type RoguelikeMatch_RLInvitePush struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RoomId      int64  `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoguelikeId int64  `protobuf:"varint,3,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
}

func (m *RoguelikeMatch_RLInvitePush) Reset()      { *m = RoguelikeMatch_RLInvitePush{} }
func (*RoguelikeMatch_RLInvitePush) ProtoMessage() {}
func (*RoguelikeMatch_RLInvitePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 41}
}
func (m *RoguelikeMatch_RLInvitePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLInvitePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLInvitePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLInvitePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLInvitePush.Merge(m, src)
}
func (m *RoguelikeMatch_RLInvitePush) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLInvitePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLInvitePush.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLInvitePush proto.InternalMessageInfo

func (m *RoguelikeMatch_RLInvitePush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoguelikeMatch_RLInvitePush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLInvitePush) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (*RoguelikeMatch_RLInvitePush) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLInvitePush"
}

type RoguelikeMatch_RLRoguelikeStartPush struct {
	RoomId   int64                  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId int64                  `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId    int64                  `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RlRooms  []*models.RlBattleRoom `protobuf:"bytes,4,rep,name=rl_rooms,json=rlRooms,proto3" json:"rl_rooms,omitempty"`
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) Reset()      { *m = RoguelikeMatch_RLRoguelikeStartPush{} }
func (*RoguelikeMatch_RLRoguelikeStartPush) ProtoMessage() {}
func (*RoguelikeMatch_RLRoguelikeStartPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 42}
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLRoguelikeStartPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLRoguelikeStartPush.Merge(m, src)
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLRoguelikeStartPush.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLRoguelikeStartPush proto.InternalMessageInfo

func (m *RoguelikeMatch_RLRoguelikeStartPush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) GetRlRooms() []*models.RlBattleRoom {
	if m != nil {
		return m.RlRooms
	}
	return nil
}

func (*RoguelikeMatch_RLRoguelikeStartPush) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLRoguelikeStartPush"
}

type RoguelikeMatch_RLRoguelikeFinishPush struct {
	RoomId    int64           `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId  int64           `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Rewards   map[int64]int64 `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HasReward bool            `protobuf:"varint,4,opt,name=has_reward,json=hasReward,proto3" json:"has_reward,omitempty"`
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) Reset()      { *m = RoguelikeMatch_RLRoguelikeFinishPush{} }
func (*RoguelikeMatch_RLRoguelikeFinishPush) ProtoMessage() {}
func (*RoguelikeMatch_RLRoguelikeFinishPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 43}
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLRoguelikeFinishPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLRoguelikeFinishPush.Merge(m, src)
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLRoguelikeFinishPush.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLRoguelikeFinishPush proto.InternalMessageInfo

func (m *RoguelikeMatch_RLRoguelikeFinishPush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) GetHasReward() bool {
	if m != nil {
		return m.HasReward
	}
	return false
}

func (*RoguelikeMatch_RLRoguelikeFinishPush) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLRoguelikeFinishPush"
}

type RoguelikeMatch_Reward struct {
	Rewards map[int64]int64 `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RoguelikeMatch_Reward) Reset()      { *m = RoguelikeMatch_Reward{} }
func (*RoguelikeMatch_Reward) ProtoMessage() {}
func (*RoguelikeMatch_Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 44}
}
func (m *RoguelikeMatch_Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_Reward.Merge(m, src)
}
func (m *RoguelikeMatch_Reward) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_Reward proto.InternalMessageInfo

func (m *RoguelikeMatch_Reward) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*RoguelikeMatch_Reward) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.Reward"
}

// 战斗结束回调
type RoguelikeMatch_RLBattleFinishEvent struct {
	RoomId      int64                             `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoguelikeId int64                             `protobuf:"varint,2,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
	RoleRewards map[string]*RoguelikeMatch_Reward `protobuf:"bytes,3,rep,name=role_rewards,json=roleRewards,proto3" json:"role_rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsSuc       bool                              `protobuf:"varint,4,opt,name=is_suc,json=isSuc,proto3" json:"is_suc,omitempty"`
	Duration    int64                             `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *RoguelikeMatch_RLBattleFinishEvent) Reset()      { *m = RoguelikeMatch_RLBattleFinishEvent{} }
func (*RoguelikeMatch_RLBattleFinishEvent) ProtoMessage() {}
func (*RoguelikeMatch_RLBattleFinishEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 45}
}
func (m *RoguelikeMatch_RLBattleFinishEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLBattleFinishEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLBattleFinishEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLBattleFinishEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLBattleFinishEvent.Merge(m, src)
}
func (m *RoguelikeMatch_RLBattleFinishEvent) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLBattleFinishEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLBattleFinishEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLBattleFinishEvent proto.InternalMessageInfo

func (m *RoguelikeMatch_RLBattleFinishEvent) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLBattleFinishEvent) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (m *RoguelikeMatch_RLBattleFinishEvent) GetRoleRewards() map[string]*RoguelikeMatch_Reward {
	if m != nil {
		return m.RoleRewards
	}
	return nil
}

func (m *RoguelikeMatch_RLBattleFinishEvent) GetIsSuc() bool {
	if m != nil {
		return m.IsSuc
	}
	return false
}

func (m *RoguelikeMatch_RLBattleFinishEvent) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (*RoguelikeMatch_RLBattleFinishEvent) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLBattleFinishEvent"
}

// 手动退出战斗
type RoguelikeMatch_RLBattleExitEvent struct {
	RoomId      int64           `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoguelikeId int64           `protobuf:"varint,2,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
	RoleId      string          `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Rewards     map[int64]int64 `protobuf:"bytes,4,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RoguelikeMatch_RLBattleExitEvent) Reset()      { *m = RoguelikeMatch_RLBattleExitEvent{} }
func (*RoguelikeMatch_RLBattleExitEvent) ProtoMessage() {}
func (*RoguelikeMatch_RLBattleExitEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 46}
}
func (m *RoguelikeMatch_RLBattleExitEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLBattleExitEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLBattleExitEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLBattleExitEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLBattleExitEvent.Merge(m, src)
}
func (m *RoguelikeMatch_RLBattleExitEvent) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLBattleExitEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLBattleExitEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLBattleExitEvent proto.InternalMessageInfo

func (m *RoguelikeMatch_RLBattleExitEvent) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeMatch_RLBattleExitEvent) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (m *RoguelikeMatch_RLBattleExitEvent) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoguelikeMatch_RLBattleExitEvent) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*RoguelikeMatch_RLBattleExitEvent) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLBattleExitEvent"
}

// 被踢push
type RoguelikeMatch_RLBeKickPush struct {
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *RoguelikeMatch_RLBeKickPush) Reset()      { *m = RoguelikeMatch_RLBeKickPush{} }
func (*RoguelikeMatch_RLBeKickPush) ProtoMessage() {}
func (*RoguelikeMatch_RLBeKickPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 47}
}
func (m *RoguelikeMatch_RLBeKickPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_RLBeKickPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_RLBeKickPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_RLBeKickPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_RLBeKickPush.Merge(m, src)
}
func (m *RoguelikeMatch_RLBeKickPush) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_RLBeKickPush) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_RLBeKickPush.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_RLBeKickPush proto.InternalMessageInfo

func (m *RoguelikeMatch_RLBeKickPush) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (*RoguelikeMatch_RLBeKickPush) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.RLBeKickPush"
}

// 作弊改变BOSS
type RoguelikeMatch_CheatChangeBossRequest struct {
}

func (m *RoguelikeMatch_CheatChangeBossRequest) Reset()      { *m = RoguelikeMatch_CheatChangeBossRequest{} }
func (*RoguelikeMatch_CheatChangeBossRequest) ProtoMessage() {}
func (*RoguelikeMatch_CheatChangeBossRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 48}
}
func (m *RoguelikeMatch_CheatChangeBossRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_CheatChangeBossRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_CheatChangeBossRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_CheatChangeBossRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_CheatChangeBossRequest.Merge(m, src)
}
func (m *RoguelikeMatch_CheatChangeBossRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_CheatChangeBossRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_CheatChangeBossRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_CheatChangeBossRequest proto.InternalMessageInfo

func (*RoguelikeMatch_CheatChangeBossRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.CheatChangeBossRequest"
}

type RoguelikeMatch_CheatChangeBossResponse struct {
}

func (m *RoguelikeMatch_CheatChangeBossResponse) Reset() {
	*m = RoguelikeMatch_CheatChangeBossResponse{}
}
func (*RoguelikeMatch_CheatChangeBossResponse) ProtoMessage() {}
func (*RoguelikeMatch_CheatChangeBossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 49}
}
func (m *RoguelikeMatch_CheatChangeBossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_CheatChangeBossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_CheatChangeBossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_CheatChangeBossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_CheatChangeBossResponse.Merge(m, src)
}
func (m *RoguelikeMatch_CheatChangeBossResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_CheatChangeBossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_CheatChangeBossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_CheatChangeBossResponse proto.InternalMessageInfo

func (*RoguelikeMatch_CheatChangeBossResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.CheatChangeBossResponse"
}

// 作弊清除今日数量
type RoguelikeMatch_CheatClearTodayCntRequest struct {
}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) Reset() {
	*m = RoguelikeMatch_CheatClearTodayCntRequest{}
}
func (*RoguelikeMatch_CheatClearTodayCntRequest) ProtoMessage() {}
func (*RoguelikeMatch_CheatClearTodayCntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 50}
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntRequest.Merge(m, src)
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntRequest proto.InternalMessageInfo

func (*RoguelikeMatch_CheatClearTodayCntRequest) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.CheatClearTodayCntRequest"
}

type RoguelikeMatch_CheatClearTodayCntResponse struct {
}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) Reset() {
	*m = RoguelikeMatch_CheatClearTodayCntResponse{}
}
func (*RoguelikeMatch_CheatClearTodayCntResponse) ProtoMessage() {}
func (*RoguelikeMatch_CheatClearTodayCntResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299bf41c0698d5c2, []int{0, 51}
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntResponse.Merge(m, src)
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeMatch_CheatClearTodayCntResponse proto.InternalMessageInfo

func (*RoguelikeMatch_CheatClearTodayCntResponse) XXX_MessageName() string {
	return "roguelike_match.RoguelikeMatch.CheatClearTodayCntResponse"
}
func init() {
	proto.RegisterEnum("roguelike_match.RoguelikeMatchErrorCode", RoguelikeMatchErrorCode_name, RoguelikeMatchErrorCode_value)
	proto.RegisterType((*RoguelikeMatch)(nil), "roguelike_match.RoguelikeMatch")
	proto.RegisterType((*RoguelikeMatch_RLMatchOfflineRequest)(nil), "roguelike_match.RoguelikeMatch.RLMatchOfflineRequest")
	proto.RegisterType((*RoguelikeMatch_RLMatchOfflineResponse)(nil), "roguelike_match.RoguelikeMatch.RLMatchOfflineResponse")
	proto.RegisterType((*RoguelikeMatch_RLGetTodayBossRequest)(nil), "roguelike_match.RoguelikeMatch.RLGetTodayBossRequest")
	proto.RegisterType((*RoguelikeMatch_RLGetTodayBossResponse)(nil), "roguelike_match.RoguelikeMatch.RLGetTodayBossResponse")
	proto.RegisterMapType((map[int64]*models.BossSkillList)(nil), "roguelike_match.RoguelikeMatch.RLGetTodayBossResponse.BossSkillEntry")
	proto.RegisterMapType((map[int64]*models.BossSkillList)(nil), "roguelike_match.RoguelikeMatch.RLGetTodayBossResponse.MonsterSkillEntry")
	proto.RegisterType((*RoguelikeMatch_RLCreateRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLCreateRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLCreateRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLCreateRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLChangeCombatNeedRequest)(nil), "roguelike_match.RoguelikeMatch.RLChangeCombatNeedRequest")
	proto.RegisterType((*RoguelikeMatch_RLChangeCombatNeedResponse)(nil), "roguelike_match.RoguelikeMatch.RLChangeCombatNeedResponse")
	proto.RegisterType((*RoguelikeMatch_RLGetCurrRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLGetCurrRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLGetCurrRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLGetCurrRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLJoinRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLJoinRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLJoinRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLJoinRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLLeaveRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLLeaveRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLLeaveRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLLeaveRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLGetRoleRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLGetRoleRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLGetRoleRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLGetRoleRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLDismissRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLDismissRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLDismissRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLDismissRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLDismissEvent)(nil), "roguelike_match.RoguelikeMatch.RLDismissEvent")
	proto.RegisterType((*RoguelikeMatch_RLPubRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLPubRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLPubRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLPubRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLGetRandomRoomRequest)(nil), "roguelike_match.RoguelikeMatch.RLGetRandomRoomRequest")
	proto.RegisterType((*RoguelikeMatch_RLGetRandomRoomResponse)(nil), "roguelike_match.RoguelikeMatch.RLGetRandomRoomResponse")
	proto.RegisterType((*RoguelikeMatch_RLInviteRequest)(nil), "roguelike_match.RoguelikeMatch.RLInviteRequest")
	proto.RegisterType((*RoguelikeMatch_RLInviteResponse)(nil), "roguelike_match.RoguelikeMatch.RLInviteResponse")
	proto.RegisterType((*RoguelikeMatch_RLPubRoomToChatRequest)(nil), "roguelike_match.RoguelikeMatch.RLPubRoomToChatRequest")
	proto.RegisterType((*RoguelikeMatch_RLPubRoomToChatResponse)(nil), "roguelike_match.RoguelikeMatch.RLPubRoomToChatResponse")
	proto.RegisterType((*RoguelikeMatch_RLStartBattleRequest)(nil), "roguelike_match.RoguelikeMatch.RLStartBattleRequest")
	proto.RegisterType((*RoguelikeMatch_RLStartBattleResponse)(nil), "roguelike_match.RoguelikeMatch.RLStartBattleResponse")
	proto.RegisterType((*RoguelikeMatch_RLReGetBattleRequest)(nil), "roguelike_match.RoguelikeMatch.RLReGetBattleRequest")
	proto.RegisterType((*RoguelikeMatch_RLReGetBattleResponse)(nil), "roguelike_match.RoguelikeMatch.RLReGetBattleResponse")
	proto.RegisterType((*RoguelikeMatch_RLReadyRequest)(nil), "roguelike_match.RoguelikeMatch.RLReadyRequest")
	proto.RegisterType((*RoguelikeMatch_RLReadyResponse)(nil), "roguelike_match.RoguelikeMatch.RLReadyResponse")
	proto.RegisterType((*RoguelikeMatch_RLChooseHeroRequest)(nil), "roguelike_match.RoguelikeMatch.RLChooseHeroRequest")
	proto.RegisterType((*RoguelikeMatch_RLChooseHeroResponse)(nil), "roguelike_match.RoguelikeMatch.RLChooseHeroResponse")
	proto.RegisterType((*RoguelikeMatch_RLKickRequest)(nil), "roguelike_match.RoguelikeMatch.RLKickRequest")
	proto.RegisterType((*RoguelikeMatch_RLKickResponse)(nil), "roguelike_match.RoguelikeMatch.RLKickResponse")
	proto.RegisterType((*RoguelikeMatch_RLChangeOwnerRequest)(nil), "roguelike_match.RoguelikeMatch.RLChangeOwnerRequest")
	proto.RegisterType((*RoguelikeMatch_RLChangeOwnerResponse)(nil), "roguelike_match.RoguelikeMatch.RLChangeOwnerResponse")
	proto.RegisterType((*RoguelikeMatch_RLRoomChangePush)(nil), "roguelike_match.RoguelikeMatch.RLRoomChangePush")
	proto.RegisterType((*RoguelikeMatch_RLRoomClosePush)(nil), "roguelike_match.RoguelikeMatch.RLRoomClosePush")
	proto.RegisterType((*RoguelikeMatch_RLInvitePush)(nil), "roguelike_match.RoguelikeMatch.RLInvitePush")
	proto.RegisterType((*RoguelikeMatch_RLRoguelikeStartPush)(nil), "roguelike_match.RoguelikeMatch.RLRoguelikeStartPush")
	proto.RegisterType((*RoguelikeMatch_RLRoguelikeFinishPush)(nil), "roguelike_match.RoguelikeMatch.RLRoguelikeFinishPush")
	proto.RegisterMapType((map[int64]int64)(nil), "roguelike_match.RoguelikeMatch.RLRoguelikeFinishPush.RewardsEntry")
	proto.RegisterType((*RoguelikeMatch_Reward)(nil), "roguelike_match.RoguelikeMatch.Reward")
	proto.RegisterMapType((map[int64]int64)(nil), "roguelike_match.RoguelikeMatch.Reward.RewardsEntry")
	proto.RegisterType((*RoguelikeMatch_RLBattleFinishEvent)(nil), "roguelike_match.RoguelikeMatch.RLBattleFinishEvent")
	proto.RegisterMapType((map[string]*RoguelikeMatch_Reward)(nil), "roguelike_match.RoguelikeMatch.RLBattleFinishEvent.RoleRewardsEntry")
	proto.RegisterType((*RoguelikeMatch_RLBattleExitEvent)(nil), "roguelike_match.RoguelikeMatch.RLBattleExitEvent")
	proto.RegisterMapType((map[int64]int64)(nil), "roguelike_match.RoguelikeMatch.RLBattleExitEvent.RewardsEntry")
	proto.RegisterType((*RoguelikeMatch_RLBeKickPush)(nil), "roguelike_match.RoguelikeMatch.RLBeKickPush")
	proto.RegisterType((*RoguelikeMatch_CheatChangeBossRequest)(nil), "roguelike_match.RoguelikeMatch.CheatChangeBossRequest")
	proto.RegisterType((*RoguelikeMatch_CheatChangeBossResponse)(nil), "roguelike_match.RoguelikeMatch.CheatChangeBossResponse")
	proto.RegisterType((*RoguelikeMatch_CheatClearTodayCntRequest)(nil), "roguelike_match.RoguelikeMatch.CheatClearTodayCntRequest")
	proto.RegisterType((*RoguelikeMatch_CheatClearTodayCntResponse)(nil), "roguelike_match.RoguelikeMatch.CheatClearTodayCntResponse")
}

func init() {
	proto.RegisterFile("proto/roguelike-match-server/match.proto", fileDescriptor_299bf41c0698d5c2)
}

var fileDescriptor_299bf41c0698d5c2 = []byte{
	// 2011 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x6c, 0x1c, 0x47,
	0x19, 0xf7, 0xfa, 0x62, 0xe7, 0x6e, 0xec, 0x38, 0xeb, 0x89, 0x1d, 0xaf, 0xd7, 0xcd, 0xe1, 0x22,
	0x28, 0xa6, 0xa1, 0x67, 0x48, 0x00, 0xd1, 0xaa, 0x05, 0xc5, 0x17, 0x27, 0xbd, 0xf6, 0x62, 0x5b,
	0x9b, 0xa8, 0x02, 0x84, 0x74, 0x5a, 0xdf, 0x8e, 0x7d, 0x4b, 0xf6, 0x76, 0xcc, 0xce, 0x9e, 0x6b,
	0xbf, 0x59, 0xa4, 0xa4, 0xc9, 0xa5, 0x26, 0xad, 0x48, 0x89, 0x4b, 0x2d, 0xb5, 0x41, 0xa9, 0x70,
	0x42, 0x5b, 0x43, 0xc0, 0x89, 0xe5, 0xd4, 0xe4, 0xb5, 0xe2, 0xa9, 0x2f, 0x48, 0x7d, 0x04, 0xe7,
	0x76, 0x63, 0x8b, 0x17, 0x24, 0xde, 0x11, 0x9a, 0x3f, 0xbb, 0xb7, 0x77, 0xe7, 0xc4, 0x4d, 0x53,
	0x78, 0xb2, 0x67, 0xe6, 0xfb, 0x7d, 0x7f, 0x7e, 0xdf, 0x37, 0xdf, 0x7c, 0xb7, 0x60, 0x60, 0xca,
	0xc1, 0x2e, 0x1e, 0x74, 0xf0, 0x64, 0x09, 0x59, 0xe6, 0x69, 0xf4, 0x54, 0x51, 0x77, 0xf3, 0x85,
	0xa7, 0x08, 0x72, 0xa6, 0x91, 0x33, 0xc8, 0x16, 0x29, 0x26, 0x02, 0xf7, 0x86, 0x32, 0x39, 0xb6,
	0xad, 0xf6, 0x70, 0x68, 0x11, 0x1b, 0xc8, 0x22, 0x83, 0xe3, 0x3a, 0x41, 0x5c, 0x52, 0x7d, 0xac,
	0xe6, 0x20, 0x84, 0x89, 0xd3, 0xde, 0x3a, 0x98, 0xeb, 0x5a, 0xe2, 0xe8, 0xcb, 0x7f, 0x4d, 0x82,
	0x0e, 0x2d, 0x10, 0x3f, 0xc1, 0x8c, 0x7c, 0x17, 0x74, 0x6b, 0x59, 0xf6, 0xef, 0xe8, 0xc4, 0x84,
	0x65, 0xda, 0x48, 0x43, 0x3f, 0x2b, 0x21, 0xe2, 0xc2, 0x03, 0x00, 0xe4, 0xb1, 0x3d, 0x61, 0x4e,
	0xe6, 0x4c, 0x83, 0x28, 0x52, 0x7f, 0x6c, 0x20, 0xa6, 0x25, 0xf8, 0x4e, 0xc6, 0x20, 0xaa, 0x02,
	0xf6, 0xd7, 0xe3, 0xc8, 0x14, 0xb6, 0x09, 0x52, 0x7b, 0xa8, 0xc6, 0xe3, 0xc8, 0x3d, 0x85, 0x0d,
	0x7d, 0x76, 0x08, 0x13, 0x22, 0x34, 0xaa, 0xff, 0x8e, 0x51, 0x4c, 0xed, 0x09, 0xc7, 0xc0, 0x2f,
	0x81, 0x36, 0xa3, 0x64, 0x4f, 0x22, 0x6c, 0xe7, 0x0c, 0x7d, 0x56, 0x91, 0xfa, 0xa5, 0x81, 0x98,
	0x06, 0xc4, 0xd6, 0x51, 0x7d, 0x16, 0x1a, 0x00, 0x8c, 0x63, 0x42, 0x72, 0xe4, 0xb4, 0x69, 0x59,
	0x4a, 0x73, 0x7f, 0x6c, 0xa0, 0xed, 0xd0, 0x70, 0xaa, 0x8e, 0xb1, 0x54, 0x6d, 0x6c, 0xa9, 0xed,
	0x8d, 0xa5, 0xe8, 0xe2, 0x24, 0xd5, 0x33, 0x6c, 0xbb, 0xce, 0xac, 0x96, 0x18, 0x0f, 0xd6, 0xb0,
	0x08, 0xf6, 0x14, 0xb1, 0x4d, 0x5c, 0xe4, 0x08, 0x43, 0x31, 0x66, 0xe8, 0xf9, 0xcf, 0x69, 0xe8,
	0x04, 0xd7, 0x15, 0xb1, 0xd5, 0x5e, 0x8c, 0x6c, 0xc1, 0x5e, 0x10, 0xff, 0x29, 0x36, 0xed, 0x5c,
	0xde, 0x76, 0x95, 0x5d, 0x2c, 0xe4, 0xdd, 0x74, 0x9d, 0xb6, 0x5d, 0xd8, 0x07, 0x12, 0x68, 0xc6,
	0x75, 0x74, 0x76, 0xd6, 0xc2, 0xce, 0xe2, 0x6c, 0x23, 0x6d, 0xbb, 0xea, 0x49, 0xd0, 0x51, 0x1b,
	0x03, 0x94, 0x41, 0xec, 0x34, 0x0a, 0x78, 0xa3, 0xff, 0xc2, 0x83, 0xa0, 0x65, 0x5a, 0xb7, 0x4a,
	0x48, 0x69, 0xee, 0x97, 0x06, 0xda, 0x0e, 0x75, 0xa7, 0x78, 0x3d, 0x54, 0x83, 0xcf, 0x9a, 0xc4,
	0xd5, 0xb8, 0xcc, 0x33, 0xcd, 0xdf, 0x93, 0xd4, 0x97, 0x40, 0x67, 0x83, 0xbf, 0x5f, 0x84, 0xde,
	0x1f, 0x81, 0x7d, 0x5a, 0x36, 0xed, 0x20, 0xdd, 0x45, 0x1a, 0xc6, 0xc5, 0xa0, 0xbc, 0x1e, 0x07,
	0xed, 0x55, 0x52, 0x4d, 0x43, 0x98, 0x68, 0x0b, 0xf7, 0x32, 0x06, 0x2d, 0x8a, 0x3c, 0x2e, 0x8e,
	0xeb, 0x6e, 0xce, 0x46, 0xc8, 0x60, 0x06, 0x63, 0x1a, 0xe0, 0x5b, 0x23, 0x08, 0x19, 0xea, 0x11,
	0xd0, 0x55, 0xab, 0x5a, 0x54, 0xd3, 0xd7, 0xc1, 0x2e, 0x07, 0xe3, 0x22, 0xd3, 0x19, 0x71, 0x31,
	0x4c, 0x1a, 0x13, 0x66, 0x22, 0xea, 0xb3, 0xa0, 0x57, 0xcb, 0xa6, 0x0b, 0xba, 0x3d, 0x89, 0xd2,
	0xa1, 0xe2, 0xc0, 0xc7, 0x3a, 0x07, 0xa4, 0x06, 0x07, 0x8e, 0x03, 0x75, 0x3b, 0xf4, 0xc3, 0xbb,
	0xb1, 0x9f, 0x46, 0x72, 0x1c, 0xb9, 0xe9, 0x92, 0xe3, 0x44, 0x58, 0x52, 0x87, 0xc4, 0x5d, 0xaa,
	0xee, 0x3f, 0xbc, 0xee, 0x79, 0x09, 0x74, 0x6a, 0xd9, 0x17, 0xb0, 0x69, 0x47, 0xf9, 0xef, 0x01,
	0xbb, 0xe9, 0x69, 0x95, 0xfa, 0x56, 0xba, 0xcc, 0x18, 0x0d, 0x89, 0x69, 0x6e, 0x4c, 0xcc, 0x01,
	0x00, 0x4a, 0x04, 0x39, 0xb9, 0x09, 0x73, 0xb2, 0xe0, 0x2a, 0x31, 0x26, 0x90, 0xa0, 0x3b, 0xc7,
	0xe8, 0x06, 0x3d, 0x36, 0x49, 0x6e, 0xca, 0x31, 0xa7, 0x75, 0x17, 0xb1, 0xc2, 0x8e, 0x6b, 0x09,
	0x93, 0x8c, 0xf1, 0x0d, 0xf5, 0x07, 0x00, 0x46, 0xdd, 0x79, 0xf8, 0x80, 0xc6, 0xa8, 0x82, 0x2c,
	0xd2, 0xa7, 0xd1, 0x17, 0x14, 0x90, 0xda, 0x4d, 0x6b, 0x34, 0xa2, 0x51, 0x74, 0xb2, 0x41, 0x91,
	0x15, 0x0d, 0x5b, 0x8d, 0xa6, 0xac, 0xb0, 0x6c, 0x13, 0xd4, 0x94, 0x45, 0xf5, 0x04, 0xe9, 0xaa,
	0x02, 0x3e, 0x67, 0x29, 0x1c, 0x35, 0x49, 0xd1, 0x24, 0x24, 0x5a, 0x0a, 0xac, 0xad, 0xd6, 0xec,
	0x0b, 0x2f, 0x65, 0xd0, 0x11, 0x1e, 0x0c, 0x4f, 0x23, 0xdb, 0x55, 0x0f, 0x02, 0x59, 0xcb, 0x8e,
	0x95, 0xc6, 0xeb, 0x7c, 0x36, 0x49, 0x0e, 0x4f, 0x21, 0x9b, 0x39, 0x11, 0xd7, 0x5a, 0x4d, 0x32,
	0x3a, 0x85, 0x6c, 0x75, 0x1f, 0xad, 0x8e, 0x50, 0x58, 0xe8, 0x3c, 0x21, 0x3a, 0xb5, 0xa6, 0xdb,
	0x06, 0x2e, 0x3e, 0xf8, 0xde, 0xc6, 0xea, 0xcb, 0x43, 0x06, 0x31, 0xbb, 0x54, 0x14, 0x3c, 0xd3,
	0x7f, 0xd5, 0x63, 0xa0, 0xa7, 0x41, 0x9d, 0x60, 0xe6, 0x20, 0x68, 0xa1, 0x61, 0xf3, 0x17, 0xe6,
	0xbe, 0xd4, 0x70, 0x19, 0xf5, 0x49, 0xb0, 0x57, 0xcb, 0x66, 0xec, 0x69, 0xd3, 0x45, 0x3b, 0xe6,
	0x02, 0x52, 0x12, 0x02, 0x59, 0x11, 0x16, 0x7b, 0xb4, 0x44, 0xac, 0xa7, 0x70, 0xba, 0xa0, 0xbb,
	0x01, 0xbb, 0xbd, 0xd4, 0xc3, 0xba, 0x13, 0x01, 0x62, 0x09, 0x39, 0xe9, 0xea, 0x8e, 0x3b, 0xc4,
	0xde, 0xd2, 0x9a, 0x84, 0xd4, 0xec, 0x47, 0x01, 0x1a, 0x3a, 0x8e, 0xea, 0x00, 0x1f, 0x4a, 0x14,
	0x51, 0x73, 0x20, 0x48, 0xb8, 0x6f, 0xed, 0xf6, 0x81, 0x04, 0x7f, 0xc0, 0xab, 0x85, 0x1b, 0xe7,
	0x1b, 0x19, 0x03, 0x76, 0x83, 0xd6, 0xa2, 0x3e, 0x45, 0x4f, 0xf8, 0x15, 0x6c, 0x29, 0xea, 0x53,
	0x19, 0x03, 0x0e, 0x82, 0xb8, 0x63, 0xe5, 0x38, 0xa9, 0xbb, 0x18, 0xa9, 0x5d, 0x21, 0xa9, 0x96,
	0x30, 0x4c, 0x39, 0xdd, 0xed, 0x58, 0xf4, 0x2f, 0xa1, 0xd6, 0xf3, 0x25, 0x27, 0x67, 0x1a, 0x33,
	0xe2, 0xa5, 0x69, 0xcd, 0x97, 0x9c, 0x8c, 0x31, 0xa3, 0x3e, 0x41, 0x2b, 0x4b, 0x43, 0xba, 0x31,
	0x1b, 0xb0, 0xdd, 0x05, 0x5a, 0x1c, 0xba, 0x16, 0x35, 0xc4, 0x17, 0x6a, 0x27, 0x4d, 0x8b, 0x90,
	0x13, 0x1c, 0xbc, 0xc8, 0xba, 0x7e, 0x01, 0x63, 0x82, 0x9e, 0x47, 0x0e, 0x0e, 0xf0, 0x7d, 0x20,
	0x11, 0x0e, 0x15, 0x22, 0xd4, 0x78, 0x30, 0x53, 0x30, 0x3f, 0x74, 0xc7, 0xa8, 0x86, 0xda, 0x4a,
	0x97, 0x19, 0x83, 0x13, 0x1a, 0x55, 0x26, 0x8c, 0x0c, 0x80, 0x3d, 0x5a, 0xf6, 0x45, 0x33, 0x7f,
	0x7a, 0xc7, 0x62, 0x60, 0x77, 0x84, 0x4b, 0x46, 0xef, 0x36, 0x6f, 0xdd, 0xa3, 0x2f, 0xdb, 0xc8,
	0xd9, 0x51, 0x05, 0x4b, 0x77, 0x0d, 0x40, 0x68, 0x7a, 0x8e, 0x16, 0x1a, 0x65, 0x92, 0x1f, 0x8e,
	0x95, 0x48, 0xe1, 0x61, 0xee, 0x3b, 0xab, 0x69, 0x06, 0xb7, 0x30, 0xe1, 0xe8, 0xfb, 0x95, 0x83,
	0x9a, 0x07, 0xed, 0x41, 0x4d, 0x57, 0x05, 0xb7, 0x71, 0x36, 0xaa, 0xa1, 0xf9, 0x81, 0xcd, 0x30,
	0xd6, 0xd8, 0x0c, 0x2f, 0x49, 0xac, 0x7e, 0x83, 0x1d, 0x56, 0xe1, 0x0f, 0x74, 0xeb, 0xff, 0x52,
	0xa5, 0xea, 0xd9, 0x66, 0x76, 0x7b, 0x02, 0xb7, 0x8e, 0x99, 0xb6, 0x49, 0x0a, 0x8f, 0xe0, 0xd7,
	0x4f, 0xc0, 0x6e, 0x07, 0xbd, 0xac, 0x3b, 0x06, 0x11, 0x53, 0xde, 0xd0, 0xce, 0x53, 0xde, 0x36,
	0xd6, 0x53, 0x1a, 0x57, 0xc2, 0xe7, 0xbb, 0x40, 0x25, 0x7d, 0x03, 0x0b, 0x3a, 0xc9, 0xf1, 0x65,
	0xf0, 0x06, 0x16, 0x74, 0xc2, 0xa5, 0xd5, 0x67, 0x40, 0x7b, 0x14, 0xb7, 0xcd, 0x9c, 0xd5, 0x15,
	0x9d, 0xb3, 0x62, 0xd1, 0x81, 0xea, 0x57, 0x12, 0x68, 0xe5, 0x60, 0x78, 0xa2, 0x1a, 0x03, 0x6f,
	0x9f, 0x87, 0x77, 0x8c, 0x81, 0x89, 0x6f, 0xef, 0xf4, 0x23, 0x79, 0xf5, 0xb7, 0x66, 0x7a, 0xe3,
	0x79, 0xe2, 0x38, 0x3b, 0xec, 0x2d, 0x7a, 0xa4, 0x39, 0x63, 0x92, 0x8a, 0x58, 0x28, 0x57, 0x9b,
	0xa7, 0xa3, 0x3b, 0xe7, 0xa9, 0xc1, 0x8d, 0x14, 0x7b, 0x91, 0xa3, 0x41, 0xb7, 0x39, 0xd5, 0x1d,
	0x5a, 0xa3, 0x26, 0xc9, 0x91, 0x52, 0x5e, 0x64, 0xaa, 0xc5, 0x24, 0x27, 0x4b, 0x79, 0xa8, 0x82,
	0xb8, 0x51, 0x72, 0x74, 0xd7, 0xc4, 0x76, 0x30, 0x83, 0x07, 0x6b, 0x75, 0x02, 0xc8, 0xf5, 0x3a,
	0xa3, 0x7c, 0x25, 0x38, 0x5f, 0xcf, 0xd6, 0x4e, 0xcb, 0x4f, 0x7c, 0xb6, 0xf4, 0x44, 0x79, 0xfd,
	0x0f, 0x9b, 0xde, 0x78, 0x40, 0xc3, 0x33, 0xa6, 0xfb, 0xe8, 0xac, 0x46, 0x9a, 0x46, 0xac, 0xa6,
	0x69, 0xfc, 0xb0, 0x5a, 0x4d, 0xfc, 0x46, 0x7e, 0xff, 0xb3, 0x32, 0x1d, 0x3a, 0xf6, 0x3f, 0x28,
	0xac, 0xaf, 0xd1, 0x9e, 0x37, 0x84, 0x68, 0xf3, 0x7e, 0x70, 0x73, 0x54, 0xc0, 0xfe, 0x74, 0x01,
	0xe9, 0x2e, 0x6f, 0xc3, 0xd1, 0x1f, 0x9e, 0xbd, 0xa0, 0xa7, 0xe1, 0x44, 0x34, 0xef, 0x3e, 0xd0,
	0xcb, 0x8f, 0x2c, 0xa4, 0x3b, 0xec, 0x17, 0x5c, 0xda, 0x0e, 0x87, 0x82, 0xc7, 0x80, 0xba, 0xdd,
	0x21, 0x87, 0x3e, 0xf9, 0xcf, 0x38, 0xe8, 0xa9, 0xe5, 0x63, 0xd8, 0x71, 0xb0, 0x93, 0xc6, 0x06,
	0x82, 0xdf, 0x00, 0x9d, 0xc3, 0x8e, 0xc3, 0xfb, 0xfa, 0x08, 0x76, 0x87, 0x67, 0x4c, 0xe2, 0xca,
	0x4d, 0x6a, 0x77, 0x79, 0x45, 0xe9, 0x84, 0x7b, 0xfd, 0x73, 0x77, 0xb6, 0x2e, 0xff, 0xb9, 0xb2,
	0x3a, 0xef, 0x7d, 0xb0, 0xe0, 0x2d, 0x2e, 0xc1, 0xaf, 0x82, 0x3d, 0xa1, 0xf4, 0xb1, 0x92, 0x65,
	0xc9, 0x92, 0x0a, 0xcb, 0x2b, 0x4a, 0x07, 0x6c, 0xe7, 0x92, 0xde, 0xad, 0x1b, 0xfe, 0xed, 0x2b,
	0x70, 0x40, 0x88, 0x8d, 0x60, 0x97, 0xbd, 0x40, 0x72, 0x73, 0xa0, 0xb0, 0xb2, 0xfe, 0x6e, 0x65,
	0x75, 0xde, 0x5f, 0x58, 0xf6, 0xcf, 0xdd, 0xa9, 0xac, 0xde, 0x86, 0x07, 0x01, 0x08, 0x24, 0x33,
	0xb6, 0x1c, 0x53, 0xfb, 0xca, 0x2b, 0x4a, 0x0f, 0xec, 0xe6, 0x62, 0xde, 0xe2, 0xd2, 0xe6, 0x9d,
	0xb7, 0x2a, 0xab, 0xd7, 0xb9, 0x72, 0x78, 0x04, 0xf4, 0x30, 0xe1, 0x51, 0xdb, 0x9a, 0x4d, 0xeb,
	0x36, 0x9d, 0xcc, 0x47, 0x6d, 0xd6, 0x7c, 0xe5, 0x5d, 0xea, 0x57, 0xca, 0x2b, 0x4a, 0x3f, 0x4c,
	0x7a, 0xaf, 0xbf, 0xe6, 0x5f, 0xbe, 0xe9, 0x5d, 0xbc, 0xbe, 0x79, 0x66, 0xdd, 0x2b, 0xbf, 0xeb,
	0xfd, 0xe2, 0xbd, 0xca, 0xea, 0x5c, 0x55, 0xc5, 0xd3, 0xa0, 0x9b, 0xa9, 0x38, 0xa5, 0x3b, 0xcc,
	0xe4, 0xa9, 0x82, 0xc9, 0x66, 0x54, 0xb9, 0x45, 0x4d, 0x96, 0x57, 0x14, 0x15, 0x2a, 0x9b, 0xcb,
	0xef, 0xdd, 0xfb, 0xe5, 0x35, 0xef, 0xc3, 0x9b, 0xdc, 0x01, 0xff, 0x83, 0xab, 0x02, 0x3a, 0x08,
	0xba, 0x28, 0x34, 0xe0, 0x31, 0x24, 0xab, 0x35, 0x88, 0xcd, 0x3b, 0xbf, 0xec, 0x2f, 0xbe, 0x5f,
	0x25, 0xeb, 0xdb, 0x40, 0x66, 0xb6, 0x86, 0x10, 0xb2, 0xf9, 0x53, 0x68, 0xc8, 0xbb, 0xa3, 0x66,
	0x2e, 0x2d, 0xf9, 0xe7, 0x6e, 0x79, 0xb7, 0x6e, 0xdc, 0xbb, 0x7d, 0x71, 0xf3, 0xb7, 0xbf, 0xdf,
	0xfa, 0xf9, 0xdc, 0xe6, 0xf2, 0x2d, 0xf8, 0x1c, 0xd8, 0x1f, 0x06, 0xc9, 0xc8, 0x4b, 0xeb, 0x36,
	0x7b, 0xd9, 0xe4, 0xb8, 0xfa, 0x78, 0x79, 0x45, 0x39, 0x00, 0xfb, 0xbc, 0x8b, 0xd7, 0xfd, 0xc5,
	0xf3, 0x9c, 0x41, 0x1a, 0xe6, 0x47, 0x73, 0xde, 0xef, 0x2e, 0xf8, 0xe7, 0x16, 0xfc, 0x5f, 0x5f,
	0xae, 0xe1, 0x28, 0x80, 0x73, 0xe3, 0x72, 0x22, 0xe0, 0x28, 0x8c, 0xa9, 0x4e, 0x91, 0xf0, 0xe0,
	0x50, 0x43, 0xa0, 0xdc, 0x3e, 0x50, 0x95, 0xf2, 0x8a, 0xd2, 0x05, 0x21, 0x0f, 0xd4, 0xbf, 0x71,
	0xc5, 0x5f, 0x3c, 0xcf, 0x8d, 0xc3, 0xa7, 0x81, 0x12, 0xc5, 0x1c, 0xb1, 0xd8, 0xbc, 0xc5, 0x71,
	0x6d, 0x41, 0x56, 0x39, 0x8e, 0x07, 0xcc, 0x71, 0x95, 0xb5, 0xb3, 0xf0, 0x9b, 0x00, 0x06, 0x25,
	0x50, 0x9d, 0x9c, 0xe4, 0xf6, 0xc0, 0x18, 0x37, 0xb3, 0x35, 0x77, 0xde, 0xbf, 0x70, 0x6d, 0xf3,
	0xc2, 0x1f, 0xb7, 0xde, 0x7e, 0x05, 0x7e, 0x4b, 0x10, 0x3b, 0x82, 0xdd, 0x23, 0x96, 0xc5, 0xc6,
	0x39, 0x79, 0x4f, 0x60, 0x64, 0x6b, 0xe1, 0x1d, 0xef, 0x8d, 0x05, 0x81, 0x3a, 0xb3, 0xee, 0xbd,
	0x7a, 0xd6, 0xbb, 0xfa, 0x2a, 0x3c, 0x2c, 0xf2, 0x4e, 0xb3, 0x66, 0xe3, 0xd2, 0x64, 0xe1, 0x05,
	0xfe, 0xf9, 0x42, 0xee, 0x08, 0xed, 0xbc, 0xf6, 0x06, 0xa5, 0xf0, 0xfd, 0x2b, 0xfe, 0x9b, 0x7f,
	0xa8, 0xac, 0xce, 0x6f, 0xde, 0xfc, 0x53, 0xd4, 0x33, 0x0e, 0x1a, 0xa3, 0xe1, 0xec, 0x0d, 0x11,
	0x8c, 0xc3, 0x7b, 0xd7, 0xd6, 0x2a, 0xeb, 0xf3, 0x02, 0x31, 0x28, 0x6e, 0x93, 0x88, 0x9f, 0x17,
	0xbf, 0x1c, 0xf2, 0xc6, 0x22, 0xf7, 0x17, 0x96, 0xb7, 0x16, 0xde, 0xd9, 0x7a, 0xf3, 0x0e, 0x0d,
	0x3e, 0xa8, 0x47, 0x0d, 0x8f, 0x63, 0x37, 0xad, 0xdb, 0xee, 0x10, 0x9f, 0xd9, 0xe4, 0xce, 0xa0,
	0x50, 0xfc, 0xc5, 0x35, 0xef, 0xad, 0xa5, 0xca, 0xda, 0x1a, 0x35, 0x71, 0x66, 0x3d, 0x44, 0xc3,
	0xef, 0xf0, 0x34, 0x65, 0x8f, 0xf2, 0x6f, 0x4f, 0x23, 0x98, 0x7f, 0xd7, 0x91, 0x61, 0x78, 0x89,
	0xd8, 0x45, 0xab, 0xdc, 0x2e, 0x7b, 0x57, 0xaf, 0xdd, 0xfb, 0xcd, 0x2b, 0x9c, 0x7d, 0x98, 0x02,
	0xfb, 0xea, 0x60, 0xf4, 0xc7, 0x95, 0xbc, 0xaf, 0xf6, 0xca, 0xfb, 0x8b, 0xd7, 0xbd, 0x8f, 0xe6,
	0xfc, 0x4b, 0x7f, 0x09, 0xca, 0x3e, 0x2b, 0x3e, 0x1b, 0x04, 0x54, 0xc8, 0x5d, 0x55, 0x00, 0x2d,
	0x3c, 0xaf, 0xfc, 0x36, 0xe7, 0x60, 0xe8, 0xa5, 0x4f, 0xff, 0x91, 0x6c, 0x5a, 0xda, 0x48, 0x4a,
	0x1f, 0x6f, 0x24, 0xa5, 0x4f, 0x36, 0x92, 0xd2, 0xdf, 0x37, 0x92, 0xd2, 0xe6, 0x46, 0xb2, 0xe9,
	0x5f, 0x1b, 0x49, 0xe9, 0xf5, 0xbb, 0xc9, 0xa6, 0x8f, 0xef, 0x26, 0xa5, 0x4f, 0xee, 0x26, 0x9b,
	0x3e, 0xbd, 0x9b, 0x6c, 0xfa, 0xf1, 0x40, 0x1e, 0x9b, 0x76, 0xf0, 0x91, 0x31, 0x8f, 0x8b, 0x45,
	0x6c, 0x0f, 0xd6, 0x7d, 0x88, 0xe4, 0x1d, 0x7d, 0xbc, 0x95, 0x6d, 0x1f, 0xfe, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x24, 0x85, 0x5b, 0x35, 0xa8, 0x14, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLMatchOfflineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLMatchOfflineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetTodayBossRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetTodayBossResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLCreateRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLCreateRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLChangeCombatNeedRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLChangeCombatNeedResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetCurrRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetCurrRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLJoinRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLJoinRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLLeaveRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLLeaveRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetRoleRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetRoleRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLDismissRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLDismissRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLDismissEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLPubRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLPubRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetRandomRoomRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLGetRandomRoomResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLInviteRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLInviteResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLPubRoomToChatRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLPubRoomToChatResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLStartBattleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLStartBattleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLReGetBattleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLReGetBattleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLReadyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLReadyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLChooseHeroRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLChooseHeroResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLKickRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLKickResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLChangeOwnerRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLChangeOwnerResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLRoomChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLRoomClosePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLInvitePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLRoguelikeStartPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLRoguelikeFinishPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_Reward.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLBattleFinishEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLBattleExitEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_RLBeKickPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_CheatChangeBossRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_CheatChangeBossResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_CheatClearTodayCntRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeMatch_CheatClearTodayCntResponse.Get().(proto.Message)
	})
}

var poolRoguelikeMatch = &sync.Pool{New: func() interface{} { return &RoguelikeMatch{} }}

func (m *RoguelikeMatch) ReleasePool() { m.Reset(); poolRoguelikeMatch.Put(m); m = nil }

var poolRoguelikeMatch_RLMatchOfflineRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLMatchOfflineRequest{} }}

func (m *RoguelikeMatch_RLMatchOfflineRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLMatchOfflineRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLMatchOfflineResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLMatchOfflineResponse{} }}

func (m *RoguelikeMatch_RLMatchOfflineResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLMatchOfflineResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetTodayBossRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetTodayBossRequest{} }}

func (m *RoguelikeMatch_RLGetTodayBossRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetTodayBossRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetTodayBossResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetTodayBossResponse{} }}

func (m *RoguelikeMatch_RLGetTodayBossResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetTodayBossResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLCreateRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLCreateRoomRequest{} }}

func (m *RoguelikeMatch_RLCreateRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLCreateRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLCreateRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLCreateRoomResponse{} }}

func (m *RoguelikeMatch_RLCreateRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLCreateRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLChangeCombatNeedRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLChangeCombatNeedRequest{} }}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLChangeCombatNeedRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLChangeCombatNeedResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLChangeCombatNeedResponse{} }}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLChangeCombatNeedResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetCurrRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetCurrRoomRequest{} }}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetCurrRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetCurrRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetCurrRoomResponse{} }}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetCurrRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLJoinRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLJoinRoomRequest{} }}

func (m *RoguelikeMatch_RLJoinRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLJoinRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLJoinRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLJoinRoomResponse{} }}

func (m *RoguelikeMatch_RLJoinRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLJoinRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLLeaveRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLLeaveRoomRequest{} }}

func (m *RoguelikeMatch_RLLeaveRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLLeaveRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLLeaveRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLLeaveRoomResponse{} }}

func (m *RoguelikeMatch_RLLeaveRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLLeaveRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetRoleRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetRoleRoomRequest{} }}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetRoleRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetRoleRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetRoleRoomResponse{} }}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetRoleRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLDismissRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLDismissRoomRequest{} }}

func (m *RoguelikeMatch_RLDismissRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLDismissRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLDismissRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLDismissRoomResponse{} }}

func (m *RoguelikeMatch_RLDismissRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLDismissRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLDismissEvent = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLDismissEvent{} }}

func (m *RoguelikeMatch_RLDismissEvent) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLDismissEvent.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLPubRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLPubRoomRequest{} }}

func (m *RoguelikeMatch_RLPubRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLPubRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLPubRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLPubRoomResponse{} }}

func (m *RoguelikeMatch_RLPubRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLPubRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetRandomRoomRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetRandomRoomRequest{} }}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetRandomRoomRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLGetRandomRoomResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLGetRandomRoomResponse{} }}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLGetRandomRoomResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLInviteRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLInviteRequest{} }}

func (m *RoguelikeMatch_RLInviteRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLInviteRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLInviteResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLInviteResponse{} }}

func (m *RoguelikeMatch_RLInviteResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLInviteResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLPubRoomToChatRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLPubRoomToChatRequest{} }}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLPubRoomToChatRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLPubRoomToChatResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLPubRoomToChatResponse{} }}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLPubRoomToChatResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLStartBattleRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLStartBattleRequest{} }}

func (m *RoguelikeMatch_RLStartBattleRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLStartBattleRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLStartBattleResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLStartBattleResponse{} }}

func (m *RoguelikeMatch_RLStartBattleResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLStartBattleResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLReGetBattleRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLReGetBattleRequest{} }}

func (m *RoguelikeMatch_RLReGetBattleRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLReGetBattleRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLReGetBattleResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLReGetBattleResponse{} }}

func (m *RoguelikeMatch_RLReGetBattleResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLReGetBattleResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLReadyRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLReadyRequest{} }}

func (m *RoguelikeMatch_RLReadyRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLReadyRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLReadyResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLReadyResponse{} }}

func (m *RoguelikeMatch_RLReadyResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLReadyResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLChooseHeroRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLChooseHeroRequest{} }}

func (m *RoguelikeMatch_RLChooseHeroRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLChooseHeroRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLChooseHeroResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLChooseHeroResponse{} }}

func (m *RoguelikeMatch_RLChooseHeroResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLChooseHeroResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLKickRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLKickRequest{} }}

func (m *RoguelikeMatch_RLKickRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLKickRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLKickResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLKickResponse{} }}

func (m *RoguelikeMatch_RLKickResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLKickResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLChangeOwnerRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLChangeOwnerRequest{} }}

func (m *RoguelikeMatch_RLChangeOwnerRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLChangeOwnerRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLChangeOwnerResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLChangeOwnerResponse{} }}

func (m *RoguelikeMatch_RLChangeOwnerResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLChangeOwnerResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLRoomChangePush = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLRoomChangePush{} }}

func (m *RoguelikeMatch_RLRoomChangePush) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLRoomChangePush.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLRoomClosePush = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLRoomClosePush{} }}

func (m *RoguelikeMatch_RLRoomClosePush) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLRoomClosePush.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLInvitePush = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLInvitePush{} }}

func (m *RoguelikeMatch_RLInvitePush) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLInvitePush.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLRoguelikeStartPush = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLRoguelikeStartPush{} }}

func (m *RoguelikeMatch_RLRoguelikeStartPush) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLRoguelikeStartPush.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLRoguelikeFinishPush = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLRoguelikeFinishPush{} }}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLRoguelikeFinishPush.Put(m)
	m = nil
}

var poolRoguelikeMatch_Reward = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_Reward{} }}

func (m *RoguelikeMatch_Reward) ReleasePool() { m.Reset(); poolRoguelikeMatch_Reward.Put(m); m = nil }

var poolRoguelikeMatch_RLBattleFinishEvent = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLBattleFinishEvent{} }}

func (m *RoguelikeMatch_RLBattleFinishEvent) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLBattleFinishEvent.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLBattleExitEvent = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLBattleExitEvent{} }}

func (m *RoguelikeMatch_RLBattleExitEvent) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLBattleExitEvent.Put(m)
	m = nil
}

var poolRoguelikeMatch_RLBeKickPush = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_RLBeKickPush{} }}

func (m *RoguelikeMatch_RLBeKickPush) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_RLBeKickPush.Put(m)
	m = nil
}

var poolRoguelikeMatch_CheatChangeBossRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_CheatChangeBossRequest{} }}

func (m *RoguelikeMatch_CheatChangeBossRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_CheatChangeBossRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_CheatChangeBossResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_CheatChangeBossResponse{} }}

func (m *RoguelikeMatch_CheatChangeBossResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_CheatChangeBossResponse.Put(m)
	m = nil
}

var poolRoguelikeMatch_CheatClearTodayCntRequest = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_CheatClearTodayCntRequest{} }}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_CheatClearTodayCntRequest.Put(m)
	m = nil
}

var poolRoguelikeMatch_CheatClearTodayCntResponse = &sync.Pool{New: func() interface{} { return &RoguelikeMatch_CheatClearTodayCntResponse{} }}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) ReleasePool() {
	m.Reset()
	poolRoguelikeMatch_CheatClearTodayCntResponse.Put(m)
	m = nil
}
func (x RoguelikeMatchErrorCode) String() string {
	s, ok := RoguelikeMatchErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RoguelikeMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch)
	if !ok {
		that2, ok := that.(RoguelikeMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLMatchOfflineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLMatchOfflineRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLMatchOfflineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ConfigIds) != len(that1.ConfigIds) {
		return false
	}
	for i := range this.ConfigIds {
		if this.ConfigIds[i] != that1.ConfigIds[i] {
			return false
		}
	}
	return true
}
func (this *RoguelikeMatch_RLMatchOfflineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLMatchOfflineResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLMatchOfflineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetTodayBossRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetTodayBossRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetTodayBossRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetTodayBossResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetTodayBossResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetTodayBossResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DungeonDay != that1.DungeonDay {
		return false
	}
	if len(this.BossSkill) != len(that1.BossSkill) {
		return false
	}
	for i := range this.BossSkill {
		if !this.BossSkill[i].Equal(that1.BossSkill[i]) {
			return false
		}
	}
	if len(this.MonsterSkill) != len(that1.MonsterSkill) {
		return false
	}
	for i := range this.MonsterSkill {
		if !this.MonsterSkill[i].Equal(that1.MonsterSkill[i]) {
			return false
		}
	}
	if this.JoinCnt != that1.JoinCnt {
		return false
	}
	if this.ExtraCnt != that1.ExtraCnt {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLCreateRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLCreateRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLCreateRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	if this.CombatNeed != that1.CombatNeed {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLCreateRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLCreateRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLCreateRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLChangeCombatNeedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLChangeCombatNeedRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLChangeCombatNeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CombatNeed != that1.CombatNeed {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLChangeCombatNeedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLChangeCombatNeedResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLChangeCombatNeedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetCurrRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetCurrRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetCurrRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetCurrRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetCurrRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetCurrRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLJoinRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLJoinRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLJoinRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	if this.UserFight != that1.UserFight {
		return false
	}
	if this.IsPrivate != that1.IsPrivate {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLJoinRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLJoinRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLJoinRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLLeaveRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLLeaveRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLLeaveRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLLeaveRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLLeaveRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLLeaveRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetRoleRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetRoleRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetRoleRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetRoleRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetRoleRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetRoleRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLDismissRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLDismissRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLDismissRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLDismissRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLDismissRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLDismissRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLDismissEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLDismissEvent)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLDismissEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLPubRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLPubRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLPubRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsOpen != that1.IsOpen {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLPubRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLPubRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLPubRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetRandomRoomRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetRandomRoomRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetRandomRoomRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoguelikeId) != len(that1.RoguelikeId) {
		return false
	}
	for i := range this.RoguelikeId {
		if this.RoguelikeId[i] != that1.RoguelikeId[i] {
			return false
		}
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLGetRandomRoomResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLGetRandomRoomResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLGetRandomRoomResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return false
		}
	}
	return true
}
func (this *RoguelikeMatch_RLInviteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLInviteRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLInviteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLInviteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLInviteResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLInviteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLPubRoomToChatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLPubRoomToChatRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLPubRoomToChatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLPubRoomToChatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLPubRoomToChatResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLPubRoomToChatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLStartBattleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLStartBattleRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLStartBattleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLStartBattleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLStartBattleResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLStartBattleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLReGetBattleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLReGetBattleRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLReGetBattleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLReGetBattleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLReGetBattleResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLReGetBattleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if len(this.RlRooms) != len(that1.RlRooms) {
		return false
	}
	for i := range this.RlRooms {
		if !this.RlRooms[i].Equal(that1.RlRooms[i]) {
			return false
		}
	}
	if this.CurIdx != that1.CurIdx {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLReadyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLReadyRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLReadyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLReadyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLReadyResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLReadyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLChooseHeroRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLChooseHeroRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLChooseHeroRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.CardId != that1.CardId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLChooseHeroResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLChooseHeroResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLChooseHeroResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLKickRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLKickRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLKickRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLKickResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLKickResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLKickResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLChangeOwnerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLChangeOwnerRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLChangeOwnerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLChangeOwnerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLChangeOwnerResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLChangeOwnerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLRoomChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLRoomChangePush)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLRoomChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLRoomClosePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLRoomClosePush)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLRoomClosePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLInvitePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLInvitePush)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLInvitePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLRoguelikeStartPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLRoguelikeStartPush)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLRoguelikeStartPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if len(this.RlRooms) != len(that1.RlRooms) {
		return false
	}
	for i := range this.RlRooms {
		if !this.RlRooms[i].Equal(that1.RlRooms[i]) {
			return false
		}
	}
	return true
}
func (this *RoguelikeMatch_RLRoguelikeFinishPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLRoguelikeFinishPush)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLRoguelikeFinishPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	if this.HasReward != that1.HasReward {
		return false
	}
	return true
}
func (this *RoguelikeMatch_Reward) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_Reward)
	if !ok {
		that2, ok := that.(RoguelikeMatch_Reward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *RoguelikeMatch_RLBattleFinishEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLBattleFinishEvent)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLBattleFinishEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	if len(this.RoleRewards) != len(that1.RoleRewards) {
		return false
	}
	for i := range this.RoleRewards {
		if !this.RoleRewards[i].Equal(that1.RoleRewards[i]) {
			return false
		}
	}
	if this.IsSuc != that1.IsSuc {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *RoguelikeMatch_RLBattleExitEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLBattleExitEvent)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLBattleExitEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *RoguelikeMatch_RLBeKickPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_RLBeKickPush)
	if !ok {
		that2, ok := that.(RoguelikeMatch_RLBeKickPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	return true
}
func (this *RoguelikeMatch_CheatChangeBossRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_CheatChangeBossRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_CheatChangeBossRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_CheatChangeBossResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_CheatChangeBossResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_CheatChangeBossResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_CheatClearTodayCntRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_CheatClearTodayCntRequest)
	if !ok {
		that2, ok := that.(RoguelikeMatch_CheatClearTodayCntRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RoguelikeMatch_CheatClearTodayCntResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeMatch_CheatClearTodayCntResponse)
	if !ok {
		that2, ok := that.(RoguelikeMatch_CheatClearTodayCntResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *RoguelikeMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLMatchOfflineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLMatchOfflineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLMatchOfflineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfigIds) > 0 {
		dAtA2 := make([]byte, len(m.ConfigIds)*10)
		var j1 int
		for _, num1 := range m.ConfigIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMatch(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLMatchOfflineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLMatchOfflineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLMatchOfflineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetTodayBossRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetTodayBossRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetTodayBossRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtraCnt != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.ExtraCnt))
		i--
		dAtA[i] = 0x28
	}
	if m.JoinCnt != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.JoinCnt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MonsterSkill) > 0 {
		for k := range m.MonsterSkill {
			v := m.MonsterSkill[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMatch(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMatch(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMatch(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BossSkill) > 0 {
		for k := range m.BossSkill {
			v := m.BossSkill[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMatch(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMatch(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMatch(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DungeonDay != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.DungeonDay))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLCreateRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLCreateRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLCreateRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CombatNeed != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.CombatNeed))
		i--
		dAtA[i] = 0x10
	}
	if m.RoguelikeId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoguelikeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLCreateRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLCreateRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLCreateRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CombatNeed != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.CombatNeed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLJoinRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLJoinRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLJoinRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPrivate {
		i--
		if m.IsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserFight != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.UserFight))
		i--
		dAtA[i] = 0x18
	}
	if m.RoguelikeId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoguelikeId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLJoinRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLJoinRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLJoinRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLLeaveRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLLeaveRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLLeaveRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoguelikeId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoguelikeId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLLeaveRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLLeaveRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLLeaveRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLDismissRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLDismissRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLDismissRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLDismissRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLDismissRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLDismissRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLDismissEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLDismissEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLDismissEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLPubRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLPubRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLPubRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLPubRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLPubRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLPubRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoguelikeId) > 0 {
		dAtA11 := make([]byte, len(m.RoguelikeId)*10)
		var j10 int
		for _, num1 := range m.RoguelikeId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintMatch(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLInviteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLInviteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLInviteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLInviteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLInviteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLInviteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLStartBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLStartBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLStartBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLStartBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLStartBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLStartBattleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLReGetBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLReGetBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLReGetBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLReGetBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLReGetBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLReGetBattleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurIdx != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.CurIdx))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RlRooms) > 0 {
		for iNdEx := len(m.RlRooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RlRooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MapId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLReadyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLReadyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLReadyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLReadyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLReadyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLReadyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLChooseHeroRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLChooseHeroRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLChooseHeroRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLChooseHeroResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLChooseHeroResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLChooseHeroResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLKickRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLKickRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLKickRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLKickResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLKickResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLKickResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLChangeOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLChangeOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLChangeOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLChangeOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLChangeOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLChangeOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLRoomChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLRoomChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLRoomChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLRoomClosePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLRoomClosePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLRoomClosePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLInvitePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLInvitePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLInvitePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoguelikeId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoguelikeId))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RlRooms) > 0 {
		for iNdEx := len(m.RlRooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RlRooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MapId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasReward {
		i--
		if m.HasReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintMatch(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMatch(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMatch(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BattleId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintMatch(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMatch(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMatch(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLBattleFinishEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLBattleFinishEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLBattleFinishEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.IsSuc {
		i--
		if m.IsSuc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.RoleRewards) > 0 {
		for k := range m.RoleRewards {
			v := m.RoleRewards[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMatch(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMatch(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMatch(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RoguelikeId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoguelikeId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLBattleExitEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLBattleExitEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLBattleExitEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintMatch(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMatch(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMatch(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoguelikeId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoguelikeId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_RLBeKickPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_RLBeKickPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_RLBeKickPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_CheatChangeBossRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_CheatChangeBossRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_CheatChangeBossRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_CheatChangeBossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_CheatChangeBossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_CheatChangeBossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RoguelikeMatch) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLMatchOfflineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("config_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.ConfigIds == nil {
		w.RawString("null")
	} else if len(m.ConfigIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ConfigIds {
			w.Int64(int64(v))
			if i != len(m.ConfigIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLMatchOfflineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetTodayBossRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetTodayBossResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DungeonDay != 0 {
		w.RawByte('"')
		w.RawString("dungeon_day")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonDay))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_skill")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossSkill == nil {
		w.RawString("null")
	} else if len(m.BossSkill) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBossSkill := len(m.BossSkill)
		for k, v := range m.BossSkill {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBossSkill--
			if mlBossSkill != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("monster_skill")
	w.RawByte('"')
	w.RawByte(':')
	if m.MonsterSkill == nil {
		w.RawString("null")
	} else if len(m.MonsterSkill) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlMonsterSkill := len(m.MonsterSkill)
		for k, v := range m.MonsterSkill {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlMonsterSkill--
			if mlMonsterSkill != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.JoinCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("join_cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.JoinCnt))
		needWriteComma = true
	}
	if m.ExtraCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("extra_cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExtraCnt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLCreateRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoguelikeId != 0 {
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	if m.CombatNeed != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_need")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatNeed))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLCreateRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CombatNeed != 0 {
		w.RawByte('"')
		w.RawString("combat_need")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatNeed))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLJoinRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.RoguelikeId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	if m.UserFight != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("user_fight")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UserFight))
		needWriteComma = true
	}
	if m.IsPrivate {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_private")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPrivate)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLJoinRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLLeaveRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.RoguelikeId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLLeaveRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLDismissRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLDismissRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLDismissEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLPubRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsOpen {
		w.RawByte('"')
		w.RawString("is_open")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOpen)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLPubRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("roguelike_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoguelikeId == nil {
		w.RawString("null")
	} else if len(m.RoguelikeId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoguelikeId {
			w.Int64(int64(v))
			if i != len(m.RoguelikeId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Num != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rooms")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rooms == nil {
		w.RawString("null")
	} else if len(m.Rooms) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Rooms {
			v.JsonBytes(w)
			if i != len(m.Rooms)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLInviteRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLInviteResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLStartBattleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLStartBattleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLReGetBattleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLReGetBattleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rl_rooms")
	w.RawByte('"')
	w.RawByte(':')
	if m.RlRooms == nil {
		w.RawString("null")
	} else if len(m.RlRooms) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RlRooms {
			v.JsonBytes(w)
			if i != len(m.RlRooms)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CurIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurIdx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLReadyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Ready {
		w.RawByte('"')
		w.RawString("ready")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Ready)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLReadyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLChooseHeroRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.CardId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("card_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CardId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLChooseHeroResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLKickRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLKickResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLChangeOwnerRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLChangeOwnerResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLRoomChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("room")
	w.RawByte('"')
	w.RawByte(':')
	m.Room.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLRoomClosePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLInvitePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.RoguelikeId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLRoguelikeStartPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rl_rooms")
	w.RawByte('"')
	w.RawByte(':')
	if m.RlRooms == nil {
		w.RawString("null")
	} else if len(m.RlRooms) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RlRooms {
			v.JsonBytes(w)
			if i != len(m.RlRooms)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.HasReward {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("has_reward")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasReward)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_Reward) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLBattleFinishEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.RoguelikeId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("role_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleRewards == nil {
		w.RawString("null")
	} else if len(m.RoleRewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRoleRewards := len(m.RoleRewards)
		for k, v := range m.RoleRewards {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlRoleRewards--
			if mlRoleRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.IsSuc {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_suc")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuc)
		needWriteComma = true
	}
	if m.Duration != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("duration")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Duration))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLBattleExitEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.RoguelikeId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_RLBeKickPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeMatch_CheatChangeBossRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_CheatChangeBossResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RoguelikeMatch) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLMatchOfflineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLMatchOfflineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetTodayBossRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLCreateRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLCreateRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLCreateRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLCreateRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLCreateRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLCreateRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLJoinRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLJoinRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLJoinRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLJoinRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLJoinRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLJoinRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLLeaveRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLLeaveRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLDismissRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLDismissRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLDismissRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLDismissRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLDismissRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLDismissRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLDismissEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLDismissEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLDismissEvent) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLPubRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLPubRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLPubRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLPubRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLPubRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLPubRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLInviteRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLInviteRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLInviteRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLInviteResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLInviteResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLInviteResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLStartBattleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLStartBattleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLStartBattleRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLStartBattleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLStartBattleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLStartBattleResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLReGetBattleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLReGetBattleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLReGetBattleRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLReGetBattleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLReGetBattleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLReGetBattleResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLReadyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLReadyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLReadyRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLReadyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLReadyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLReadyResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLChooseHeroRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLChooseHeroRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLChooseHeroRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLChooseHeroResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLChooseHeroResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLChooseHeroResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLKickRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLKickRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLKickRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLKickResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLKickResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLKickResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLChangeOwnerRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLChangeOwnerResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLRoomChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLRoomChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLRoomChangePush) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLRoomClosePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLRoomClosePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLRoomClosePush) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLInvitePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLInvitePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLInvitePush) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_Reward) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_Reward) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_Reward) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLBattleFinishEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLBattleFinishEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLBattleFinishEvent) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLBattleExitEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLBattleExitEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLBattleExitEvent) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_RLBeKickPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_RLBeKickPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_RLBeKickPush) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_CheatChangeBossRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_CheatChangeBossRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_CheatChangeBossRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_CheatChangeBossResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_CheatChangeBossResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_CheatChangeBossResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) GoString() string {
	return m.String()
}

func (m *RoguelikeMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLMatchOfflineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConfigIds) > 0 {
		l = 0
		for _, e := range m.ConfigIds {
			l += sovMatch(uint64(e))
		}
		n += 1 + sovMatch(uint64(l)) + l
	}
	return n
}

func (m *RoguelikeMatch_RLMatchOfflineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLGetTodayBossRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLGetTodayBossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DungeonDay != 0 {
		n += 1 + sovMatch(uint64(m.DungeonDay))
	}
	if len(m.BossSkill) > 0 {
		for k, v := range m.BossSkill {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMatch(uint64(l))
			}
			mapEntrySize := 1 + sovMatch(uint64(k)) + l
			n += mapEntrySize + 1 + sovMatch(uint64(mapEntrySize))
		}
	}
	if len(m.MonsterSkill) > 0 {
		for k, v := range m.MonsterSkill {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMatch(uint64(l))
			}
			mapEntrySize := 1 + sovMatch(uint64(k)) + l
			n += mapEntrySize + 1 + sovMatch(uint64(mapEntrySize))
		}
	}
	if m.JoinCnt != 0 {
		n += 1 + sovMatch(uint64(m.JoinCnt))
	}
	if m.ExtraCnt != 0 {
		n += 1 + sovMatch(uint64(m.ExtraCnt))
	}
	return n
}

func (m *RoguelikeMatch_RLCreateRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoguelikeId != 0 {
		n += 1 + sovMatch(uint64(m.RoguelikeId))
	}
	if m.CombatNeed != 0 {
		n += 1 + sovMatch(uint64(m.CombatNeed))
	}
	return n
}

func (m *RoguelikeMatch_RLCreateRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLChangeCombatNeedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CombatNeed != 0 {
		n += 1 + sovMatch(uint64(m.CombatNeed))
	}
	return n
}

func (m *RoguelikeMatch_RLChangeCombatNeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLGetCurrRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLGetCurrRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLJoinRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.RoguelikeId != 0 {
		n += 1 + sovMatch(uint64(m.RoguelikeId))
	}
	if m.UserFight != 0 {
		n += 1 + sovMatch(uint64(m.UserFight))
	}
	if m.IsPrivate {
		n += 2
	}
	return n
}

func (m *RoguelikeMatch_RLJoinRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLLeaveRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.RoguelikeId != 0 {
		n += 1 + sovMatch(uint64(m.RoguelikeId))
	}
	return n
}

func (m *RoguelikeMatch_RLLeaveRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLGetRoleRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLGetRoleRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLDismissRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLDismissRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLDismissEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLPubRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOpen {
		n += 2
	}
	return n
}

func (m *RoguelikeMatch_RLPubRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLGetRandomRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoguelikeId) > 0 {
		l = 0
		for _, e := range m.RoguelikeId {
			l += sovMatch(uint64(e))
		}
		n += 1 + sovMatch(uint64(l)) + l
	}
	if m.Num != 0 {
		n += 1 + sovMatch(uint64(m.Num))
	}
	return n
}

func (m *RoguelikeMatch_RLGetRandomRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	return n
}

func (m *RoguelikeMatch_RLInviteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLInviteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLPubRoomToChatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLPubRoomToChatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLStartBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLStartBattleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLReGetBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLReGetBattleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.BattleId != 0 {
		n += 1 + sovMatch(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovMatch(uint64(m.MapId))
	}
	if len(m.RlRooms) > 0 {
		for _, e := range m.RlRooms {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	if m.CurIdx != 0 {
		n += 1 + sovMatch(uint64(m.CurIdx))
	}
	return n
}

func (m *RoguelikeMatch_RLReadyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready {
		n += 2
	}
	return n
}

func (m *RoguelikeMatch_RLReadyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLChooseHeroRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovMatch(uint64(m.ConfigId))
	}
	if m.CardId != 0 {
		n += 1 + sovMatch(uint64(m.CardId))
	}
	return n
}

func (m *RoguelikeMatch_RLChooseHeroResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLKickRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLKickResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLChangeOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLChangeOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_RLRoomChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoguelikeMatch_RLRoomClosePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	return n
}

func (m *RoguelikeMatch_RLInvitePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.RoguelikeId != 0 {
		n += 1 + sovMatch(uint64(m.RoguelikeId))
	}
	return n
}

func (m *RoguelikeMatch_RLRoguelikeStartPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.BattleId != 0 {
		n += 1 + sovMatch(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovMatch(uint64(m.MapId))
	}
	if len(m.RlRooms) > 0 {
		for _, e := range m.RlRooms {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	return n
}

func (m *RoguelikeMatch_RLRoguelikeFinishPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.BattleId != 0 {
		n += 1 + sovMatch(uint64(m.BattleId))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMatch(uint64(k)) + 1 + sovMatch(uint64(v))
			n += mapEntrySize + 1 + sovMatch(uint64(mapEntrySize))
		}
	}
	if m.HasReward {
		n += 2
	}
	return n
}

func (m *RoguelikeMatch_Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMatch(uint64(k)) + 1 + sovMatch(uint64(v))
			n += mapEntrySize + 1 + sovMatch(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoguelikeMatch_RLBattleFinishEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.RoguelikeId != 0 {
		n += 1 + sovMatch(uint64(m.RoguelikeId))
	}
	if len(m.RoleRewards) > 0 {
		for k, v := range m.RoleRewards {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMatch(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMatch(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMatch(uint64(mapEntrySize))
		}
	}
	if m.IsSuc {
		n += 2
	}
	if m.Duration != 0 {
		n += 1 + sovMatch(uint64(m.Duration))
	}
	return n
}

func (m *RoguelikeMatch_RLBattleExitEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	if m.RoguelikeId != 0 {
		n += 1 + sovMatch(uint64(m.RoguelikeId))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMatch(uint64(k)) + 1 + sovMatch(uint64(v))
			n += mapEntrySize + 1 + sovMatch(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoguelikeMatch_RLBeKickPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	return n
}

func (m *RoguelikeMatch_CheatChangeBossRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_CheatChangeBossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_CheatClearTodayCntRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RoguelikeMatch_CheatClearTodayCntResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoguelikeMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLMatchOfflineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLMatchOfflineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLMatchOfflineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ConfigIds = append(m.ConfigIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ConfigIds) == 0 {
					m.ConfigIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ConfigIds = append(m.ConfigIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLMatchOfflineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLMatchOfflineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLMatchOfflineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetTodayBossRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetTodayBossRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetTodayBossRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetTodayBossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetTodayBossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetTodayBossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonDay", wireType)
			}
			m.DungeonDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossSkill == nil {
				m.BossSkill = make(map[int64]*models.BossSkillList)
			}
			var mapkey int64
			var mapvalue *models.BossSkillList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMatch
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMatch
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.BossSkillList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMatch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMatch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BossSkill[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonsterSkill == nil {
				m.MonsterSkill = make(map[int64]*models.BossSkillList)
			}
			var mapkey int64
			var mapvalue *models.BossSkillList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMatch
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMatch
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.BossSkillList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMatch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMatch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MonsterSkill[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinCnt", wireType)
			}
			m.JoinCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinCnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraCnt", wireType)
			}
			m.ExtraCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraCnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLCreateRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLCreateRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLCreateRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			m.RoguelikeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoguelikeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatNeed", wireType)
			}
			m.CombatNeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatNeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLCreateRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLCreateRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLCreateRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.RoguelikeRoom{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLChangeCombatNeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLChangeCombatNeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLChangeCombatNeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatNeed", wireType)
			}
			m.CombatNeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatNeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLChangeCombatNeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLChangeCombatNeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLChangeCombatNeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.RoguelikeRoom{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetCurrRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetCurrRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetCurrRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetCurrRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetCurrRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetCurrRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.RoguelikeRoom{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLJoinRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLJoinRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLJoinRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			m.RoguelikeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoguelikeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFight", wireType)
			}
			m.UserFight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserFight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLJoinRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLJoinRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLJoinRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.RoguelikeRoom{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLLeaveRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLLeaveRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLLeaveRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			m.RoguelikeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoguelikeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLLeaveRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLLeaveRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLLeaveRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetRoleRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetRoleRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetRoleRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetRoleRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetRoleRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetRoleRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.RoguelikeRoom{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLDismissRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLDismissRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLDismissRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLDismissRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLDismissRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLDismissRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLDismissEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLDismissEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLDismissEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLPubRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLPubRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLPubRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLPubRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLPubRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLPubRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetRandomRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetRandomRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetRandomRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoguelikeId = append(m.RoguelikeId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoguelikeId) == 0 {
					m.RoguelikeId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoguelikeId = append(m.RoguelikeId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLGetRandomRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLGetRandomRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLGetRandomRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &models.RoguelikeRoom{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLInviteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLInviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLInviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLInviteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLInviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLInviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLPubRoomToChatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLPubRoomToChatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLPubRoomToChatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLPubRoomToChatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLPubRoomToChatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLPubRoomToChatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLStartBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLStartBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLStartBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLStartBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLStartBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLStartBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLReGetBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLReGetBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLReGetBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLReGetBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLReGetBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLReGetBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RlRooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RlRooms = append(m.RlRooms, &models.RlBattleRoom{})
			if err := m.RlRooms[len(m.RlRooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurIdx", wireType)
			}
			m.CurIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLReadyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLReadyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLReadyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLReadyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLReadyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLReadyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLChooseHeroRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLChooseHeroRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLChooseHeroRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLChooseHeroResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLChooseHeroResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLChooseHeroResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLKickRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLKickRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLKickRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLKickResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLKickResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLKickResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLChangeOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLChangeOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLChangeOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLChangeOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLChangeOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLChangeOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLRoomChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLRoomChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLRoomChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &models.RoguelikeRoom{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLRoomClosePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLRoomClosePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLRoomClosePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLInvitePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLInvitePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLInvitePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			m.RoguelikeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoguelikeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLRoguelikeStartPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLRoguelikeStartPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLRoguelikeStartPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RlRooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RlRooms = append(m.RlRooms, &models.RlBattleRoom{})
			if err := m.RlRooms[len(m.RlRooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLRoguelikeFinishPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLRoguelikeFinishPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLRoguelikeFinishPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMatch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMatch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasReward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMatch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMatch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLBattleFinishEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLBattleFinishEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLBattleFinishEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			m.RoguelikeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoguelikeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleRewards == nil {
				m.RoleRewards = make(map[string]*RoguelikeMatch_Reward)
			}
			var mapkey string
			var mapvalue *RoguelikeMatch_Reward
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMatch
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMatch
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMatch
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMatch
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoguelikeMatch_Reward{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMatch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMatch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RoleRewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuc = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLBattleExitEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLBattleExitEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLBattleExitEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			m.RoguelikeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoguelikeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMatch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMatch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_RLBeKickPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLBeKickPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLBeKickPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_CheatChangeBossRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatChangeBossRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatChangeBossRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_CheatChangeBossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatChangeBossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatChangeBossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_CheatClearTodayCntRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatClearTodayCntRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatClearTodayCntRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeMatch_CheatClearTodayCntResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatClearTodayCntResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatClearTodayCntResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatch = fmt.Errorf("proto: unexpected end of group")
)
