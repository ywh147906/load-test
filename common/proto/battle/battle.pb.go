// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/battle-service/battle.proto

package battle

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	_ "github.com/ywh147906/load-test/common/proto/models"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BattleErrorCode int32

const (
	BattleErrorCode_ErrBattleInvalidPos     BattleErrorCode = 0
	BattleErrorCode_ErrBattleInvalidPlayer  BattleErrorCode = 1
	BattleErrorCode_ErrNewBattleMapNotExist BattleErrorCode = 2
)

var BattleErrorCode_name = map[int32]string{
	0: "ErrBattleInvalidPos",
	1: "ErrBattleInvalidPlayer",
	2: "ErrNewBattleMapNotExist",
}

var BattleErrorCode_value = map[string]int32{
	"ErrBattleInvalidPos":     0,
	"ErrBattleInvalidPlayer":  1,
	"ErrNewBattleMapNotExist": 2,
}

func (BattleErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{0}
}

type Battle_RenderType int32

const (
	Battle_RTUnknown Battle_RenderType = 0
	Battle_RT3D      Battle_RenderType = 1
	Battle_RT2D      Battle_RenderType = 2
)

var Battle_RenderType_name = map[int32]string{
	0: "RTUnknown",
	1: "RT3D",
	2: "RT2D",
}

var Battle_RenderType_value = map[string]int32{
	"RTUnknown": 0,
	"RT3D":      1,
	"RT2D":      2,
}

func (Battle_RenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 0}
}

type Battle_DamageType int32

const (
	Battle_DTNormal   Battle_DamageType = 0
	Battle_DTDodge    Battle_DamageType = 1
	Battle_DTCritical Battle_DamageType = 2
	Battle_DTParry    Battle_DamageType = 3
	Battle_DTWardOff  Battle_DamageType = 4
)

var Battle_DamageType_name = map[int32]string{
	0: "DTNormal",
	1: "DTDodge",
	2: "DTCritical",
	3: "DTParry",
	4: "DTWardOff",
}

var Battle_DamageType_value = map[string]int32{
	"DTNormal":   0,
	"DTDodge":    1,
	"DTCritical": 2,
	"DTParry":    3,
	"DTWardOff":  4,
}

func (Battle_DamageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 1}
}

type Pos struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Pos) Reset()      { *m = Pos{} }
func (*Pos) ProtoMessage() {}
func (*Pos) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{0}
}
func (m *Pos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pos.Merge(m, src)
}
func (m *Pos) XXX_Size() int {
	return m.Size()
}
func (m *Pos) XXX_DiscardUnknown() {
	xxx_messageInfo_Pos.DiscardUnknown(m)
}

var xxx_messageInfo_Pos proto.InternalMessageInfo

func (m *Pos) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Pos) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (*Pos) XXX_MessageName() string {
	return "battle.Pos"
}

type Battle struct {
}

func (m *Battle) Reset()      { *m = Battle{} }
func (*Battle) ProtoMessage() {}
func (*Battle) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1}
}
func (m *Battle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle.Merge(m, src)
}
func (m *Battle) XXX_Size() int {
	return m.Size()
}
func (m *Battle) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle.DiscardUnknown(m)
}

var xxx_messageInfo_Battle proto.InternalMessageInfo

func (*Battle) XXX_MessageName() string {
	return "battle.Battle"
}

type Battle_TimePush struct {
	ServerTime float64 `protobuf:"fixed64,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *Battle_TimePush) Reset()      { *m = Battle_TimePush{} }
func (*Battle_TimePush) ProtoMessage() {}
func (*Battle_TimePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 0}
}
func (m *Battle_TimePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_TimePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_TimePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_TimePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_TimePush.Merge(m, src)
}
func (m *Battle_TimePush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_TimePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_TimePush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_TimePush proto.InternalMessageInfo

func (m *Battle_TimePush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*Battle_TimePush) XXX_MessageName() string {
	return "battle.Battle.TimePush"
}

type Battle_Pos struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Battle_Pos) Reset()      { *m = Battle_Pos{} }
func (*Battle_Pos) ProtoMessage() {}
func (*Battle_Pos) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 1}
}
func (m *Battle_Pos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_Pos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_Pos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_Pos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_Pos.Merge(m, src)
}
func (m *Battle_Pos) XXX_Size() int {
	return m.Size()
}
func (m *Battle_Pos) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_Pos.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_Pos proto.InternalMessageInfo

func (m *Battle_Pos) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Battle_Pos) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (*Battle_Pos) XXX_MessageName() string {
	return "battle.Battle.Pos"
}

type Battle_Pet struct {
	// 实例id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 配置Id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// 所属主人Id
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// 当前血量
	CurHp int64 `protobuf:"varint,4,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	// 最大血量
	MaxHp int64 `protobuf:"varint,5,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	// 当前魔法
	CurMagic int64 `protobuf:"varint,6,opt,name=cur_magic,json=curMagic,proto3" json:"cur_magic,omitempty"`
	// 最大魔法
	MaxMagic int64 `protobuf:"varint,7,opt,name=max_magic,json=maxMagic,proto3" json:"max_magic,omitempty"`
	// 当前位置
	Pos *Battle_Pos `protobuf:"bytes,8,opt,name=pos,proto3" json:"pos,omitempty"`
	// 身上所带buff
	BuffList []*Battle_BuffInfo `protobuf:"bytes,9,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
}

func (m *Battle_Pet) Reset()      { *m = Battle_Pet{} }
func (*Battle_Pet) ProtoMessage() {}
func (*Battle_Pet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 2}
}
func (m *Battle_Pet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_Pet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_Pet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_Pet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_Pet.Merge(m, src)
}
func (m *Battle_Pet) XXX_Size() int {
	return m.Size()
}
func (m *Battle_Pet) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_Pet.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_Pet proto.InternalMessageInfo

func (m *Battle_Pet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Battle_Pet) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Battle_Pet) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Battle_Pet) GetCurHp() int64 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

func (m *Battle_Pet) GetMaxHp() int64 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *Battle_Pet) GetCurMagic() int64 {
	if m != nil {
		return m.CurMagic
	}
	return 0
}

func (m *Battle_Pet) GetMaxMagic() int64 {
	if m != nil {
		return m.MaxMagic
	}
	return 0
}

func (m *Battle_Pet) GetPos() *Battle_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Battle_Pet) GetBuffList() []*Battle_BuffInfo {
	if m != nil {
		return m.BuffList
	}
	return nil
}

func (*Battle_Pet) XXX_MessageName() string {
	return "battle.Battle.Pet"
}

type Battle_KeepAlive struct {
}

func (m *Battle_KeepAlive) Reset()      { *m = Battle_KeepAlive{} }
func (*Battle_KeepAlive) ProtoMessage() {}
func (*Battle_KeepAlive) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 3}
}
func (m *Battle_KeepAlive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_KeepAlive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_KeepAlive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_KeepAlive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_KeepAlive.Merge(m, src)
}
func (m *Battle_KeepAlive) XXX_Size() int {
	return m.Size()
}
func (m *Battle_KeepAlive) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_KeepAlive.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_KeepAlive proto.InternalMessageInfo

func (*Battle_KeepAlive) XXX_MessageName() string {
	return "battle.Battle.KeepAlive"
}

type Battle_LeaveArea struct {
}

func (m *Battle_LeaveArea) Reset()      { *m = Battle_LeaveArea{} }
func (*Battle_LeaveArea) ProtoMessage() {}
func (*Battle_LeaveArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 4}
}
func (m *Battle_LeaveArea) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_LeaveArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_LeaveArea.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_LeaveArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_LeaveArea.Merge(m, src)
}
func (m *Battle_LeaveArea) XXX_Size() int {
	return m.Size()
}
func (m *Battle_LeaveArea) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_LeaveArea.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_LeaveArea proto.InternalMessageInfo

func (*Battle_LeaveArea) XXX_MessageName() string {
	return "battle.Battle.LeaveArea"
}

// 进入地图区域
type Battle_EnterMapRequest struct {
	Pos            *Battle_Pos `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId          string      `protobuf:"bytes,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64       `protobuf:"varint,3,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *Battle_EnterMapRequest) Reset()      { *m = Battle_EnterMapRequest{} }
func (*Battle_EnterMapRequest) ProtoMessage() {}
func (*Battle_EnterMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 5}
}
func (m *Battle_EnterMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_EnterMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_EnterMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_EnterMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_EnterMapRequest.Merge(m, src)
}
func (m *Battle_EnterMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *Battle_EnterMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_EnterMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_EnterMapRequest proto.InternalMessageInfo

func (m *Battle_EnterMapRequest) GetPos() *Battle_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Battle_EnterMapRequest) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *Battle_EnterMapRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*Battle_EnterMapRequest) XXX_MessageName() string {
	return "battle.Battle.EnterMapRequest"
}

type Battle_EnterMapResponse struct {
	Pos        *Battle_Pos `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId      string      `protobuf:"bytes,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	ServerTime float64     `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *Battle_EnterMapResponse) Reset()      { *m = Battle_EnterMapResponse{} }
func (*Battle_EnterMapResponse) ProtoMessage() {}
func (*Battle_EnterMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 6}
}
func (m *Battle_EnterMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_EnterMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_EnterMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_EnterMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_EnterMapResponse.Merge(m, src)
}
func (m *Battle_EnterMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *Battle_EnterMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_EnterMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_EnterMapResponse proto.InternalMessageInfo

func (m *Battle_EnterMapResponse) GetPos() *Battle_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Battle_EnterMapResponse) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *Battle_EnterMapResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*Battle_EnterMapResponse) XXX_MessageName() string {
	return "battle.Battle.EnterMapResponse"
}

// 移动到目标位置
type Battle_MoveRequest struct {
	Pos *Battle_Pos `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *Battle_MoveRequest) Reset()      { *m = Battle_MoveRequest{} }
func (*Battle_MoveRequest) ProtoMessage() {}
func (*Battle_MoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 7}
}
func (m *Battle_MoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_MoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_MoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_MoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_MoveRequest.Merge(m, src)
}
func (m *Battle_MoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *Battle_MoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_MoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_MoveRequest proto.InternalMessageInfo

func (m *Battle_MoveRequest) GetPos() *Battle_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (*Battle_MoveRequest) XXX_MessageName() string {
	return "battle.Battle.MoveRequest"
}

type Battle_MoveResponse struct {
	Pos        *Battle_Pos `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	ServerTime float64     `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *Battle_MoveResponse) Reset()      { *m = Battle_MoveResponse{} }
func (*Battle_MoveResponse) ProtoMessage() {}
func (*Battle_MoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 8}
}
func (m *Battle_MoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_MoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_MoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_MoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_MoveResponse.Merge(m, src)
}
func (m *Battle_MoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *Battle_MoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_MoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_MoveResponse proto.InternalMessageInfo

func (m *Battle_MoveResponse) GetPos() *Battle_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Battle_MoveResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*Battle_MoveResponse) XXX_MessageName() string {
	return "battle.Battle.MoveResponse"
}

type Battle_ChangeRenderRequest struct {
	Typ Battle_RenderType `protobuf:"varint,1,opt,name=typ,proto3,enum=battle.Battle_RenderType" json:"typ,omitempty"`
}

func (m *Battle_ChangeRenderRequest) Reset()      { *m = Battle_ChangeRenderRequest{} }
func (*Battle_ChangeRenderRequest) ProtoMessage() {}
func (*Battle_ChangeRenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 9}
}
func (m *Battle_ChangeRenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_ChangeRenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_ChangeRenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_ChangeRenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_ChangeRenderRequest.Merge(m, src)
}
func (m *Battle_ChangeRenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *Battle_ChangeRenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_ChangeRenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_ChangeRenderRequest proto.InternalMessageInfo

func (m *Battle_ChangeRenderRequest) GetTyp() Battle_RenderType {
	if m != nil {
		return m.Typ
	}
	return Battle_RTUnknown
}

func (*Battle_ChangeRenderRequest) XXX_MessageName() string {
	return "battle.Battle.ChangeRenderRequest"
}

type Battle_ChangeRenderResponse struct {
	Typ Battle_RenderType `protobuf:"varint,1,opt,name=typ,proto3,enum=battle.Battle_RenderType" json:"typ,omitempty"`
}

func (m *Battle_ChangeRenderResponse) Reset()      { *m = Battle_ChangeRenderResponse{} }
func (*Battle_ChangeRenderResponse) ProtoMessage() {}
func (*Battle_ChangeRenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 10}
}
func (m *Battle_ChangeRenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_ChangeRenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_ChangeRenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_ChangeRenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_ChangeRenderResponse.Merge(m, src)
}
func (m *Battle_ChangeRenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *Battle_ChangeRenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_ChangeRenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_ChangeRenderResponse proto.InternalMessageInfo

func (m *Battle_ChangeRenderResponse) GetTyp() Battle_RenderType {
	if m != nil {
		return m.Typ
	}
	return Battle_RTUnknown
}

func (*Battle_ChangeRenderResponse) XXX_MessageName() string {
	return "battle.Battle.ChangeRenderResponse"
}

type Battle_AutoFightRequest struct {
	AutoFight bool `protobuf:"varint,1,opt,name=auto_fight,json=autoFight,proto3" json:"auto_fight,omitempty"`
}

func (m *Battle_AutoFightRequest) Reset()      { *m = Battle_AutoFightRequest{} }
func (*Battle_AutoFightRequest) ProtoMessage() {}
func (*Battle_AutoFightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 11}
}
func (m *Battle_AutoFightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_AutoFightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_AutoFightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_AutoFightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_AutoFightRequest.Merge(m, src)
}
func (m *Battle_AutoFightRequest) XXX_Size() int {
	return m.Size()
}
func (m *Battle_AutoFightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_AutoFightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_AutoFightRequest proto.InternalMessageInfo

func (m *Battle_AutoFightRequest) GetAutoFight() bool {
	if m != nil {
		return m.AutoFight
	}
	return false
}

func (*Battle_AutoFightRequest) XXX_MessageName() string {
	return "battle.Battle.AutoFightRequest"
}

type Battle_AutoFightResponse struct {
}

func (m *Battle_AutoFightResponse) Reset()      { *m = Battle_AutoFightResponse{} }
func (*Battle_AutoFightResponse) ProtoMessage() {}
func (*Battle_AutoFightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 12}
}
func (m *Battle_AutoFightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_AutoFightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_AutoFightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_AutoFightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_AutoFightResponse.Merge(m, src)
}
func (m *Battle_AutoFightResponse) XXX_Size() int {
	return m.Size()
}
func (m *Battle_AutoFightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_AutoFightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_AutoFightResponse proto.InternalMessageInfo

func (*Battle_AutoFightResponse) XXX_MessageName() string {
	return "battle.Battle.AutoFightResponse"
}

type Battle_PlayerPush struct {
	// 实例id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 宗门名字
	SectName string `protobuf:"bytes,3,opt,name=sect_name,json=sectName,proto3" json:"sect_name,omitempty"`
	// 等级
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// 当前血量
	CurHp int64 `protobuf:"varint,5,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	// 最大血量
	MaxHp int64 `protobuf:"varint,6,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	// 当前魔法
	CurMagic int64 `protobuf:"varint,7,opt,name=cur_magic,json=curMagic,proto3" json:"cur_magic,omitempty"`
	// 最大魔法
	MaxMagic int64 `protobuf:"varint,8,opt,name=max_magic,json=maxMagic,proto3" json:"max_magic,omitempty"`
	// 当前位置
	Pos *Battle_Pos `protobuf:"bytes,9,opt,name=pos,proto3" json:"pos,omitempty"`
	// 身上所带buff
	BuffList   []*Battle_BuffInfo `protobuf:"bytes,10,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
	ServerTime float64            `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64              `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *Battle_PlayerPush) Reset()      { *m = Battle_PlayerPush{} }
func (*Battle_PlayerPush) ProtoMessage() {}
func (*Battle_PlayerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 13}
}
func (m *Battle_PlayerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_PlayerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_PlayerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_PlayerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_PlayerPush.Merge(m, src)
}
func (m *Battle_PlayerPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_PlayerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_PlayerPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_PlayerPush proto.InternalMessageInfo

func (m *Battle_PlayerPush) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Battle_PlayerPush) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Battle_PlayerPush) GetSectName() string {
	if m != nil {
		return m.SectName
	}
	return ""
}

func (m *Battle_PlayerPush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Battle_PlayerPush) GetCurHp() int64 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

func (m *Battle_PlayerPush) GetMaxHp() int64 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *Battle_PlayerPush) GetCurMagic() int64 {
	if m != nil {
		return m.CurMagic
	}
	return 0
}

func (m *Battle_PlayerPush) GetMaxMagic() int64 {
	if m != nil {
		return m.MaxMagic
	}
	return 0
}

func (m *Battle_PlayerPush) GetPos() *Battle_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Battle_PlayerPush) GetBuffList() []*Battle_BuffInfo {
	if m != nil {
		return m.BuffList
	}
	return nil
}

func (m *Battle_PlayerPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Battle_PlayerPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*Battle_PlayerPush) XXX_MessageName() string {
	return "battle.Battle.PlayerPush"
}

type Battle_MonsterPush struct {
	// 实例id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 配置Id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// 当前血量
	CurHp int64 `protobuf:"varint,3,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	// 最大血量
	MaxHp int64 `protobuf:"varint,4,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	// 当前魔法
	CurMagic int64 `protobuf:"varint,5,opt,name=cur_magic,json=curMagic,proto3" json:"cur_magic,omitempty"`
	// 最大魔法
	MaxMagic int64 `protobuf:"varint,6,opt,name=max_magic,json=maxMagic,proto3" json:"max_magic,omitempty"`
	// 当前位置
	Pos *Battle_Pos `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	// 身上所带buff
	BuffList   []*Battle_BuffInfo `protobuf:"bytes,8,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
	ServerTime float64            `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64              `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *Battle_MonsterPush) Reset()      { *m = Battle_MonsterPush{} }
func (*Battle_MonsterPush) ProtoMessage() {}
func (*Battle_MonsterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 14}
}
func (m *Battle_MonsterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_MonsterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_MonsterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_MonsterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_MonsterPush.Merge(m, src)
}
func (m *Battle_MonsterPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_MonsterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_MonsterPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_MonsterPush proto.InternalMessageInfo

func (m *Battle_MonsterPush) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Battle_MonsterPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Battle_MonsterPush) GetCurHp() int64 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

func (m *Battle_MonsterPush) GetMaxHp() int64 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *Battle_MonsterPush) GetCurMagic() int64 {
	if m != nil {
		return m.CurMagic
	}
	return 0
}

func (m *Battle_MonsterPush) GetMaxMagic() int64 {
	if m != nil {
		return m.MaxMagic
	}
	return 0
}

func (m *Battle_MonsterPush) GetPos() *Battle_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Battle_MonsterPush) GetBuffList() []*Battle_BuffInfo {
	if m != nil {
		return m.BuffList
	}
	return nil
}

func (m *Battle_MonsterPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Battle_MonsterPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*Battle_MonsterPush) XXX_MessageName() string {
	return "battle.Battle.MonsterPush"
}

// 移动广播
type Battle_MovePush struct {
	// 对象
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 当前位置
	Cur *Battle_Pos `protobuf:"bytes,2,opt,name=cur,proto3" json:"cur,omitempty"`
	// 目标位置
	Target *Battle_Pos `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// 速度
	Speed      float64 `protobuf:"fixed64,4,opt,name=speed,proto3" json:"speed,omitempty"`
	Sx         float64 `protobuf:"fixed64,5,opt,name=sx,proto3" json:"sx,omitempty"`
	Sy         float64 `protobuf:"fixed64,6,opt,name=sy,proto3" json:"sy,omitempty"`
	ServerTime float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64   `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *Battle_MovePush) Reset()      { *m = Battle_MovePush{} }
func (*Battle_MovePush) ProtoMessage() {}
func (*Battle_MovePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 15}
}
func (m *Battle_MovePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_MovePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_MovePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_MovePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_MovePush.Merge(m, src)
}
func (m *Battle_MovePush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_MovePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_MovePush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_MovePush proto.InternalMessageInfo

func (m *Battle_MovePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *Battle_MovePush) GetCur() *Battle_Pos {
	if m != nil {
		return m.Cur
	}
	return nil
}

func (m *Battle_MovePush) GetTarget() *Battle_Pos {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Battle_MovePush) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Battle_MovePush) GetSx() float64 {
	if m != nil {
		return m.Sx
	}
	return 0
}

func (m *Battle_MovePush) GetSy() float64 {
	if m != nil {
		return m.Sy
	}
	return 0
}

func (m *Battle_MovePush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Battle_MovePush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*Battle_MovePush) XXX_MessageName() string {
	return "battle.Battle.MovePush"
}

// 移动出了范围广播
type Battle_MoveOutPush struct {
	ObjectId   []string `protobuf:"bytes,1,rep,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ServerTime float64  `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64    `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *Battle_MoveOutPush) Reset()      { *m = Battle_MoveOutPush{} }
func (*Battle_MoveOutPush) ProtoMessage() {}
func (*Battle_MoveOutPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 16}
}
func (m *Battle_MoveOutPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_MoveOutPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_MoveOutPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_MoveOutPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_MoveOutPush.Merge(m, src)
}
func (m *Battle_MoveOutPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_MoveOutPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_MoveOutPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_MoveOutPush proto.InternalMessageInfo

func (m *Battle_MoveOutPush) GetObjectId() []string {
	if m != nil {
		return m.ObjectId
	}
	return nil
}

func (m *Battle_MoveOutPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Battle_MoveOutPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*Battle_MoveOutPush) XXX_MessageName() string {
	return "battle.Battle.MoveOutPush"
}

// 对象死亡推送
type Battle_DeadPush struct {
	ObjectId   string          `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AttackerId string          `protobuf:"bytes,2,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	SkillId    int64           `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Items      map[int64]int64 `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Box        int64           `protobuf:"varint,5,opt,name=box,proto3" json:"box,omitempty"`
	ServerTime float64         `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64           `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *Battle_DeadPush) Reset()      { *m = Battle_DeadPush{} }
func (*Battle_DeadPush) ProtoMessage() {}
func (*Battle_DeadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 17}
}
func (m *Battle_DeadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_DeadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_DeadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_DeadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_DeadPush.Merge(m, src)
}
func (m *Battle_DeadPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_DeadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_DeadPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_DeadPush proto.InternalMessageInfo

func (m *Battle_DeadPush) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *Battle_DeadPush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *Battle_DeadPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *Battle_DeadPush) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Battle_DeadPush) GetBox() int64 {
	if m != nil {
		return m.Box
	}
	return 0
}

func (m *Battle_DeadPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Battle_DeadPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*Battle_DeadPush) XXX_MessageName() string {
	return "battle.Battle.DeadPush"
}

// 到底目标点停止移动
type Battle_StopMovePush struct {
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 目标位置
	Target     *Battle_Pos `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	ServerTime float64     `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64       `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *Battle_StopMovePush) Reset()      { *m = Battle_StopMovePush{} }
func (*Battle_StopMovePush) ProtoMessage() {}
func (*Battle_StopMovePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 18}
}
func (m *Battle_StopMovePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_StopMovePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_StopMovePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_StopMovePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_StopMovePush.Merge(m, src)
}
func (m *Battle_StopMovePush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_StopMovePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_StopMovePush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_StopMovePush proto.InternalMessageInfo

func (m *Battle_StopMovePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *Battle_StopMovePush) GetTarget() *Battle_Pos {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Battle_StopMovePush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Battle_StopMovePush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*Battle_StopMovePush) XXX_MessageName() string {
	return "battle.Battle.StopMovePush"
}

type Battle_BuffInfo struct {
	// buff_id
	BuffId    int64   `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	Continued float64 `protobuf:"fixed64,2,opt,name=continued,proto3" json:"continued,omitempty"`
}

func (m *Battle_BuffInfo) Reset()      { *m = Battle_BuffInfo{} }
func (*Battle_BuffInfo) ProtoMessage() {}
func (*Battle_BuffInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 19}
}
func (m *Battle_BuffInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_BuffInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_BuffInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_BuffInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_BuffInfo.Merge(m, src)
}
func (m *Battle_BuffInfo) XXX_Size() int {
	return m.Size()
}
func (m *Battle_BuffInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_BuffInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_BuffInfo proto.InternalMessageInfo

func (m *Battle_BuffInfo) GetBuffId() int64 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *Battle_BuffInfo) GetContinued() float64 {
	if m != nil {
		return m.Continued
	}
	return 0
}

func (*Battle_BuffInfo) XXX_MessageName() string {
	return "battle.Battle.BuffInfo"
}

//普通战斗, 比如 我 祭出 玄冥符 对 哈喽.石魔 造成 51.6万伤害
type Battle_NormalFightInfoPush struct {
	// 攻击方Id
	AttackingId string               `protobuf:"bytes,1,opt,name=attacking_id,json=attackingId,proto3" json:"attacking_id,omitempty"`
	SkillId     int64                `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Damages     []*Battle_DamageInfo `protobuf:"bytes,3,rep,name=damages,proto3" json:"damages,omitempty"`
	BuffInfos   []*Battle_BuffInfo   `protobuf:"bytes,4,rep,name=buffInfos,proto3" json:"buffInfos,omitempty"`
	// 是否是攻击的目标
	AttackedTarget string `protobuf:"bytes,5,opt,name=attacked_target,json=attackedTarget,proto3" json:"attacked_target,omitempty"`
	// 是否不播放技能,默认播放技能，当为true时不播放技能，只有伤害
	NotPlayAction bool    `protobuf:"varint,6,opt,name=not_play_action,json=notPlayAction,proto3" json:"not_play_action,omitempty"`
	ServerTime    float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId      int64   `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *Battle_NormalFightInfoPush) Reset()      { *m = Battle_NormalFightInfoPush{} }
func (*Battle_NormalFightInfoPush) ProtoMessage() {}
func (*Battle_NormalFightInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 20}
}
func (m *Battle_NormalFightInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_NormalFightInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_NormalFightInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_NormalFightInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_NormalFightInfoPush.Merge(m, src)
}
func (m *Battle_NormalFightInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_NormalFightInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_NormalFightInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_NormalFightInfoPush proto.InternalMessageInfo

func (m *Battle_NormalFightInfoPush) GetAttackingId() string {
	if m != nil {
		return m.AttackingId
	}
	return ""
}

func (m *Battle_NormalFightInfoPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *Battle_NormalFightInfoPush) GetDamages() []*Battle_DamageInfo {
	if m != nil {
		return m.Damages
	}
	return nil
}

func (m *Battle_NormalFightInfoPush) GetBuffInfos() []*Battle_BuffInfo {
	if m != nil {
		return m.BuffInfos
	}
	return nil
}

func (m *Battle_NormalFightInfoPush) GetAttackedTarget() string {
	if m != nil {
		return m.AttackedTarget
	}
	return ""
}

func (m *Battle_NormalFightInfoPush) GetNotPlayAction() bool {
	if m != nil {
		return m.NotPlayAction
	}
	return false
}

func (m *Battle_NormalFightInfoPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Battle_NormalFightInfoPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*Battle_NormalFightInfoPush) XXX_MessageName() string {
	return "battle.Battle.NormalFightInfoPush"
}

type Battle_DamageInfo struct {
	// 被攻击者
	AttackedId string `protobuf:"bytes,1,opt,name=attacked_id,json=attackedId,proto3" json:"attacked_id,omitempty"`
	//  伤害类型
	Dt Battle_DamageType `protobuf:"varint,2,opt,name=dt,proto3,enum=battle.Battle_DamageType" json:"dt,omitempty"`
	// 攻击方造成伤害
	Damage int64 `protobuf:"varint,3,opt,name=damage,proto3" json:"damage,omitempty"`
	// 被攻击方剩余血量
	AttackedHp int64 `protobuf:"varint,4,opt,name=attacked_hp,json=attackedHp,proto3" json:"attacked_hp,omitempty"`
	// 使用技能后的坐标
	X float64 `protobuf:"fixed64,5,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,6,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Battle_DamageInfo) Reset()      { *m = Battle_DamageInfo{} }
func (*Battle_DamageInfo) ProtoMessage() {}
func (*Battle_DamageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 21}
}
func (m *Battle_DamageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_DamageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_DamageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_DamageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_DamageInfo.Merge(m, src)
}
func (m *Battle_DamageInfo) XXX_Size() int {
	return m.Size()
}
func (m *Battle_DamageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_DamageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_DamageInfo proto.InternalMessageInfo

func (m *Battle_DamageInfo) GetAttackedId() string {
	if m != nil {
		return m.AttackedId
	}
	return ""
}

func (m *Battle_DamageInfo) GetDt() Battle_DamageType {
	if m != nil {
		return m.Dt
	}
	return Battle_DTNormal
}

func (m *Battle_DamageInfo) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *Battle_DamageInfo) GetAttackedHp() int64 {
	if m != nil {
		return m.AttackedHp
	}
	return 0
}

func (m *Battle_DamageInfo) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Battle_DamageInfo) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (*Battle_DamageInfo) XXX_MessageName() string {
	return "battle.Battle.DamageInfo"
}

//触发会心, 比如 我 祭出 玄冥镜 触发会心，对哈喽.石魔 造成 126.39万伤害
type Battle_HeartFightInfoPush struct {
	// 攻击方Id
	AttackingId string `protobuf:"bytes,1,opt,name=attacking_id,json=attackingId,proto3" json:"attacking_id,omitempty"`
	// 被攻击方Id
	AttackedId string `protobuf:"bytes,2,opt,name=attacked_id,json=attackedId,proto3" json:"attacked_id,omitempty"`
	// 攻击方释放的技能Id
	SkillId int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	// 攻击方造成伤害
	Damage int64 `protobuf:"varint,4,opt,name=damage,proto3" json:"damage,omitempty"`
	// 被攻击方剩余血量
	AttackedHp int64 `protobuf:"varint,5,opt,name=attacked_hp,json=attackedHp,proto3" json:"attacked_hp,omitempty"`
}

func (m *Battle_HeartFightInfoPush) Reset()      { *m = Battle_HeartFightInfoPush{} }
func (*Battle_HeartFightInfoPush) ProtoMessage() {}
func (*Battle_HeartFightInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 22}
}
func (m *Battle_HeartFightInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_HeartFightInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_HeartFightInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_HeartFightInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_HeartFightInfoPush.Merge(m, src)
}
func (m *Battle_HeartFightInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_HeartFightInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_HeartFightInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_HeartFightInfoPush proto.InternalMessageInfo

func (m *Battle_HeartFightInfoPush) GetAttackingId() string {
	if m != nil {
		return m.AttackingId
	}
	return ""
}

func (m *Battle_HeartFightInfoPush) GetAttackedId() string {
	if m != nil {
		return m.AttackedId
	}
	return ""
}

func (m *Battle_HeartFightInfoPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *Battle_HeartFightInfoPush) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *Battle_HeartFightInfoPush) GetAttackedHp() int64 {
	if m != nil {
		return m.AttackedHp
	}
	return 0
}

func (*Battle_HeartFightInfoPush) XXX_MessageName() string {
	return "battle.Battle.HeartFightInfoPush"
}

//触发闪避， 比如 紫炎狮 的<紫炎灼烧>被 精英.蚀骨魔 [闪避]了
type Battle_DodgeFightInfoPush struct {
	// 攻击方Id
	AttackingId string `protobuf:"bytes,1,opt,name=attacking_id,json=attackingId,proto3" json:"attacking_id,omitempty"`
	// 被攻击方Id
	AttackedId string `protobuf:"bytes,2,opt,name=attacked_id,json=attackedId,proto3" json:"attacked_id,omitempty"`
	// 攻击方释放的技能Id
	SkillId int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (m *Battle_DodgeFightInfoPush) Reset()      { *m = Battle_DodgeFightInfoPush{} }
func (*Battle_DodgeFightInfoPush) ProtoMessage() {}
func (*Battle_DodgeFightInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 23}
}
func (m *Battle_DodgeFightInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_DodgeFightInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_DodgeFightInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_DodgeFightInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_DodgeFightInfoPush.Merge(m, src)
}
func (m *Battle_DodgeFightInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_DodgeFightInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_DodgeFightInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_DodgeFightInfoPush proto.InternalMessageInfo

func (m *Battle_DodgeFightInfoPush) GetAttackingId() string {
	if m != nil {
		return m.AttackingId
	}
	return ""
}

func (m *Battle_DodgeFightInfoPush) GetAttackedId() string {
	if m != nil {
		return m.AttackedId
	}
	return ""
}

func (m *Battle_DodgeFightInfoPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (*Battle_DodgeFightInfoPush) XXX_MessageName() string {
	return "battle.Battle.DodgeFightInfoPush"
}

//中毒buff伤害,比如 精英.蚀骨魔  处于中毒状态，受到1.65万伤害
type Battle_PoisoningBuffFightInfoPush struct {
	// buff_id
	BuffId int64 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	// buff的目标Id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 造成伤害
	Damage int64 `protobuf:"varint,3,opt,name=damage,proto3" json:"damage,omitempty"`
}

func (m *Battle_PoisoningBuffFightInfoPush) Reset()      { *m = Battle_PoisoningBuffFightInfoPush{} }
func (*Battle_PoisoningBuffFightInfoPush) ProtoMessage() {}
func (*Battle_PoisoningBuffFightInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d67449ea2df3f8c, []int{1, 24}
}
func (m *Battle_PoisoningBuffFightInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Battle_PoisoningBuffFightInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Battle_PoisoningBuffFightInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Battle_PoisoningBuffFightInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battle_PoisoningBuffFightInfoPush.Merge(m, src)
}
func (m *Battle_PoisoningBuffFightInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *Battle_PoisoningBuffFightInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Battle_PoisoningBuffFightInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_Battle_PoisoningBuffFightInfoPush proto.InternalMessageInfo

func (m *Battle_PoisoningBuffFightInfoPush) GetBuffId() int64 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *Battle_PoisoningBuffFightInfoPush) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Battle_PoisoningBuffFightInfoPush) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (*Battle_PoisoningBuffFightInfoPush) XXX_MessageName() string {
	return "battle.Battle.PoisoningBuffFightInfoPush"
}
func init() {
	proto.RegisterEnum("battle.BattleErrorCode", BattleErrorCode_name, BattleErrorCode_value)
	proto.RegisterEnum("battle.Battle_RenderType", Battle_RenderType_name, Battle_RenderType_value)
	proto.RegisterEnum("battle.Battle_DamageType", Battle_DamageType_name, Battle_DamageType_value)
	proto.RegisterType((*Pos)(nil), "battle.Pos")
	proto.RegisterType((*Battle)(nil), "battle.Battle")
	proto.RegisterType((*Battle_TimePush)(nil), "battle.Battle.TimePush")
	proto.RegisterType((*Battle_Pos)(nil), "battle.Battle.Pos")
	proto.RegisterType((*Battle_Pet)(nil), "battle.Battle.Pet")
	proto.RegisterType((*Battle_KeepAlive)(nil), "battle.Battle.KeepAlive")
	proto.RegisterType((*Battle_LeaveArea)(nil), "battle.Battle.LeaveArea")
	proto.RegisterType((*Battle_EnterMapRequest)(nil), "battle.Battle.EnterMapRequest")
	proto.RegisterType((*Battle_EnterMapResponse)(nil), "battle.Battle.EnterMapResponse")
	proto.RegisterType((*Battle_MoveRequest)(nil), "battle.Battle.MoveRequest")
	proto.RegisterType((*Battle_MoveResponse)(nil), "battle.Battle.MoveResponse")
	proto.RegisterType((*Battle_ChangeRenderRequest)(nil), "battle.Battle.ChangeRenderRequest")
	proto.RegisterType((*Battle_ChangeRenderResponse)(nil), "battle.Battle.ChangeRenderResponse")
	proto.RegisterType((*Battle_AutoFightRequest)(nil), "battle.Battle.AutoFightRequest")
	proto.RegisterType((*Battle_AutoFightResponse)(nil), "battle.Battle.AutoFightResponse")
	proto.RegisterType((*Battle_PlayerPush)(nil), "battle.Battle.PlayerPush")
	proto.RegisterType((*Battle_MonsterPush)(nil), "battle.Battle.MonsterPush")
	proto.RegisterType((*Battle_MovePush)(nil), "battle.Battle.MovePush")
	proto.RegisterType((*Battle_MoveOutPush)(nil), "battle.Battle.MoveOutPush")
	proto.RegisterType((*Battle_DeadPush)(nil), "battle.Battle.DeadPush")
	proto.RegisterMapType((map[int64]int64)(nil), "battle.Battle.DeadPush.ItemsEntry")
	proto.RegisterType((*Battle_StopMovePush)(nil), "battle.Battle.StopMovePush")
	proto.RegisterType((*Battle_BuffInfo)(nil), "battle.Battle.BuffInfo")
	proto.RegisterType((*Battle_NormalFightInfoPush)(nil), "battle.Battle.NormalFightInfoPush")
	proto.RegisterType((*Battle_DamageInfo)(nil), "battle.Battle.DamageInfo")
	proto.RegisterType((*Battle_HeartFightInfoPush)(nil), "battle.Battle.HeartFightInfoPush")
	proto.RegisterType((*Battle_DodgeFightInfoPush)(nil), "battle.Battle.DodgeFightInfoPush")
	proto.RegisterType((*Battle_PoisoningBuffFightInfoPush)(nil), "battle.Battle.PoisoningBuffFightInfoPush")
}

func init() { proto.RegisterFile("proto/battle-service/battle.proto", fileDescriptor_5d67449ea2df3f8c) }

var fileDescriptor_5d67449ea2df3f8c = []byte{
	// 1489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xdf, 0x6f, 0x13, 0xc7,
	0x16, 0xf6, 0xae, 0x63, 0x7b, 0x7d, 0x12, 0x92, 0x65, 0x42, 0x88, 0x59, 0xc0, 0x90, 0xe8, 0xea,
	0xde, 0x5c, 0x10, 0x89, 0x6e, 0xb8, 0xa8, 0x94, 0xb7, 0x24, 0x4e, 0x15, 0xab, 0x24, 0x44, 0x8b,
	0x51, 0xa5, 0x4a, 0x95, 0x35, 0xf6, 0x8e, 0x9d, 0x25, 0xeb, 0x9d, 0x65, 0x77, 0x36, 0xd8, 0xaf,
	0xbc, 0x54, 0x42, 0x6a, 0x4b, 0x1f, 0x2a, 0x55, 0x02, 0xaa, 0x3e, 0x54, 0x2a, 0x55, 0x4b, 0x55,
	0xb5, 0x4a, 0xd5, 0x87, 0xaa, 0xcf, 0x3c, 0x55, 0x3c, 0xf2, 0xd8, 0x26, 0x0d, 0xb4, 0x6f, 0xfd,
	0x13, 0xaa, 0x99, 0xd9, 0x8d, 0x13, 0x13, 0x3b, 0x44, 0x91, 0x78, 0xdb, 0xf3, 0x63, 0xe6, 0x9c,
	0xf3, 0x9d, 0xf3, 0xcd, 0xcc, 0xc2, 0x98, 0xe7, 0x53, 0x46, 0xa7, 0x2a, 0x98, 0x31, 0x87, 0x5c,
	0x08, 0x88, 0xbf, 0x66, 0x57, 0x49, 0x24, 0x4e, 0x0a, 0x1b, 0x4a, 0x4b, 0xc9, 0x18, 0x95, 0xae,
	0x0d, 0x6a, 0x11, 0x27, 0x98, 0xaa, 0xe0, 0x20, 0x72, 0x30, 0x4e, 0xd4, 0x29, 0xad, 0x3b, 0x64,
	0x4a, 0x48, 0x95, 0xb0, 0x36, 0x85, 0xdd, 0x56, 0x64, 0x3a, 0xde, 0xb1, 0xa6, 0x2e, 0xf5, 0xe3,
	0x63, 0x90, 0x5c, 0xa6, 0x01, 0x1a, 0x00, 0xa5, 0x99, 0x53, 0xce, 0x2a, 0x13, 0x8a, 0xa9, 0x34,
	0xb9, 0xd4, 0xca, 0xa9, 0x52, 0x6a, 0x8d, 0x7f, 0x7f, 0x0a, 0xd2, 0xb3, 0x32, 0xf2, 0x79, 0xd0,
	0x4a, 0x76, 0x83, 0x2c, 0x87, 0xc1, 0x0a, 0x3a, 0x03, 0xfd, 0x3c, 0x4b, 0xe2, 0x97, 0x99, 0xdd,
	0x20, 0xd1, 0x62, 0x90, 0x2a, 0xee, 0x64, 0xec, 0xbf, 0xb5, 0xf1, 0xb1, 0x0a, 0xc9, 0x65, 0xc2,
	0xd0, 0x20, 0xa8, 0xb6, 0x25, 0x9c, 0xb2, 0xa6, 0x6a, 0x5b, 0xe8, 0x24, 0x64, 0xab, 0xd4, 0xad,
	0xd9, 0xf5, 0xb2, 0x6d, 0x09, 0xef, 0xa4, 0xa9, 0x49, 0x45, 0xd1, 0x42, 0x27, 0x40, 0xa3, 0xb7,
	0x5d, 0xe2, 0x73, 0x5b, 0x52, 0x2c, 0xc9, 0x08, 0xb9, 0x68, 0xa1, 0x11, 0x48, 0x57, 0x43, 0xbf,
	0xbc, 0xe2, 0xe5, 0xfa, 0xc4, 0xa2, 0x54, 0x35, 0xf4, 0x17, 0x3c, 0xae, 0x6e, 0xe0, 0x26, 0x57,
	0xa7, 0xa4, 0xba, 0x81, 0x9b, 0x0b, 0x9e, 0x88, 0x12, 0xfa, 0xe5, 0x06, 0xae, 0xdb, 0xd5, 0x5c,
	0x3a, 0x8a, 0x12, 0xfa, 0x8b, 0x5c, 0xe6, 0x46, 0xbe, 0x46, 0x1a, 0x33, 0xd2, 0xd8, 0xc0, 0x4d,
	0x69, 0xfc, 0x17, 0x24, 0x3d, 0x1a, 0xe4, 0xb4, 0xb3, 0xca, 0x44, 0xff, 0x34, 0x9a, 0x8c, 0xba,
	0x24, 0x41, 0x9a, 0x5c, 0xa6, 0x81, 0xc9, 0xcd, 0xe8, 0xff, 0x90, 0xad, 0x84, 0xb5, 0x5a, 0xd9,
	0xb1, 0x03, 0x96, 0xcb, 0x9e, 0x4d, 0x4e, 0xf4, 0x4f, 0x8f, 0x76, 0xf8, 0xce, 0x86, 0xb5, 0x5a,
	0xd1, 0xad, 0x51, 0x53, 0xe3, 0x9e, 0x57, 0xed, 0x80, 0x19, 0xfd, 0x90, 0x7d, 0x9b, 0x10, 0x6f,
	0xc6, 0xb1, 0xd7, 0x08, 0x17, 0xae, 0x12, 0xbc, 0x46, 0x66, 0x7c, 0x82, 0x8d, 0xfb, 0x0a, 0x0c,
	0xcd, 0xbb, 0x8c, 0xf8, 0x8b, 0xd8, 0x33, 0xc9, 0xad, 0x90, 0x04, 0x2c, 0xce, 0x44, 0xe9, 0x9d,
	0x89, 0x00, 0xc0, 0x8b, 0xc1, 0xcc, 0x72, 0x00, 0xbc, 0xa2, 0x85, 0x26, 0x40, 0x97, 0x0b, 0xca,
	0x51, 0x27, 0x23, 0x44, 0x93, 0xe6, 0xa0, 0xd4, 0x5f, 0x17, 0xea, 0xa2, 0x75, 0x65, 0xec, 0xce,
	0x7a, 0xee, 0x34, 0x44, 0x03, 0x88, 0x86, 0xe7, 0x7d, 0x5f, 0x86, 0x28, 0xba, 0x6b, 0xd8, 0xb1,
	0xad, 0x65, 0x1a, 0x18, 0x1e, 0xe8, 0xed, 0xe4, 0x02, 0x8f, 0xba, 0x01, 0x39, 0x5c, 0x76, 0x1d,
	0x03, 0x56, 0x7d, 0x69, 0xc0, 0x5c, 0xe8, 0x5f, 0xa4, 0x6b, 0xe4, 0x40, 0x50, 0x5c, 0x79, 0xf3,
	0xce, 0x7a, 0xee, 0x52, 0xcf, 0x4a, 0xd0, 0xf1, 0x97, 0x94, 0x0e, 0x6e, 0x11, 0xdf, 0xb8, 0x01,
	0x03, 0x32, 0xde, 0x81, 0xaa, 0xdb, 0xb7, 0x8c, 0x59, 0x18, 0x9e, 0x5b, 0xc1, 0x6e, 0x9d, 0x98,
	0xc4, 0xb5, 0x88, 0x1f, 0x97, 0x73, 0x1e, 0x92, 0xac, 0xe5, 0x89, 0xdd, 0x07, 0xa7, 0x4f, 0x74,
	0xec, 0x2e, 0x5d, 0x4b, 0x2d, 0x8f, 0x98, 0xdc, 0xcb, 0x98, 0x83, 0x63, 0xbb, 0xf7, 0x88, 0x52,
	0x3c, 0xd0, 0x26, 0xff, 0x03, 0x7d, 0x26, 0x64, 0xf4, 0x2d, 0xbb, 0xbe, 0xc2, 0xe2, 0x2c, 0x4e,
	0x03, 0xe0, 0x90, 0xd1, 0x72, 0x8d, 0x2b, 0xc5, 0x3e, 0x9a, 0x99, 0xc5, 0xb1, 0x97, 0x31, 0x0c,
	0x47, 0x77, 0x2c, 0x91, 0x41, 0x8d, 0x2d, 0x15, 0x40, 0x42, 0x26, 0x0e, 0x8a, 0x4e, 0x72, 0x23,
	0xe8, 0x73, 0x71, 0x83, 0x44, 0xcd, 0x16, 0xdf, 0x9c, 0x6d, 0x01, 0xa9, 0xb2, 0xb2, 0x30, 0x48,
	0x52, 0x6b, 0x5c, 0xb1, 0xc4, 0x8d, 0xc7, 0x20, 0xe5, 0x90, 0x35, 0xe2, 0xc4, 0xa4, 0x16, 0xc2,
	0x0e, 0xae, 0xa7, 0xf6, 0xe6, 0x7a, 0xba, 0x2b, 0xd7, 0x33, 0xbd, 0xb8, 0xae, 0xed, 0xcd, 0xf5,
	0xec, 0x01, 0xb8, 0x0e, 0xaf, 0xc8, 0xf5, 0x7d, 0x67, 0x83, 0x67, 0x16, 0xba, 0xf6, 0xad, 0x90,
	0x70, 0x76, 0x58, 0x32, 0x33, 0xa9, 0x28, 0x5a, 0xc6, 0xcf, 0x2a, 0x27, 0x80, 0x1b, 0xb0, 0x2e,
	0x40, 0xf7, 0x3c, 0x45, 0xdb, 0xf0, 0x25, 0xf7, 0x86, 0xaf, 0xaf, 0x2b, 0x7c, 0xa9, 0x5e, 0xf0,
	0xa5, 0xf7, 0x86, 0x2f, 0x73, 0x00, 0xf8, 0xb4, 0xd7, 0x03, 0xdf, 0x0b, 0x05, 0x34, 0xce, 0x67,
	0x81, 0xdd, 0x08, 0xa4, 0x69, 0xe5, 0x66, 0x79, 0x1b, 0xbf, 0x14, 0xad, 0xdc, 0x2c, 0x5a, 0x3c,
	0xfb, 0x6a, 0xe8, 0x0b, 0xf0, 0xba, 0x64, 0x5f, 0x0d, 0x7d, 0x74, 0x0e, 0xd2, 0x0c, 0xfb, 0x75,
	0xc2, 0x04, 0x96, 0x7b, 0x3b, 0x46, 0x1e, 0x7c, 0x98, 0x03, 0x8f, 0x10, 0x4b, 0xe0, 0xab, 0x98,
	0x52, 0xe0, 0xad, 0x0b, 0x9a, 0x02, 0x58, 0xc5, 0x54, 0x83, 0xa6, 0x90, 0x5b, 0x02, 0x4b, 0x2e,
	0xb7, 0x0e, 0x59, 0xe9, 0x8a, 0x3c, 0x28, 0xaf, 0x85, 0x4c, 0xd4, 0x7a, 0x12, 0xb2, 0xb4, 0x72,
	0x93, 0xd3, 0x4d, 0x94, 0x9b, 0xe4, 0x64, 0x93, 0x8a, 0x57, 0x38, 0x75, 0x7b, 0x47, 0xfa, 0x52,
	0x05, 0xad, 0x40, 0xb0, 0xb5, 0x57, 0x1c, 0xa5, 0x33, 0x0e, 0x66, 0x0c, 0x57, 0x57, 0xe5, 0xb5,
	0x23, 0x0f, 0x03, 0x88, 0x55, 0xf2, 0x9a, 0x0f, 0x56, 0x6d, 0xc7, 0x69, 0x5f, 0x4a, 0x19, 0x21,
	0x17, 0x2d, 0x74, 0x19, 0x52, 0x36, 0x23, 0x8d, 0x20, 0xd7, 0x27, 0x26, 0x65, 0xbc, 0x03, 0xee,
	0x38, 0x81, 0xc9, 0x22, 0x77, 0x9a, 0x77, 0x99, 0xdf, 0x32, 0xe5, 0x02, 0xa4, 0x43, 0xb2, 0x42,
	0x9b, 0xd1, 0x04, 0xf3, 0xcf, 0x43, 0xd6, 0x7b, 0x19, 0xa0, 0x1d, 0x84, 0xef, 0xbe, 0x4a, 0x5a,
	0xa2, 0xd4, 0xa4, 0xc9, 0x3f, 0x79, 0xb7, 0xd7, 0xb0, 0x13, 0x92, 0x88, 0x7e, 0x52, 0xb8, 0xa2,
	0x5e, 0x56, 0x8c, 0x8f, 0x14, 0x18, 0xb8, 0xce, 0xa8, 0xb7, 0xdf, 0x04, 0xb6, 0x67, 0x4b, 0xdd,
	0x77, 0xb6, 0x0e, 0x57, 0xcb, 0x0c, 0x68, 0x31, 0xc7, 0xd0, 0x28, 0x64, 0x04, 0x1f, 0xa3, 0x6c,
	0x92, 0x66, 0x9a, 0x8b, 0x45, 0x0b, 0x9d, 0x12, 0x67, 0x0a, 0xb3, 0xdd, 0x90, 0x58, 0xd1, 0x3b,
	0xae, 0xad, 0x30, 0x7e, 0x55, 0x61, 0x78, 0x89, 0xfa, 0x0d, 0xec, 0x88, 0x1b, 0x81, 0x6f, 0x25,
	0x6a, 0x1b, 0x83, 0x01, 0xd9, 0x59, 0xdb, 0xad, 0xb7, 0x2b, 0xec, 0xdf, 0xd6, 0x75, 0xb4, 0x5b,
	0xdd, 0xdd, 0xee, 0x8b, 0x90, 0xb1, 0x70, 0x03, 0xd7, 0x49, 0x90, 0x4b, 0x8a, 0x86, 0x77, 0x5e,
	0x64, 0x05, 0x61, 0x15, 0x87, 0x43, 0xec, 0x89, 0x2e, 0xc9, 0x13, 0x85, 0x2b, 0xe3, 0x39, 0xe9,
	0x7a, 0xa2, 0xb4, 0x3d, 0xd1, 0x7f, 0x60, 0x28, 0x9a, 0x41, 0xab, 0x1c, 0xe1, 0x9e, 0x12, 0xc9,
	0x0e, 0xc6, 0xea, 0x92, 0xc4, 0xfa, 0xdf, 0x30, 0xe4, 0x52, 0x56, 0xf6, 0x1c, 0xdc, 0x2a, 0xe3,
	0x2a, 0xb3, 0xa9, 0x2b, 0xe8, 0xaa, 0x99, 0x47, 0x5c, 0xca, 0xf8, 0xed, 0x37, 0x23, 0x94, 0x87,
	0xec, 0xc9, 0x63, 0x05, 0xa0, 0x5d, 0xdd, 0x0e, 0xd2, 0x58, 0x6d, 0x18, 0x63, 0xd2, 0x58, 0x45,
	0x0b, 0xfd, 0x17, 0x54, 0x4b, 0x4e, 0xca, 0x60, 0x17, 0x94, 0xc4, 0x75, 0xaf, 0x5a, 0x0c, 0x1d,
	0x87, 0xb4, 0xc4, 0x2a, 0x62, 0x57, 0x24, 0xed, 0x8a, 0xb1, 0x7d, 0x0d, 0x6c, 0xc7, 0x58, 0xf0,
	0xe4, 0x83, 0x3e, 0xb5, 0xeb, 0x41, 0x9f, 0x8e, 0x1f, 0xf4, 0xdf, 0x28, 0x80, 0x16, 0x08, 0xf6,
	0xd9, 0x81, 0xfb, 0xdf, 0x51, 0x9a, 0xfa, 0x52, 0x69, 0x3d, 0xce, 0x83, 0x76, 0x29, 0x7d, 0xbd,
	0x4a, 0x49, 0x75, 0x96, 0x62, 0x04, 0x80, 0x0a, 0xd4, 0xaa, 0x93, 0xd7, 0x99, 0xad, 0xf1, 0x1e,
	0x18, 0xcb, 0xd4, 0x0e, 0xa8, 0x6b, 0xbb, 0x75, 0x3e, 0x82, 0xbb, 0x83, 0x77, 0x65, 0x9e, 0xbc,
	0xdd, 0xd5, 0xed, 0xdb, 0xbd, 0x4b, 0xff, 0xc6, 0xa7, 0x00, 0xda, 0x0f, 0x3b, 0x74, 0x04, 0xb2,
	0x66, 0xe9, 0x86, 0xbb, 0xea, 0xd2, 0xdb, 0xae, 0x9e, 0x40, 0x1a, 0xf4, 0x99, 0xa5, 0x8b, 0x05,
	0x5d, 0x91, 0x5f, 0xd3, 0x05, 0x5d, 0x1d, 0xbf, 0x1e, 0x8f, 0x98, 0x58, 0x30, 0x00, 0x5a, 0xa1,
	0x24, 0x39, 0xac, 0x27, 0x50, 0x3f, 0x64, 0x0a, 0x25, 0x01, 0x91, 0xae, 0xa0, 0x41, 0x80, 0x42,
	0x69, 0xce, 0xb7, 0x99, 0x5d, 0xc5, 0x8e, 0xae, 0x4a, 0xe3, 0x32, 0xf6, 0xfd, 0x96, 0x9e, 0xe4,
	0x81, 0x0a, 0xa5, 0x77, 0xb0, 0x6f, 0x5d, 0xab, 0xd5, 0xf4, 0xbe, 0x73, 0x5f, 0x2b, 0x30, 0x24,
	0xe7, 0x6e, 0xde, 0xf7, 0xa9, 0x3f, 0x47, 0x2d, 0xfe, 0x18, 0xdd, 0xeb, 0xb9, 0xad, 0x27, 0x0c,
	0x74, 0x77, 0x3d, 0x37, 0x88, 0x06, 0xfe, 0x7a, 0xf8, 0xd9, 0xf3, 0x1f, 0x3e, 0xd9, 0x7a, 0x78,
	0xef, 0xf9, 0xe7, 0xef, 0xa3, 0x37, 0xa0, 0xcb, 0x33, 0x5c, 0x57, 0x8c, 0x93, 0x77, 0xd7, 0x73,
	0xa3, 0x68, 0xe4, 0xc5, 0x87, 0x5f, 0x6d, 0x7d, 0xfb, 0xe3, 0x1f, 0x3f, 0x7d, 0xb0, 0xf5, 0xe0,
	0xd1, 0xf3, 0xc7, 0x5f, 0x6c, 0x3d, 0xf8, 0x6e, 0xeb, 0xfe, 0x2f, 0x68, 0x1a, 0x46, 0xe7, 0x7d,
	0x7f, 0x89, 0xdc, 0x96, 0x6b, 0x17, 0xb1, 0xb7, 0x44, 0xd9, 0x7c, 0xd3, 0x0e, 0x98, 0xae, 0x1a,
	0x23, 0x77, 0xd7, 0x73, 0x47, 0xd1, 0x90, 0x74, 0xe5, 0x2b, 0x1f, 0x7f, 0xba, 0xf5, 0xe0, 0xd1,
	0xec, 0xe2, 0xb3, 0xdf, 0xf3, 0x89, 0x47, 0x1b, 0x79, 0xe5, 0xc9, 0x46, 0x5e, 0x79, 0xba, 0x91,
	0x57, 0x7e, 0xdb, 0xc8, 0x2b, 0x7f, 0x6e, 0xe4, 0x13, 0x7f, 0x6f, 0xe4, 0x95, 0x7b, 0x9b, 0xf9,
	0xc4, 0x93, 0xcd, 0xbc, 0xf2, 0x74, 0x33, 0x9f, 0x78, 0xb6, 0x99, 0x4f, 0xbc, 0x7b, 0xa6, 0x4a,
	0x6d, 0xf7, 0x82, 0xa4, 0xf0, 0x54, 0x95, 0x36, 0x1a, 0xd4, 0x9d, 0xda, 0xf9, 0xf7, 0x5e, 0x49,
	0x0b, 0xe9, 0xe2, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0x72, 0x1c, 0xbd, 0xd4, 0x0f, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPos.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_TimePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_Pos.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_Pet.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_KeepAlive.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_LeaveArea.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_EnterMapRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_EnterMapResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_MoveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_MoveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_ChangeRenderRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_ChangeRenderResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_AutoFightRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_AutoFightResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_PlayerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_MonsterPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_MovePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_MoveOutPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_DeadPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_StopMovePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_BuffInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_NormalFightInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_DamageInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_HeartFightInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_DodgeFightInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattle_PoisoningBuffFightInfoPush.Get().(proto.Message)
	})
}

var poolPos = &sync.Pool{New: func() interface{} { return &Pos{} }}

func (m *Pos) ReleasePool() { m.Reset(); poolPos.Put(m); m = nil }

var poolBattle = &sync.Pool{New: func() interface{} { return &Battle{} }}

func (m *Battle) ReleasePool() { m.Reset(); poolBattle.Put(m); m = nil }

var poolBattle_TimePush = &sync.Pool{New: func() interface{} { return &Battle_TimePush{} }}

func (m *Battle_TimePush) ReleasePool() { m.Reset(); poolBattle_TimePush.Put(m); m = nil }

var poolBattle_Pos = &sync.Pool{New: func() interface{} { return &Battle_Pos{} }}

func (m *Battle_Pos) ReleasePool() { m.Reset(); poolBattle_Pos.Put(m); m = nil }

var poolBattle_Pet = &sync.Pool{New: func() interface{} { return &Battle_Pet{} }}

func (m *Battle_Pet) ReleasePool() { m.Reset(); poolBattle_Pet.Put(m); m = nil }

var poolBattle_KeepAlive = &sync.Pool{New: func() interface{} { return &Battle_KeepAlive{} }}

func (m *Battle_KeepAlive) ReleasePool() { m.Reset(); poolBattle_KeepAlive.Put(m); m = nil }

var poolBattle_LeaveArea = &sync.Pool{New: func() interface{} { return &Battle_LeaveArea{} }}

func (m *Battle_LeaveArea) ReleasePool() { m.Reset(); poolBattle_LeaveArea.Put(m); m = nil }

var poolBattle_EnterMapRequest = &sync.Pool{New: func() interface{} { return &Battle_EnterMapRequest{} }}

func (m *Battle_EnterMapRequest) ReleasePool() { m.Reset(); poolBattle_EnterMapRequest.Put(m); m = nil }

var poolBattle_EnterMapResponse = &sync.Pool{New: func() interface{} { return &Battle_EnterMapResponse{} }}

func (m *Battle_EnterMapResponse) ReleasePool() {
	m.Reset()
	poolBattle_EnterMapResponse.Put(m)
	m = nil
}

var poolBattle_MoveRequest = &sync.Pool{New: func() interface{} { return &Battle_MoveRequest{} }}

func (m *Battle_MoveRequest) ReleasePool() { m.Reset(); poolBattle_MoveRequest.Put(m); m = nil }

var poolBattle_MoveResponse = &sync.Pool{New: func() interface{} { return &Battle_MoveResponse{} }}

func (m *Battle_MoveResponse) ReleasePool() { m.Reset(); poolBattle_MoveResponse.Put(m); m = nil }

var poolBattle_ChangeRenderRequest = &sync.Pool{New: func() interface{} { return &Battle_ChangeRenderRequest{} }}

func (m *Battle_ChangeRenderRequest) ReleasePool() {
	m.Reset()
	poolBattle_ChangeRenderRequest.Put(m)
	m = nil
}

var poolBattle_ChangeRenderResponse = &sync.Pool{New: func() interface{} { return &Battle_ChangeRenderResponse{} }}

func (m *Battle_ChangeRenderResponse) ReleasePool() {
	m.Reset()
	poolBattle_ChangeRenderResponse.Put(m)
	m = nil
}

var poolBattle_AutoFightRequest = &sync.Pool{New: func() interface{} { return &Battle_AutoFightRequest{} }}

func (m *Battle_AutoFightRequest) ReleasePool() {
	m.Reset()
	poolBattle_AutoFightRequest.Put(m)
	m = nil
}

var poolBattle_AutoFightResponse = &sync.Pool{New: func() interface{} { return &Battle_AutoFightResponse{} }}

func (m *Battle_AutoFightResponse) ReleasePool() {
	m.Reset()
	poolBattle_AutoFightResponse.Put(m)
	m = nil
}

var poolBattle_PlayerPush = &sync.Pool{New: func() interface{} { return &Battle_PlayerPush{} }}

func (m *Battle_PlayerPush) ReleasePool() { m.Reset(); poolBattle_PlayerPush.Put(m); m = nil }

var poolBattle_MonsterPush = &sync.Pool{New: func() interface{} { return &Battle_MonsterPush{} }}

func (m *Battle_MonsterPush) ReleasePool() { m.Reset(); poolBattle_MonsterPush.Put(m); m = nil }

var poolBattle_MovePush = &sync.Pool{New: func() interface{} { return &Battle_MovePush{} }}

func (m *Battle_MovePush) ReleasePool() { m.Reset(); poolBattle_MovePush.Put(m); m = nil }

var poolBattle_MoveOutPush = &sync.Pool{New: func() interface{} { return &Battle_MoveOutPush{} }}

func (m *Battle_MoveOutPush) ReleasePool() { m.Reset(); poolBattle_MoveOutPush.Put(m); m = nil }

var poolBattle_DeadPush = &sync.Pool{New: func() interface{} { return &Battle_DeadPush{} }}

func (m *Battle_DeadPush) ReleasePool() { m.Reset(); poolBattle_DeadPush.Put(m); m = nil }

var poolBattle_StopMovePush = &sync.Pool{New: func() interface{} { return &Battle_StopMovePush{} }}

func (m *Battle_StopMovePush) ReleasePool() { m.Reset(); poolBattle_StopMovePush.Put(m); m = nil }

var poolBattle_BuffInfo = &sync.Pool{New: func() interface{} { return &Battle_BuffInfo{} }}

func (m *Battle_BuffInfo) ReleasePool() { m.Reset(); poolBattle_BuffInfo.Put(m); m = nil }

var poolBattle_NormalFightInfoPush = &sync.Pool{New: func() interface{} { return &Battle_NormalFightInfoPush{} }}

func (m *Battle_NormalFightInfoPush) ReleasePool() {
	m.Reset()
	poolBattle_NormalFightInfoPush.Put(m)
	m = nil
}

var poolBattle_DamageInfo = &sync.Pool{New: func() interface{} { return &Battle_DamageInfo{} }}

func (m *Battle_DamageInfo) ReleasePool() { m.Reset(); poolBattle_DamageInfo.Put(m); m = nil }

var poolBattle_HeartFightInfoPush = &sync.Pool{New: func() interface{} { return &Battle_HeartFightInfoPush{} }}

func (m *Battle_HeartFightInfoPush) ReleasePool() {
	m.Reset()
	poolBattle_HeartFightInfoPush.Put(m)
	m = nil
}

var poolBattle_DodgeFightInfoPush = &sync.Pool{New: func() interface{} { return &Battle_DodgeFightInfoPush{} }}

func (m *Battle_DodgeFightInfoPush) ReleasePool() {
	m.Reset()
	poolBattle_DodgeFightInfoPush.Put(m)
	m = nil
}

var poolBattle_PoisoningBuffFightInfoPush = &sync.Pool{New: func() interface{} { return &Battle_PoisoningBuffFightInfoPush{} }}

func (m *Battle_PoisoningBuffFightInfoPush) ReleasePool() {
	m.Reset()
	poolBattle_PoisoningBuffFightInfoPush.Put(m)
	m = nil
}
func (x BattleErrorCode) String() string {
	s, ok := BattleErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Battle_RenderType) String() string {
	s, ok := Battle_RenderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Battle_DamageType) String() string {
	s, ok := Battle_DamageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Pos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pos)
	if !ok {
		that2, ok := that.(Pos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Battle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle)
	if !ok {
		that2, ok := that.(Battle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Battle_TimePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_TimePush)
	if !ok {
		that2, ok := that.(Battle_TimePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *Battle_Pos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_Pos)
	if !ok {
		that2, ok := that.(Battle_Pos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Battle_Pet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_Pet)
	if !ok {
		that2, ok := that.(Battle_Pet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.CurHp != that1.CurHp {
		return false
	}
	if this.MaxHp != that1.MaxHp {
		return false
	}
	if this.CurMagic != that1.CurMagic {
		return false
	}
	if this.MaxMagic != that1.MaxMagic {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if len(this.BuffList) != len(that1.BuffList) {
		return false
	}
	for i := range this.BuffList {
		if !this.BuffList[i].Equal(that1.BuffList[i]) {
			return false
		}
	}
	return true
}
func (this *Battle_KeepAlive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_KeepAlive)
	if !ok {
		that2, ok := that.(Battle_KeepAlive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Battle_LeaveArea) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_LeaveArea)
	if !ok {
		that2, ok := that.(Battle_LeaveArea)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Battle_EnterMapRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_EnterMapRequest)
	if !ok {
		that2, ok := that.(Battle_EnterMapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *Battle_EnterMapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_EnterMapResponse)
	if !ok {
		that2, ok := that.(Battle_EnterMapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *Battle_MoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_MoveRequest)
	if !ok {
		that2, ok := that.(Battle_MoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	return true
}
func (this *Battle_MoveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_MoveResponse)
	if !ok {
		that2, ok := that.(Battle_MoveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *Battle_ChangeRenderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_ChangeRenderRequest)
	if !ok {
		that2, ok := that.(Battle_ChangeRenderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Battle_ChangeRenderResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_ChangeRenderResponse)
	if !ok {
		that2, ok := that.(Battle_ChangeRenderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Battle_AutoFightRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_AutoFightRequest)
	if !ok {
		that2, ok := that.(Battle_AutoFightRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AutoFight != that1.AutoFight {
		return false
	}
	return true
}
func (this *Battle_AutoFightResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_AutoFightResponse)
	if !ok {
		that2, ok := that.(Battle_AutoFightResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Battle_PlayerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_PlayerPush)
	if !ok {
		that2, ok := that.(Battle_PlayerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SectName != that1.SectName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.CurHp != that1.CurHp {
		return false
	}
	if this.MaxHp != that1.MaxHp {
		return false
	}
	if this.CurMagic != that1.CurMagic {
		return false
	}
	if this.MaxMagic != that1.MaxMagic {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if len(this.BuffList) != len(that1.BuffList) {
		return false
	}
	for i := range this.BuffList {
		if !this.BuffList[i].Equal(that1.BuffList[i]) {
			return false
		}
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *Battle_MonsterPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_MonsterPush)
	if !ok {
		that2, ok := that.(Battle_MonsterPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.CurHp != that1.CurHp {
		return false
	}
	if this.MaxHp != that1.MaxHp {
		return false
	}
	if this.CurMagic != that1.CurMagic {
		return false
	}
	if this.MaxMagic != that1.MaxMagic {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if len(this.BuffList) != len(that1.BuffList) {
		return false
	}
	for i := range this.BuffList {
		if !this.BuffList[i].Equal(that1.BuffList[i]) {
			return false
		}
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *Battle_MovePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_MovePush)
	if !ok {
		that2, ok := that.(Battle_MovePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Cur.Equal(that1.Cur) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.Sx != that1.Sx {
		return false
	}
	if this.Sy != that1.Sy {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *Battle_MoveOutPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_MoveOutPush)
	if !ok {
		that2, ok := that.(Battle_MoveOutPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ObjectId) != len(that1.ObjectId) {
		return false
	}
	for i := range this.ObjectId {
		if this.ObjectId[i] != that1.ObjectId[i] {
			return false
		}
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *Battle_DeadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_DeadPush)
	if !ok {
		that2, ok := that.(Battle_DeadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectId != that1.ObjectId {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	if this.Box != that1.Box {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *Battle_StopMovePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_StopMovePush)
	if !ok {
		that2, ok := that.(Battle_StopMovePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *Battle_BuffInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_BuffInfo)
	if !ok {
		that2, ok := that.(Battle_BuffInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BuffId != that1.BuffId {
		return false
	}
	if this.Continued != that1.Continued {
		return false
	}
	return true
}
func (this *Battle_NormalFightInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_NormalFightInfoPush)
	if !ok {
		that2, ok := that.(Battle_NormalFightInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackingId != that1.AttackingId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if len(this.Damages) != len(that1.Damages) {
		return false
	}
	for i := range this.Damages {
		if !this.Damages[i].Equal(that1.Damages[i]) {
			return false
		}
	}
	if len(this.BuffInfos) != len(that1.BuffInfos) {
		return false
	}
	for i := range this.BuffInfos {
		if !this.BuffInfos[i].Equal(that1.BuffInfos[i]) {
			return false
		}
	}
	if this.AttackedTarget != that1.AttackedTarget {
		return false
	}
	if this.NotPlayAction != that1.NotPlayAction {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *Battle_DamageInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_DamageInfo)
	if !ok {
		that2, ok := that.(Battle_DamageInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackedId != that1.AttackedId {
		return false
	}
	if this.Dt != that1.Dt {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if this.AttackedHp != that1.AttackedHp {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Battle_HeartFightInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_HeartFightInfoPush)
	if !ok {
		that2, ok := that.(Battle_HeartFightInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackingId != that1.AttackingId {
		return false
	}
	if this.AttackedId != that1.AttackedId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if this.AttackedHp != that1.AttackedHp {
		return false
	}
	return true
}
func (this *Battle_DodgeFightInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_DodgeFightInfoPush)
	if !ok {
		that2, ok := that.(Battle_DodgeFightInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackingId != that1.AttackingId {
		return false
	}
	if this.AttackedId != that1.AttackedId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	return true
}
func (this *Battle_PoisoningBuffFightInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Battle_PoisoningBuffFightInfoPush)
	if !ok {
		that2, ok := that.(Battle_PoisoningBuffFightInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BuffId != that1.BuffId {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	return true
}
func (m *Pos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x11
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Battle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Battle_TimePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_TimePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_TimePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Battle_Pos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_Pos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_Pos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x11
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Battle_Pet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_Pet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_Pet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuffList) > 0 {
		for iNdEx := len(m.BuffList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuffList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MaxMagic != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MaxMagic))
		i--
		dAtA[i] = 0x38
	}
	if m.CurMagic != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.CurMagic))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MaxHp))
		i--
		dAtA[i] = 0x28
	}
	if m.CurHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.CurHp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ConfigId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_KeepAlive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_KeepAlive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_KeepAlive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Battle_LeaveArea) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_LeaveArea) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_LeaveArea) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Battle_EnterMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_EnterMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_EnterMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_EnterMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_EnterMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_EnterMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_MoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_MoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_MoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_MoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_MoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_MoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_ChangeRenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_ChangeRenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_ChangeRenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Battle_ChangeRenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_ChangeRenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_ChangeRenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Battle_AutoFightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_AutoFightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_AutoFightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoFight {
		i--
		if m.AutoFight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Battle_AutoFightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_AutoFightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_AutoFightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Battle_PlayerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_PlayerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_PlayerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.BuffList) > 0 {
		for iNdEx := len(m.BuffList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuffList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.MaxMagic != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MaxMagic))
		i--
		dAtA[i] = 0x40
	}
	if m.CurMagic != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.CurMagic))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MaxHp))
		i--
		dAtA[i] = 0x30
	}
	if m.CurHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.CurHp))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SectName) > 0 {
		i -= len(m.SectName)
		copy(dAtA[i:], m.SectName)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.SectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_MonsterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_MonsterPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_MonsterPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.BuffList) > 0 {
		for iNdEx := len(m.BuffList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuffList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxMagic != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MaxMagic))
		i--
		dAtA[i] = 0x30
	}
	if m.CurMagic != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.CurMagic))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MaxHp))
		i--
		dAtA[i] = 0x20
	}
	if m.CurHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.CurHp))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfigId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_MovePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_MovePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_MovePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Sy != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sy))))
		i--
		dAtA[i] = 0x31
	}
	if m.Sx != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sx))))
		i--
		dAtA[i] = 0x29
	}
	if m.Speed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i--
		dAtA[i] = 0x21
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cur != nil {
		{
			size, err := m.Cur.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_MoveOutPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_MoveOutPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_MoveOutPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.ObjectId) > 0 {
		for iNdEx := len(m.ObjectId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjectId[iNdEx])
			copy(dAtA[i:], m.ObjectId[iNdEx])
			i = encodeVarintBattle(dAtA, i, uint64(len(m.ObjectId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Battle_DeadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_DeadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_DeadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Box != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Box))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SkillId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_StopMovePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_StopMovePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_StopMovePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_BuffInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_BuffInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_BuffInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Continued != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Continued))))
		i--
		dAtA[i] = 0x11
	}
	if m.BuffId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BuffId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Battle_NormalFightInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_NormalFightInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_NormalFightInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.NotPlayAction {
		i--
		if m.NotPlayAction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.AttackedTarget) > 0 {
		i -= len(m.AttackedTarget)
		copy(dAtA[i:], m.AttackedTarget)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackedTarget)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuffInfos) > 0 {
		for iNdEx := len(m.BuffInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuffInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Damages) > 0 {
		for iNdEx := len(m.Damages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Damages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SkillId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttackingId) > 0 {
		i -= len(m.AttackingId)
		copy(dAtA[i:], m.AttackingId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_DamageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_DamageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_DamageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x31
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x29
	}
	if m.AttackedHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.AttackedHp))
		i--
		dAtA[i] = 0x20
	}
	if m.Damage != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x18
	}
	if m.Dt != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Dt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttackedId) > 0 {
		i -= len(m.AttackedId)
		copy(dAtA[i:], m.AttackedId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_HeartFightInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_HeartFightInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_HeartFightInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttackedHp != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.AttackedHp))
		i--
		dAtA[i] = 0x28
	}
	if m.Damage != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AttackedId) > 0 {
		i -= len(m.AttackedId)
		copy(dAtA[i:], m.AttackedId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackedId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackingId) > 0 {
		i -= len(m.AttackingId)
		copy(dAtA[i:], m.AttackingId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_DodgeFightInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_DodgeFightInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_DodgeFightInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkillId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AttackedId) > 0 {
		i -= len(m.AttackedId)
		copy(dAtA[i:], m.AttackedId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackedId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackingId) > 0 {
		i -= len(m.AttackingId)
		copy(dAtA[i:], m.AttackingId)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.AttackingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Battle_PoisoningBuffFightInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Battle_PoisoningBuffFightInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Battle_PoisoningBuffFightInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Damage != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.BuffId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BuffId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBattle(dAtA []byte, offset int, v uint64) int {
	offset -= sovBattle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Pos) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.X)) > 0.000001 {
		w.RawByte('"')
		w.RawString("x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.X))
		needWriteComma = true
	}
	if math.Abs(float64(m.Y)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Y))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Battle_TimePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_Pos) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.X)) > 0.000001 {
		w.RawByte('"')
		w.RawString("x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.X))
		needWriteComma = true
	}
	if math.Abs(float64(m.Y)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Y))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_Pet) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.OwnerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.CurHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurHp))
		needWriteComma = true
	}
	if m.MaxHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxHp))
		needWriteComma = true
	}
	if m.CurMagic != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_magic")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurMagic))
		needWriteComma = true
	}
	if m.MaxMagic != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_magic")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxMagic))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffList == nil {
		w.RawString("null")
	} else if len(m.BuffList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BuffList {
			v.JsonBytes(w)
			if i != len(m.BuffList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_KeepAlive) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Battle_LeaveArea) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Battle_EnterMapRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.MapId)
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_EnterMapResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.MapId)
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_MoveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_MoveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_ChangeRenderRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_ChangeRenderResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_AutoFightRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AutoFight {
		w.RawByte('"')
		w.RawString("auto_fight")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.AutoFight)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_AutoFightResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Battle_PlayerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.SectName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sect_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SectName)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.CurHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurHp))
		needWriteComma = true
	}
	if m.MaxHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxHp))
		needWriteComma = true
	}
	if m.CurMagic != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_magic")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurMagic))
		needWriteComma = true
	}
	if m.MaxMagic != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_magic")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxMagic))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffList == nil {
		w.RawString("null")
	} else if len(m.BuffList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BuffList {
			v.JsonBytes(w)
			if i != len(m.BuffList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_MonsterPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.CurHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurHp))
		needWriteComma = true
	}
	if m.MaxHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxHp))
		needWriteComma = true
	}
	if m.CurMagic != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_magic")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurMagic))
		needWriteComma = true
	}
	if m.MaxMagic != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_magic")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxMagic))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffList == nil {
		w.RawString("null")
	} else if len(m.BuffList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BuffList {
			v.JsonBytes(w)
			if i != len(m.BuffList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_MovePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("cur")
	w.RawByte('"')
	w.RawByte(':')
	m.Cur.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("target")
	w.RawByte('"')
	w.RawByte(':')
	m.Target.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if math.Abs(float64(m.Sx)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sx")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Sx))
		needWriteComma = true
	}
	if math.Abs(float64(m.Sy)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sy")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Sy))
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_MoveOutPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("object_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.ObjectId == nil {
		w.RawString("null")
	} else if len(m.ObjectId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ObjectId {
			w.String(v)
			if i != len(m.ObjectId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_DeadPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjectId != "" {
		w.RawByte('"')
		w.RawString("object_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjectId)
		needWriteComma = true
	}
	if m.AttackerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Box != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("box")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Box))
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_StopMovePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("target")
	w.RawByte('"')
	w.RawByte(':')
	m.Target.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_BuffInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BuffId != 0 {
		w.RawByte('"')
		w.RawString("buff_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuffId))
		needWriteComma = true
	}
	if math.Abs(float64(m.Continued)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("continued")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Continued))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_NormalFightInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackingId != "" {
		w.RawByte('"')
		w.RawString("attacking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackingId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("damages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Damages == nil {
		w.RawString("null")
	} else if len(m.Damages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Damages {
			v.JsonBytes(w)
			if i != len(m.Damages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buffInfos")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffInfos == nil {
		w.RawString("null")
	} else if len(m.BuffInfos) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BuffInfos {
			v.JsonBytes(w)
			if i != len(m.BuffInfos)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.AttackedTarget != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacked_target")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackedTarget)
		needWriteComma = true
	}
	if m.NotPlayAction {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("not_play_action")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.NotPlayAction)
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_DamageInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackedId != "" {
		w.RawByte('"')
		w.RawString("attacked_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackedId)
		needWriteComma = true
	}
	if m.Dt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Dt))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if m.AttackedHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacked_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackedHp))
		needWriteComma = true
	}
	if math.Abs(float64(m.X)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.X))
		needWriteComma = true
	}
	if math.Abs(float64(m.Y)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Y))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_HeartFightInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackingId != "" {
		w.RawByte('"')
		w.RawString("attacking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackingId)
		needWriteComma = true
	}
	if m.AttackedId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacked_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackedId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if m.AttackedHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacked_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackedHp))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_DodgeFightInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackingId != "" {
		w.RawByte('"')
		w.RawString("attacking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackingId)
		needWriteComma = true
	}
	if m.AttackedId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacked_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackedId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Battle_PoisoningBuffFightInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BuffId != 0 {
		w.RawByte('"')
		w.RawString("buff_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuffId))
		needWriteComma = true
	}
	if m.Id != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Pos) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Pos) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Pos) GoString() string {
	return m.String()
}

func (m *Battle) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle) GoString() string {
	return m.String()
}

func (m *Battle_TimePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_TimePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_TimePush) GoString() string {
	return m.String()
}

func (m *Battle_Pos) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_Pos) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_Pos) GoString() string {
	return m.String()
}

func (m *Battle_Pet) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_Pet) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_Pet) GoString() string {
	return m.String()
}

func (m *Battle_KeepAlive) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_KeepAlive) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_KeepAlive) GoString() string {
	return m.String()
}

func (m *Battle_LeaveArea) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_LeaveArea) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_LeaveArea) GoString() string {
	return m.String()
}

func (m *Battle_EnterMapRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_EnterMapRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_EnterMapRequest) GoString() string {
	return m.String()
}

func (m *Battle_EnterMapResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_EnterMapResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_EnterMapResponse) GoString() string {
	return m.String()
}

func (m *Battle_MoveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_MoveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_MoveRequest) GoString() string {
	return m.String()
}

func (m *Battle_MoveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_MoveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_MoveResponse) GoString() string {
	return m.String()
}

func (m *Battle_ChangeRenderRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_ChangeRenderRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_ChangeRenderRequest) GoString() string {
	return m.String()
}

func (m *Battle_ChangeRenderResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_ChangeRenderResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_ChangeRenderResponse) GoString() string {
	return m.String()
}

func (m *Battle_AutoFightRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_AutoFightRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_AutoFightRequest) GoString() string {
	return m.String()
}

func (m *Battle_AutoFightResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_AutoFightResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_AutoFightResponse) GoString() string {
	return m.String()
}

func (m *Battle_PlayerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_PlayerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_PlayerPush) GoString() string {
	return m.String()
}

func (m *Battle_MonsterPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_MonsterPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_MonsterPush) GoString() string {
	return m.String()
}

func (m *Battle_MovePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_MovePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_MovePush) GoString() string {
	return m.String()
}

func (m *Battle_MoveOutPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_MoveOutPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_MoveOutPush) GoString() string {
	return m.String()
}

func (m *Battle_DeadPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_DeadPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_DeadPush) GoString() string {
	return m.String()
}

func (m *Battle_StopMovePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_StopMovePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_StopMovePush) GoString() string {
	return m.String()
}

func (m *Battle_BuffInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_BuffInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_BuffInfo) GoString() string {
	return m.String()
}

func (m *Battle_NormalFightInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_NormalFightInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_NormalFightInfoPush) GoString() string {
	return m.String()
}

func (m *Battle_DamageInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_DamageInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_DamageInfo) GoString() string {
	return m.String()
}

func (m *Battle_HeartFightInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_HeartFightInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_HeartFightInfoPush) GoString() string {
	return m.String()
}

func (m *Battle_DodgeFightInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_DodgeFightInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_DodgeFightInfoPush) GoString() string {
	return m.String()
}

func (m *Battle_PoisoningBuffFightInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Battle_PoisoningBuffFightInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Battle_PoisoningBuffFightInfoPush) GoString() string {
	return m.String()
}

func (m *Pos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	return n
}

func (m *Battle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Battle_TimePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerTime != 0 {
		n += 9
	}
	return n
}

func (m *Battle_Pos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	return n
}

func (m *Battle_Pet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovBattle(uint64(m.ConfigId))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.CurHp != 0 {
		n += 1 + sovBattle(uint64(m.CurHp))
	}
	if m.MaxHp != 0 {
		n += 1 + sovBattle(uint64(m.MaxHp))
	}
	if m.CurMagic != 0 {
		n += 1 + sovBattle(uint64(m.CurMagic))
	}
	if m.MaxMagic != 0 {
		n += 1 + sovBattle(uint64(m.MaxMagic))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if len(m.BuffList) > 0 {
		for _, e := range m.BuffList {
			l = e.Size()
			n += 1 + l + sovBattle(uint64(l))
		}
	}
	return n
}

func (m *Battle_KeepAlive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Battle_LeaveArea) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Battle_EnterMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovBattle(uint64(m.BattleServerId))
	}
	return n
}

func (m *Battle_EnterMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *Battle_MoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	return n
}

func (m *Battle_MoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *Battle_ChangeRenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovBattle(uint64(m.Typ))
	}
	return n
}

func (m *Battle_ChangeRenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovBattle(uint64(m.Typ))
	}
	return n
}

func (m *Battle_AutoFightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoFight {
		n += 2
	}
	return n
}

func (m *Battle_AutoFightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Battle_PlayerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	l = len(m.SectName)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovBattle(uint64(m.Level))
	}
	if m.CurHp != 0 {
		n += 1 + sovBattle(uint64(m.CurHp))
	}
	if m.MaxHp != 0 {
		n += 1 + sovBattle(uint64(m.MaxHp))
	}
	if m.CurMagic != 0 {
		n += 1 + sovBattle(uint64(m.CurMagic))
	}
	if m.MaxMagic != 0 {
		n += 1 + sovBattle(uint64(m.MaxMagic))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if len(m.BuffList) > 0 {
		for _, e := range m.BuffList {
			l = e.Size()
			n += 1 + l + sovBattle(uint64(l))
		}
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *Battle_MonsterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovBattle(uint64(m.ConfigId))
	}
	if m.CurHp != 0 {
		n += 1 + sovBattle(uint64(m.CurHp))
	}
	if m.MaxHp != 0 {
		n += 1 + sovBattle(uint64(m.MaxHp))
	}
	if m.CurMagic != 0 {
		n += 1 + sovBattle(uint64(m.CurMagic))
	}
	if m.MaxMagic != 0 {
		n += 1 + sovBattle(uint64(m.MaxMagic))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if len(m.BuffList) > 0 {
		for _, e := range m.BuffList {
			l = e.Size()
			n += 1 + l + sovBattle(uint64(l))
		}
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *Battle_MovePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Cur != nil {
		l = m.Cur.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Speed != 0 {
		n += 9
	}
	if m.Sx != 0 {
		n += 9
	}
	if m.Sy != 0 {
		n += 9
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *Battle_MoveOutPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObjectId) > 0 {
		for _, s := range m.ObjectId {
			l = len(s)
			n += 1 + l + sovBattle(uint64(l))
		}
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *Battle_DeadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovBattle(uint64(m.SkillId))
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBattle(uint64(k)) + 1 + sovBattle(uint64(v))
			n += mapEntrySize + 1 + sovBattle(uint64(mapEntrySize))
		}
	}
	if m.Box != 0 {
		n += 1 + sovBattle(uint64(m.Box))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *Battle_StopMovePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *Battle_BuffInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffId != 0 {
		n += 1 + sovBattle(uint64(m.BuffId))
	}
	if m.Continued != 0 {
		n += 9
	}
	return n
}

func (m *Battle_NormalFightInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackingId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovBattle(uint64(m.SkillId))
	}
	if len(m.Damages) > 0 {
		for _, e := range m.Damages {
			l = e.Size()
			n += 1 + l + sovBattle(uint64(l))
		}
	}
	if len(m.BuffInfos) > 0 {
		for _, e := range m.BuffInfos {
			l = e.Size()
			n += 1 + l + sovBattle(uint64(l))
		}
	}
	l = len(m.AttackedTarget)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.NotPlayAction {
		n += 2
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *Battle_DamageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackedId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Dt != 0 {
		n += 1 + sovBattle(uint64(m.Dt))
	}
	if m.Damage != 0 {
		n += 1 + sovBattle(uint64(m.Damage))
	}
	if m.AttackedHp != 0 {
		n += 1 + sovBattle(uint64(m.AttackedHp))
	}
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	return n
}

func (m *Battle_HeartFightInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackingId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	l = len(m.AttackedId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovBattle(uint64(m.SkillId))
	}
	if m.Damage != 0 {
		n += 1 + sovBattle(uint64(m.Damage))
	}
	if m.AttackedHp != 0 {
		n += 1 + sovBattle(uint64(m.AttackedHp))
	}
	return n
}

func (m *Battle_DodgeFightInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackingId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	l = len(m.AttackedId)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovBattle(uint64(m.SkillId))
	}
	return n
}

func (m *Battle_PoisoningBuffFightInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffId != 0 {
		n += 1 + sovBattle(uint64(m.BuffId))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Damage != 0 {
		n += 1 + sovBattle(uint64(m.Damage))
	}
	return n
}

func sovBattle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBattle(x uint64) (n int) {
	return sovBattle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Battle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Battle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_TimePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_Pos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_Pet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurHp", wireType)
			}
			m.CurHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHp", wireType)
			}
			m.MaxHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurMagic", wireType)
			}
			m.CurMagic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurMagic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMagic", wireType)
			}
			m.MaxMagic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMagic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Battle_Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuffList = append(m.BuffList, &Battle_BuffInfo{})
			if err := m.BuffList[len(m.BuffList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_KeepAlive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeepAlive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeepAlive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_LeaveArea) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveArea: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveArea: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_EnterMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Battle_Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_EnterMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Battle_Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_MoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Battle_Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_MoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Battle_Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_ChangeRenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeRenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeRenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= Battle_RenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_ChangeRenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeRenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeRenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= Battle_RenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_AutoFightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoFightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoFightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoFight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoFight = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_AutoFightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoFightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoFightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_PlayerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurHp", wireType)
			}
			m.CurHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHp", wireType)
			}
			m.MaxHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurMagic", wireType)
			}
			m.CurMagic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurMagic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMagic", wireType)
			}
			m.MaxMagic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMagic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Battle_Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuffList = append(m.BuffList, &Battle_BuffInfo{})
			if err := m.BuffList[len(m.BuffList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_MonsterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurHp", wireType)
			}
			m.CurHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHp", wireType)
			}
			m.MaxHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurMagic", wireType)
			}
			m.CurMagic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurMagic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMagic", wireType)
			}
			m.MaxMagic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMagic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Battle_Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuffList = append(m.BuffList, &Battle_BuffInfo{})
			if err := m.BuffList[len(m.BuffList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_MovePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MovePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MovePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cur == nil {
				m.Cur = &Battle_Pos{}
			}
			if err := m.Cur.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Battle_Pos{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sx", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sx = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sy = float64(math.Float64frombits(v))
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_MoveOutPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveOutPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveOutPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = append(m.ObjectId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_DeadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Box", wireType)
			}
			m.Box = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Box |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_StopMovePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopMovePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopMovePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Battle_Pos{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_BuffInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Continued", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Continued = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_NormalFightInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalFightInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalFightInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Damages = append(m.Damages, &Battle_DamageInfo{})
			if err := m.Damages[len(m.Damages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuffInfos = append(m.BuffInfos, &Battle_BuffInfo{})
			if err := m.BuffInfos[len(m.BuffInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackedTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotPlayAction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotPlayAction = bool(v != 0)
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_DamageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dt", wireType)
			}
			m.Dt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dt |= Battle_DamageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedHp", wireType)
			}
			m.AttackedHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackedHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_HeartFightInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartFightInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartFightInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedHp", wireType)
			}
			m.AttackedHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackedHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_DodgeFightInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DodgeFightInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DodgeFightInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Battle_PoisoningBuffFightInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoisoningBuffFightInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoisoningBuffFightInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBattle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBattle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBattle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBattle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBattle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBattle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBattle = fmt.Errorf("proto: unexpected end of group")
)
